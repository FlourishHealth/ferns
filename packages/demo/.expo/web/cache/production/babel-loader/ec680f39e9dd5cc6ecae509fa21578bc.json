{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{EventTypes}from'../interfaces';var RotationGestureDetector=function(){function RotationGestureDetector(callbacks){_classCallCheck(this,RotationGestureDetector);_defineProperty(this,\"onRotationBegin\",void 0);_defineProperty(this,\"onRotation\",void 0);_defineProperty(this,\"onRotationEnd\",void 0);_defineProperty(this,\"currentTime\",0);_defineProperty(this,\"previousTime\",0);_defineProperty(this,\"previousAngle\",0);_defineProperty(this,\"rotation\",0);_defineProperty(this,\"anchorX\",0);_defineProperty(this,\"anchorY\",0);_defineProperty(this,\"isInProgress\",false);_defineProperty(this,\"keyPointers\",[NaN,NaN]);this.onRotationBegin=callbacks.onRotationBegin;this.onRotation=callbacks.onRotation;this.onRotationEnd=callbacks.onRotationEnd;}_createClass(RotationGestureDetector,[{key:\"updateCurrent\",value:function updateCurrent(event,tracker){this.previousTime=this.currentTime;this.currentTime=event.time;var _this$keyPointers=_slicedToArray(this.keyPointers,2),firstPointerID=_this$keyPointers[0],secondPointerID=_this$keyPointers[1];var firstPointerX=tracker.getLastX(firstPointerID);var firstPointerY=tracker.getLastY(firstPointerID);var secondPointerX=tracker.getLastX(secondPointerID);var secondPointerY=tracker.getLastY(secondPointerID);var vectorX=secondPointerX-firstPointerX;var vectorY=secondPointerY-firstPointerY;this.anchorX=(firstPointerX+secondPointerX)/2;this.anchorY=(firstPointerY+secondPointerY)/2;var angle=-Math.atan2(vectorY,vectorX);this.rotation=Number.isNaN(this.previousAngle)?0:this.previousAngle-angle;this.previousAngle=angle;if(this.rotation>Math.PI){this.rotation-=Math.PI;}else if(this.rotation<-Math.PI){this.rotation+=Math.PI;}if(this.rotation>Math.PI/2){this.rotation-=Math.PI;}else if(this.rotation<-Math.PI/2){this.rotation+=Math.PI;}}},{key:\"finish\",value:function finish(){if(!this.isInProgress){return;}this.isInProgress=false;this.keyPointers=[NaN,NaN];this.onRotationEnd(this);}},{key:\"setKeyPointers\",value:function setKeyPointers(tracker){if(this.keyPointers[0]&&this.keyPointers[1]){return;}var pointerIDs=tracker.getData().keys();this.keyPointers[0]=pointerIDs.next().value;this.keyPointers[1]=pointerIDs.next().value;}},{key:\"onTouchEvent\",value:function onTouchEvent(event,tracker){switch(event.eventType){case EventTypes.DOWN:this.isInProgress=false;break;case EventTypes.ADDITIONAL_POINTER_DOWN:if(this.isInProgress){break;}this.isInProgress=true;this.previousTime=event.time;this.previousAngle=NaN;this.setKeyPointers(tracker);this.updateCurrent(event,tracker);this.onRotationBegin(this);break;case EventTypes.MOVE:if(!this.isInProgress){break;}this.updateCurrent(event,tracker);this.onRotation(this);break;case EventTypes.ADDITIONAL_POINTER_UP:if(!this.isInProgress){break;}if(this.keyPointers.indexOf(event.pointerId)>=0){this.finish();}break;case EventTypes.UP:if(this.isInProgress){this.finish();}break;}return true;}},{key:\"getTimeDelta\",value:function getTimeDelta(){return this.currentTime+this.previousTime;}},{key:\"getAnchorX\",value:function getAnchorX(){return this.anchorX;}},{key:\"getAnchorY\",value:function getAnchorY(){return this.anchorY;}},{key:\"getRotation\",value:function getRotation(){return this.rotation;}},{key:\"reset\",value:function reset(){this.keyPointers=[NaN,NaN];this.isInProgress=false;}}]);return RotationGestureDetector;}();export{RotationGestureDetector as default};","map":{"version":3,"sources":["RotationGestureDetector.ts"],"names":["EventTypes","RotationGestureDetector","NaN","constructor","callbacks","onRotationBegin","onRotation","onRotationEnd","updateCurrent","event","tracker","previousTime","currentTime","time","firstPointerID","secondPointerID","keyPointers","firstPointerX","getLastX","firstPointerY","getLastY","secondPointerX","secondPointerY","vectorX","vectorY","anchorX","anchorY","angle","Math","atan2","rotation","Number","isNaN","previousAngle","PI","finish","isInProgress","setKeyPointers","pointerIDs","getData","keys","next","value","onTouchEvent","eventType","DOWN","ADDITIONAL_POINTER_DOWN","MOVE","ADDITIONAL_POINTER_UP","indexOf","pointerId","UP","getTimeDelta","getAnchorX","getAnchorY","getRotation","reset"],"mappings":"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","sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport PointerTracker from '../tools/PointerTracker';\n\nexport interface RotationGestureListener {\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n}\n\nexport default class RotationGestureDetector\n  implements RotationGestureListener\n{\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n\n  private currentTime = 0;\n  private previousTime = 0;\n\n  private previousAngle = 0;\n  private rotation = 0;\n\n  private anchorX = 0;\n  private anchorY = 0;\n\n  private isInProgress = false;\n\n  private keyPointers: number[] = [NaN, NaN];\n\n  constructor(callbacks: RotationGestureListener) {\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n\n  private updateCurrent(event: AdaptedEvent, tracker: PointerTracker): void {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n\n    const firstPointerX: number = tracker.getLastX(firstPointerID);\n    const firstPointerY: number = tracker.getLastY(firstPointerID);\n    const secondPointerX: number = tracker.getLastX(secondPointerID);\n    const secondPointerY: number = tracker.getLastY(secondPointerID);\n\n    const vectorX: number = secondPointerX - firstPointerX;\n    const vectorY: number = secondPointerY - firstPointerY;\n\n    this.anchorX = (firstPointerX + secondPointerX) / 2;\n    this.anchorY = (firstPointerY + secondPointerY) / 2;\n\n    //Angle diff should be positive when rotating in clockwise direction\n    const angle: number = -Math.atan2(vectorY, vectorX);\n\n    this.rotation = Number.isNaN(this.previousAngle)\n      ? 0\n      : this.previousAngle - angle;\n\n    this.previousAngle = angle;\n\n    if (this.rotation > Math.PI) {\n      this.rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this.rotation += Math.PI;\n    }\n\n    if (this.rotation > Math.PI / 2) {\n      this.rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this.rotation += Math.PI;\n    }\n  }\n\n  private finish(): void {\n    if (!this.isInProgress) {\n      return;\n    }\n\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n\n  private setKeyPointers(tracker: PointerTracker): void {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n\n    const pointerIDs: IterableIterator<number> = tracker.getData().keys();\n\n    this.keyPointers[0] = pointerIDs.next().value as number;\n    this.keyPointers[1] = pointerIDs.next().value as number;\n  }\n\n  public onTouchEvent(event: AdaptedEvent, tracker: PointerTracker): boolean {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n\n        this.setKeyPointers(tracker);\n\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n\n        break;\n\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n\n    return true;\n  }\n\n  public getTimeDelta(): number {\n    return this.currentTime + this.previousTime;\n  }\n\n  public getAnchorX(): number {\n    return this.anchorX;\n  }\n\n  public getAnchorY(): number {\n    return this.anchorY;\n  }\n\n  public getRotation(): number {\n    return this.rotation;\n  }\n\n  public reset(): void {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}