{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"onPress\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import React from'react';import ExpoClipboardPasteButton from'./ExpoClipboardPasteButton';import{jsx as _jsx}from\"react/jsx-runtime\";export function ClipboardPasteButton(_ref){var onPress=_ref.onPress,restProps=_objectWithoutProperties(_ref,_excluded);if(!ExpoClipboardPasteButton){if(false){console.warn(\"'ApplePasteButton' is not available.\");}return null;}var onPastePressed=function onPastePressed(_ref2){var nativeEvent=_ref2.nativeEvent;onPress(nativeEvent);};return _jsx(ExpoClipboardPasteButton,_objectSpread({onPastePressed:onPastePressed},restProps));}","map":{"version":3,"sources":["../src/ClipboardPasteButton.tsx"],"names":[],"mappings":"8xBAAA,MAAO,CAAA,KAAK,KAAM,OAAO,CAIzB,MAAO,CAAA,wBAAwB,KAAM,4BAA4B,CAAC,OAAA,GAAA,IAAA,IAAA,yBAoBlE,MAAM,SAAU,CAAA,oBAAoB,CAAA,IAAA,CAAqD,IAAlD,CAAA,OAAO,CAAA,IAAA,CAAP,OAAO,CAAK,SAAS,CAAA,wBAAA,CAAA,IAAA,CAAA,SAAA,EAC1D,GAAI,CAAC,wBAAwB,CAAE,CAC7B,SAAa,CACX,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CACrD,CACD,MAAO,KAAI,CACZ,CAED,GAAM,CAAA,cAAc,CAAG,QAAjB,CAAA,cAAc,CAAA,KAAA,CAAgE,IAA1D,CAAA,WAAW,CAAA,KAAA,CAAX,WAAW,CACnC,OAAO,CAAC,WAAW,CAAC,CACtB,CAAC,CAED,MAAO,CAAA,IAAA,CAAC,wBAAwB,CAAA,aAAA,EAAC,cAAc,CAAE,cAAe,EAAK,SAAS,CAAC,CAAG,CACpF","sourcesContent":["import React from 'react';\nimport { NativeSyntheticEvent } from 'react-native';\n\nimport { ClipboardPasteButtonProps, PasteEventPayload } from './Clipboard.types';\nimport ExpoClipboardPasteButton from './ExpoClipboardPasteButton';\n\n// @needsAudit\n/**\n * This component displays the `UIPasteControl` button on your screen. This allows pasting from the clipboard without requesting permission from the user.\n *\n * You should only attempt to render this if [`Clipboard.isPasteButtonAvailable`](#ispastebuttonavailable)\n * is `true`. This component will render nothing if it is not available, and you will get\n * a warning in development mode (`__DEV__ === true`).\n *\n * The properties of this component extend from `View`; however, you should not attempt to set\n * `backgroundColor`, `color` or `borderRadius` with the `style` property. Apple restricts customisation of this view.\n * Instead, you should use the backgroundColor and foregroundColor properties to set the colors of the button, the cornerStyle property to change the border radius,\n * and the displayMode property to change the appearance of the icon and label. The word \"Paste\" is not editable and neither is the icon.\n *\n * Make sure to attach height and width via the style props as without these styles, the button will\n * not appear on the screen.\n *\n * @see [Apple Documentation](https://developer.apple.com/documentation/uikit/uipastecontrol) for more details.\n */\nexport function ClipboardPasteButton({ onPress, ...restProps }: ClipboardPasteButtonProps) {\n  if (!ExpoClipboardPasteButton) {\n    if (__DEV__) {\n      console.warn(\"'ApplePasteButton' is not available.\");\n    }\n    return null;\n  }\n\n  const onPastePressed = ({ nativeEvent }: NativeSyntheticEvent<PasteEventPayload>) => {\n    onPress(nativeEvent);\n  };\n\n  return <ExpoClipboardPasteButton onPastePressed={onPastePressed} {...restProps} />;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}