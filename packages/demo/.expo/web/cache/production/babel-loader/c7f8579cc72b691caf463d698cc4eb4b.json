{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{Children}from\"react\";import{ScrollView}from\"./ScrollView\";import{TableContextProvider}from\"./tableContext\";export var Table=function Table(_ref){var children=_ref.children,columns=_ref.columns,borderStyle=_ref.borderStyle,_ref$alternateRowBack=_ref.alternateRowBackground,alternateRowBackground=_ref$alternateRowBack===void 0?true:_ref$alternateRowBack,maxHeight=_ref.maxHeight,_ref$stickyHeader=_ref.stickyHeader,stickyHeader=_ref$stickyHeader===void 0?true:_ref$stickyHeader;var arrayChildren=Children.toArray(children);var _React$useState=React.useState(undefined),_React$useState2=_slicedToArray(_React$useState,2),sortColumn=_React$useState2[0],setSortColumn=_React$useState2[1];var hasDrawerContents=arrayChildren.some(function(child){var _a;return(_a=child.props)===null||_a===void 0?void 0:_a.drawerContents;});var width;if(columns.every(function(column){return typeof column===\"number\";})){width=columns.reduce(function(acc,curr){return acc+curr;},0);if(hasDrawerContents){width=width+30;}}else{width=\"100%\";}return React.createElement(TableContextProvider,{alternateRowBackground:alternateRowBackground,borderStyle:borderStyle,columns:columns,hasDrawerContents:hasDrawerContents,setSortColumn:setSortColumn,sortColumn:sortColumn,stickyHeader:stickyHeader},React.createElement(ScrollView,{horizontal:true,style:{width:width,maxWidth:\"100%\"}},React.createElement(ScrollView,{stickyHeaderIndices:stickyHeader?[0]:undefined,style:{width:width,maxWidth:\"100%\",flex:1,maxHeight:maxHeight}},Children.map(children,function(child,index){return React.cloneElement(child,{color:index%2===1&&alternateRowBackground?\"lightGray\":\"white\"});}))));};","map":{"version":3,"sources":["../src/Table.tsx"],"names":[],"mappings":"iEAAA,MAAO,CAAA,KAAK,EAAG,QAAQ,KAAqB,OAAO,CAInD,OAAQ,UAAU,KAAO,cAAc,CACvC,OAA6B,oBAAoB,KAAO,gBAAgB,CAExE,MAAO,IAAM,CAAA,KAAK,CAAG,QAAR,CAAA,KAAK,CAAA,IAAA,CAOmB,IANnC,CAAA,QAAQ,CAAA,IAAA,CAAR,QAAQ,CACR,OAAO,CAAA,IAAA,CAAP,OAAO,CACP,WAAW,CAAA,IAAA,CAAX,WAAW,CAAA,qBAAA,CAAA,IAAA,CACX,sBAAsB,CAAtB,sBAAsB,CAAA,qBAAA,UAAG,IAAI,CAAA,qBAAA,CAC7B,SAAS,CAAA,IAAA,CAAT,SAAS,CAAA,iBAAA,CAAA,IAAA,CACT,YAAY,CAAZ,YAAY,CAAA,iBAAA,UAAG,IAAI,CAAA,iBAAA,CAEnB,GAAM,CAAA,aAAa,CAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAChD,IAAA,eAAA,CAAoC,KAAK,CAAC,QAAQ,CAAkC,SAAS,CAAC,CAAA,gBAAA,CAAA,cAAA,CAAA,eAAA,IAAvF,UAAU,CAAA,gBAAA,IAAE,aAAa,CAAA,gBAAA,IAIhC,GAAM,CAAA,iBAAiB,CAAG,aAAa,CAAC,IAAI,CAAC,SAAC,KAAK,CAAI,C,OACrD,MAAO,CAAA,EAAA,CAAC,KAAsB,CAAC,KAAK,IAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAE,cAAc,CACtD,CAAC,CAAC,CAIF,GAAI,CAAA,KAAqB,CACzB,GAAI,OAAO,CAAC,KAAK,CAAC,SAAC,MAAM,QAAK,OAAO,CAAA,MAAM,GAAK,QAAQ,GAAC,CAAE,CACzD,KAAK,CAAG,OAAO,CAAC,MAAM,CAAC,SAAC,GAAG,CAAE,IAAI,CAAI,CACnC,MAAQ,CAAA,GAAc,CAAI,IAAe,CAC3C,CAAC,CAAE,CAAC,CAAW,CACf,GAAI,iBAAiB,CAAE,CACrB,KAAK,CAAI,KAAgB,CAAG,EAAE,CAChC,CACF,CAAC,IAAM,CACL,KAAK,CAAG,MAAM,CAChB,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,oBAAoB,CAAA,CACnB,sBAAsB,CAAE,sBAAsB,CAC9C,WAAW,CAAE,WAAW,CACxB,OAAO,CAAE,OAAO,CAChB,iBAAiB,CAAE,iBAAiB,CACpC,aAAa,CAAE,aAAa,CAC5B,UAAU,CAAE,UAAU,CACtB,YAAY,CAAE,YAAY,CAAA,CAE1B,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CAAC,UAAU,CAAA,IAAA,CAAC,KAAK,CAAE,CAAC,KAAK,CAAL,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAC,CAAA,CACrD,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CACT,mBAAmB,CAAE,YAAY,CAAG,CAAC,CAAC,CAAC,CAAG,SAAS,CACnD,KAAK,CAAE,CAAC,KAAK,CAAL,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,IAAI,CAAE,CAAC,CAAE,SAAS,CAAT,SAAS,CAAC,CAAA,CAEnD,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAE,SAAC,KAAK,CAAE,KAAK,QACnC,CAAA,KAAK,CAAC,YAAY,CAAC,KAAY,CAAE,CAC/B,KAAK,CAAE,KAAK,CAAG,CAAC,GAAK,CAAC,EAAI,sBAAsB,CAAG,WAAW,CAAG,O,CAClE,CAAC,GACH,CACU,CACF,CACQ,CAE3B,CAAC","sourceRoot":"","sourcesContent":["import React, { Children } from \"react\";\nimport { ScrollView } from \"./ScrollView\";\nimport { TableContextProvider } from \"./tableContext\";\nexport const Table = ({ children, columns, borderStyle, alternateRowBackground = true, maxHeight, stickyHeader = true, }) => {\n    const arrayChildren = Children.toArray(children);\n    const [sortColumn, setSortColumn] = React.useState(undefined);\n    // Check if any of the rows below have a drawerContents prop to see if we need to render space\n    // for the caret.\n    const hasDrawerContents = arrayChildren.some((child) => {\n        var _a;\n        return (_a = child.props) === null || _a === void 0 ? void 0 : _a.drawerContents;\n    });\n    // Calculate the total width of the table. If the table has only number widths, calculate a\n    // width. Otherwise use 100%.\n    let width;\n    if (columns.every((column) => typeof column === \"number\")) {\n        width = columns.reduce((acc, curr) => {\n            return acc + curr;\n        }, 0);\n        if (hasDrawerContents) {\n            width = width + 30;\n        }\n    }\n    else {\n        width = \"100%\";\n    }\n    return (React.createElement(TableContextProvider, { alternateRowBackground: alternateRowBackground, borderStyle: borderStyle, columns: columns, hasDrawerContents: hasDrawerContents, setSortColumn: setSortColumn, sortColumn: sortColumn, stickyHeader: stickyHeader },\n        React.createElement(ScrollView, { horizontal: true, style: { width, maxWidth: \"100%\" } },\n            React.createElement(ScrollView, { stickyHeaderIndices: stickyHeader ? [0] : undefined, style: { width, maxWidth: \"100%\", flex: 1, maxHeight } }, Children.map(children, (child, index) => React.cloneElement(child, {\n                color: index % 2 === 1 && alternateRowBackground ? \"lightGray\" : \"white\",\n            }))))));\n};\n//# sourceMappingURL=Table.js.map"]},"metadata":{},"sourceType":"module"}