{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{ClipboardUnavailableException,CopyFailureException,NoPermissionException,PasteFailureException}from'./Exceptions';import{base64toBlob,blobToBase64Async,findHtmlInClipboardAsync,findImageInClipboardAsync,getImageSizeFromBlobAsync,htmlToPlainText,isClipboardPermissionDeniedAsync}from'./Utils';import{StringFormat}from'../Clipboard.types';export default{get name(){return'ExpoClipboard';},getStringAsync:function(){var _getStringAsync=_asyncToGenerator(function*(options){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{switch(options.preferredFormat){case StringFormat.HTML:{var clipboardItems=yield navigator.clipboard.read();var blob=yield findHtmlInClipboardAsync(clipboardItems);if(!blob){return yield navigator.clipboard.readText();}return yield new Response(blob).text();}default:{var text=yield navigator.clipboard.readText();if(!text||text===''){var _clipboardItems=yield navigator.clipboard.read();var _blob=yield findHtmlInClipboardAsync(_clipboardItems);var blobText=yield _blob==null?void 0:_blob.text();text=htmlToPlainText(blobText!=null?blobText:'');}return text;}}}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}try{return window.clipboardData.getData('Text');}catch(_unused){return Promise.reject(new Error('Unable to retrieve item from clipboard'));}}});function getStringAsync(_x){return _getStringAsync.apply(this,arguments);}return getStringAsync;}(),setString:function setString(text){var textField=document.createElement('textarea');textField.textContent=text;document.body.appendChild(textField);textField.select();try{document.execCommand('copy');return true;}catch(_unused2){return false;}finally{document.body.removeChild(textField);}},setStringAsync:function(){var _setStringAsync=_asyncToGenerator(function*(text,options){switch(options.inputFormat){case StringFormat.HTML:{if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var clipboardItemInput=createHtmlClipboardItem(text);yield navigator.clipboard.write([clipboardItemInput]);return true;}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw new CopyFailureException(e.message);}}default:{try{if(!navigator.clipboard){throw new Error();}yield navigator.clipboard.writeText(text);return true;}catch(_unused3){return this.setString(text);}}}});function setStringAsync(_x2,_x3){return _setStringAsync.apply(this,arguments);}return setStringAsync;}(),hasStringAsync:function(){var _hasStringAsync=_asyncToGenerator(function*(){return yield clipboardHasTypesAsync(['text/plain','text/html']);});function hasStringAsync(){return _hasStringAsync.apply(this,arguments);}return hasStringAsync;}(),getImageAsync:function(){var _getImageAsync=_asyncToGenerator(function*(_options){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var clipboardItems=yield navigator.clipboard.read();var blob=yield findImageInClipboardAsync(clipboardItems);if(!blob){return null;}var _yield$Promise$all=yield Promise.all([blobToBase64Async(blob),getImageSizeFromBlobAsync(blob)]),_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2),data=_yield$Promise$all2[0],size=_yield$Promise$all2[1];return{data:data,size:size};}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw new PasteFailureException(e.message);}});function getImageAsync(_x4){return _getImageAsync.apply(this,arguments);}return getImageAsync;}(),setImageAsync:function(){var _setImageAsync=_asyncToGenerator(function*(base64image){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var blob=base64toBlob(base64image,'image/png');yield navigator.clipboard.write([new ClipboardItem(_defineProperty({},blob.type,blob))]);}catch(err){throw new CopyFailureException(err.message);}});function setImageAsync(_x5){return _setImageAsync.apply(this,arguments);}return setImageAsync;}(),hasImageAsync:function(){var _hasImageAsync=_asyncToGenerator(function*(){return yield clipboardHasTypesAsync(['image/png','image/jpeg']);});function hasImageAsync(){return _hasImageAsync.apply(this,arguments);}return hasImageAsync;}(),addClipboardListener:function addClipboardListener(){},removeClipboardListener:function removeClipboardListener(){}};function clipboardHasTypesAsync(_x6){return _clipboardHasTypesAsync.apply(this,arguments);}function _clipboardHasTypesAsync(){_clipboardHasTypesAsync=_asyncToGenerator(function*(types){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var clipboardItems=yield navigator.clipboard.read();return clipboardItems.flatMap(function(item){return item.types;}).some(function(type){return types.includes(type);});}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw e;}});return _clipboardHasTypesAsync.apply(this,arguments);}function createHtmlClipboardItem(htmlString){return new ClipboardItem({'text/html':new Blob([htmlString],{type:'text/html'}),'text/plain':new Blob([htmlToPlainText(htmlString)],{type:'text/plain'})});}","map":{"version":3,"names":["ClipboardUnavailableException","CopyFailureException","NoPermissionException","PasteFailureException","base64toBlob","blobToBase64Async","findHtmlInClipboardAsync","findImageInClipboardAsync","getImageSizeFromBlobAsync","htmlToPlainText","isClipboardPermissionDeniedAsync","StringFormat","name","getStringAsync","_getStringAsync","_asyncToGenerator","options","navigator","clipboard","preferredFormat","HTML","clipboardItems","read","blob","readText","Response","text","blobText","e","window","clipboardData","getData","_unused","Promise","reject","Error","_x","apply","arguments","setString","textField","document","createElement","textContent","body","appendChild","select","execCommand","_unused2","removeChild","setStringAsync","_setStringAsync","inputFormat","clipboardItemInput","createHtmlClipboardItem","write","message","writeText","_unused3","_x2","_x3","hasStringAsync","_hasStringAsync","clipboardHasTypesAsync","getImageAsync","_getImageAsync","_options","_yield$Promise$all","all","_yield$Promise$all2","_slicedToArray","data","size","_x4","setImageAsync","_setImageAsync","base64image","ClipboardItem","_defineProperty","type","err","_x5","hasImageAsync","_hasImageAsync","addClipboardListener","removeClipboardListener","_x6","_clipboardHasTypesAsync","types","flatMap","item","some","includes","htmlString","Blob"],"sources":["/Users/josh/src/ui/node_modules/expo-clipboard/src/web/ClipboardModule.ts"],"sourcesContent":["import {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\nimport {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default: {\n        try {\n          if (!navigator.clipboard) {\n            throw new Error();\n          }\n          await navigator.clipboard.writeText(text);\n          return true;\n        } catch {\n          // we can fall back to legacy behavior in any kind of failure\n          // including navigator.clipboard unavailability\n          return this.setString(text);\n        }\n      }\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          [blob.type]: blob,\n        }),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}