{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{Platform}from'expo-modules-core';import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import AssetSourceResolver from'./AssetSourceResolver';import{getManifest,getManifest2,manifestBaseUrl}from'./PlatformUtils';var assetMapOverride=getManifest().assetMapOverride;export function selectAssetSource(meta){var _meta$fileHashes$inde,_meta$fileUris$index,_manifest2$extra,_manifest2$extra$expo;if(assetMapOverride&&assetMapOverride.hasOwnProperty(meta.hash)){meta=_objectSpread(_objectSpread({},meta),assetMapOverride[meta.hash]);}var scale=AssetSourceResolver.pickScale(meta.scales,PixelRatio.get());var index=meta.scales.findIndex(function(s){return s===scale;});var hash=meta.fileHashes?(_meta$fileHashes$inde=meta.fileHashes[index])!=null?_meta$fileHashes$inde:meta.fileHashes[0]:meta.hash;var uri=meta.fileUris?(_meta$fileUris$index=meta.fileUris[index])!=null?_meta$fileUris$index:meta.fileUris[0]:meta.uri;if(uri){return{uri:resolveUri(uri),hash:hash};}var assetUrlOverride=getManifest().assetUrlOverride;if(assetUrlOverride){var _uri=pathJoin(assetUrlOverride,hash);return{uri:resolveUri(_uri),hash:hash};}var fileScale=scale===1?'':`@${scale}x`;var fileExtension=meta.type?`.${encodeURIComponent(meta.type)}`:'';var suffix=`/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;var params=new URLSearchParams({platform:\"web\",hash:meta.hash});if(/^https?:\\/\\//.test(meta.httpServerLocation)){var _uri2=meta.httpServerLocation+suffix+'?'+params;return{uri:_uri2,hash:hash};}var manifest2=getManifest2();var devServerUrl=manifest2!=null&&(_manifest2$extra=manifest2.extra)!=null&&(_manifest2$extra$expo=_manifest2$extra.expoGo)!=null&&_manifest2$extra$expo.developer?'http://'+manifest2.extra.expoGo.debuggerHost:getManifest().developer?getManifest().bundleUrl:null;if(devServerUrl){var baseUrl=new URL(meta.httpServerLocation+suffix,devServerUrl);baseUrl.searchParams.set('platform',\"web\");baseUrl.searchParams.set('hash',meta.hash);return{uri:baseUrl.href,hash:hash};}if(NativeModules.ExponentKernel){return{uri:`https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,hash:hash};}return{uri:'',hash:hash};}export function resolveUri(uri){return manifestBaseUrl?new URL(uri,manifestBaseUrl).href:uri;}export function pathJoin(){for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}var combined=paths.map(function(part,index){if(index===0){return part.trim().replace(/\\/*$/,'');}return part.trim().replace(/(^\\/*|\\/*$)/g,'');}).filter(function(part){return part.length>0;}).join('/').split('/');var resolved=[];for(var part of combined){if(part==='..'){resolved.pop();}else if(part!=='.'){resolved.push(part);}}return resolved.join('/');}","map":{"version":3,"sources":["../src/AssetSources.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PackagerAsset } from '@react-native/assets-registry/registry';\nimport { Platform } from 'expo-modules-core';\nimport { PixelRatio, NativeModules } from 'react-native';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { getManifest, getManifest2, manifestBaseUrl } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = Pick<\n  PackagerAsset,\n  'httpServerLocation' | 'name' | 'hash' | 'type' | 'scales' | 'width' | 'height'\n> & {\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest.\n// This value will always be either null or an absolute URL, e.g. `https://expo.dev/`\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] ?? meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] ?? meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = pathJoin(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;\n  const params = new URLSearchParams({\n    platform: Platform.OS,\n    hash: meta.hash,\n  });\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix + '?' + params;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  const devServerUrl = manifest2?.extra?.expoGo?.developer\n    ? 'http://' + manifest2.extra.expoGo.debuggerHost\n    : // For assets during development, we use the development server's URL origin\n    getManifest().developer\n    ? getManifest().bundleUrl\n    : null;\n  if (devServerUrl) {\n    const baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);\n\n    baseUrl.searchParams.set('platform', Platform.OS);\n    baseUrl.searchParams.set('hash', meta.hash);\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // Temporary fallback for loading assets in Expo Go home\n  if (NativeModules.ExponentKernel) {\n    return { uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`, hash };\n  }\n\n  // In correctly configured apps, we arrive here if the asset is locally available on disk due to\n  // being managed by expo-updates, and `getLocalAssetUri(hash)` must return a local URI for this\n  // hash. Since the asset is local, we don't have a remote URL and specify an invalid URL (an empty\n  // string) as a placeholder.\n  return { uri: '', hash };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  // `manifestBaseUrl` is always an absolute URL or `null`.\n  return manifestBaseUrl ? new URL(uri, manifestBaseUrl).href : uri;\n}\n\n// A very cheap path canonicalization like path.join but without depending on a `path` polyfill.\nexport function pathJoin(...paths: string[]): string {\n  // Start by simply combining paths, without worrying about \"..\" or \".\"\n  const combined = paths\n    .map((part, index) => {\n      if (index === 0) {\n        return part.trim().replace(/\\/*$/, '');\n      }\n      return part.trim().replace(/(^\\/*|\\/*$)/g, '');\n    })\n    .filter((part) => part.length > 0)\n    .join('/')\n    .split('/');\n\n  // Handle \"..\" and \".\" in paths\n  const resolved: string[] = [];\n  for (const part of combined) {\n    if (part === '..') {\n      resolved.pop(); // Remove the last element from the result\n    } else if (part !== '.') {\n      resolved.push(part);\n    }\n  }\n\n  return resolved.join('/');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}