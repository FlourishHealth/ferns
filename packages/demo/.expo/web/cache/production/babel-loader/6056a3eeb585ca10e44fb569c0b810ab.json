{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"useLegacyImplementation\",\"layout\",\"drawerType\",\"drawerPosition\",\"drawerStyle\",\"swipeEnabled\",\"swipeEdgeWidth\",\"swipeMinDistance\",\"swipeMinVelocity\",\"keyboardDismissMode\",\"hideStatusBarOnOpen\",\"statusBarAnimation\",\"style\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import I18nManager from\"react-native-web/dist/exports/I18nManager\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import*as Reanimated from'react-native-reanimated';import{SWIPE_MIN_DISTANCE,SWIPE_MIN_VELOCITY}from'../constants';import{GestureHandlerRootView}from'./GestureHandler';var getDefaultDrawerWidth=function getDefaultDrawerWidth(_ref){var height=_ref.height,width=_ref.width;var smallerAxisSize=Math.min(height,width);var isLandscape=width>height;var isTablet=smallerAxisSize>=600;var appBarHeight=\"web\"==='ios'?isLandscape?32:44:56;var maxWidth=isTablet?320:280;return Math.min(smallerAxisSize-appBarHeight,maxWidth);};export function Drawer(_ref2){var _Reanimated$isConfigu;var _ref2$useLegacyImplem=_ref2.useLegacyImplementation,useLegacyImplementation=_ref2$useLegacyImplem===void 0?!((_Reanimated$isConfigu=Reanimated.isConfigured)!==null&&_Reanimated$isConfigu!==void 0&&_Reanimated$isConfigu.call(Reanimated)):_ref2$useLegacyImplem,customLayout=_ref2.layout,_ref2$drawerType=_ref2.drawerType,drawerType=_ref2$drawerType===void 0?'front':_ref2$drawerType,_ref2$drawerPosition=_ref2.drawerPosition,drawerPosition=_ref2$drawerPosition===void 0?I18nManager.getConstants().isRTL?'right':'left':_ref2$drawerPosition,drawerStyle=_ref2.drawerStyle,_ref2$swipeEnabled=_ref2.swipeEnabled,swipeEnabled=_ref2$swipeEnabled===void 0?\"web\"!=='web'&&\"web\"!=='windows'&&\"web\"!=='macos':_ref2$swipeEnabled,_ref2$swipeEdgeWidth=_ref2.swipeEdgeWidth,swipeEdgeWidth=_ref2$swipeEdgeWidth===void 0?32:_ref2$swipeEdgeWidth,_ref2$swipeMinDistanc=_ref2.swipeMinDistance,swipeMinDistance=_ref2$swipeMinDistanc===void 0?SWIPE_MIN_DISTANCE:_ref2$swipeMinDistanc,_ref2$swipeMinVelocit=_ref2.swipeMinVelocity,swipeMinVelocity=_ref2$swipeMinVelocit===void 0?SWIPE_MIN_VELOCITY:_ref2$swipeMinVelocit,_ref2$keyboardDismiss=_ref2.keyboardDismissMode,keyboardDismissMode=_ref2$keyboardDismiss===void 0?'on-drag':_ref2$keyboardDismiss,_ref2$hideStatusBarOn=_ref2.hideStatusBarOnOpen,hideStatusBarOnOpen=_ref2$hideStatusBarOn===void 0?false:_ref2$hideStatusBarOn,_ref2$statusBarAnimat=_ref2.statusBarAnimation,statusBarAnimation=_ref2$statusBarAnimat===void 0?'slide':_ref2$statusBarAnimat,style=_ref2.style,rest=_objectWithoutProperties(_ref2,_excluded);var legacyImplemenationNotAvailable=require('react-native-reanimated').abs===undefined;if(useLegacyImplementation&&legacyImplemenationNotAvailable){throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');}var Drawer=useLegacyImplementation?require('./legacy/Drawer').Drawer:require('./modern/Drawer').Drawer;var windowDimensions=useWindowDimensions();var layout=customLayout!=null?customLayout:windowDimensions;return React.createElement(GestureHandlerRootView,{style:[styles.container,style]},React.createElement(Drawer,_extends({},rest,{layout:layout,drawerType:drawerType,drawerPosition:drawerPosition,drawerStyle:[{width:getDefaultDrawerWidth(layout)},styles.drawer,drawerStyle],swipeEnabled:swipeEnabled,swipeEdgeWidth:swipeEdgeWidth,swipeMinDistance:swipeMinDistance,swipeMinVelocity:swipeMinVelocity,keyboardDismissMode:keyboardDismissMode,hideStatusBarOnOpen:hideStatusBarOnOpen,statusBarAnimation:statusBarAnimation})));}var styles=StyleSheet.create({container:{flex:1},drawer:{backgroundColor:'white'}});","map":{"version":3,"sources":["views/Drawer.tsx"],"names":["React","Reanimated","SWIPE_MIN_DISTANCE","SWIPE_MIN_VELOCITY","GestureHandlerRootView","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","maxWidth","Drawer","useLegacyImplementation","isConfigured","layout","customLayout","drawerType","drawerPosition","I18nManager","getConstants","isRTL","drawerStyle","swipeEnabled","swipeEdgeWidth","swipeMinDistance","swipeMinVelocity","keyboardDismissMode","hideStatusBarOnOpen","statusBarAnimation","style","rest","legacyImplemenationNotAvailable","require","abs","undefined","Error","windowDimensions","useWindowDimensions","styles","container","drawer","StyleSheet","create","flex","backgroundColor"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { I18nManager, Platform, StyleSheet, useWindowDimensions } from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { SWIPE_MIN_DISTANCE, SWIPE_MIN_VELOCITY } from '../constants';\nimport { GestureHandlerRootView } from './GestureHandler';\nconst getDefaultDrawerWidth = _ref => {\n  let {\n    height,\n    width\n  } = _ref;\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  const maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nexport function Drawer(_ref2) {\n  var _Reanimated$isConfigu;\n  let {\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    useLegacyImplementation = !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)),\n    layout: customLayout,\n    drawerType = Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }),\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStyle,\n    swipeEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n    swipeEdgeWidth = 32,\n    swipeMinDistance = SWIPE_MIN_DISTANCE,\n    swipeMinVelocity = SWIPE_MIN_VELOCITY,\n    keyboardDismissMode = 'on-drag',\n    hideStatusBarOnOpen = false,\n    statusBarAnimation = 'slide',\n    style,\n    ...rest\n  } = _ref2;\n  // Reanimated v3 dropped legacy v1 API\n  const legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  const Drawer = useLegacyImplementation ? require('./legacy/Drawer').Drawer : require('./modern/Drawer').Drawer;\n  const windowDimensions = useWindowDimensions();\n  const layout = customLayout ?? windowDimensions;\n  return /*#__PURE__*/React.createElement(GestureHandlerRootView, {\n    style: [styles.container, style]\n  }, /*#__PURE__*/React.createElement(Drawer, _extends({}, rest, {\n    layout: layout,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(layout)\n    }, styles.drawer, drawerStyle],\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeMinDistance: swipeMinDistance,\n    swipeMinVelocity: swipeMinVelocity,\n    keyboardDismissMode: keyboardDismissMode,\n    hideStatusBarOnOpen: hideStatusBarOnOpen,\n    statusBarAnimation: statusBarAnimation\n  })));\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  drawer: {\n    backgroundColor: 'white'\n  }\n});\n//# sourceMappingURL=Drawer.js.map"]},"metadata":{},"sourceType":"module"}