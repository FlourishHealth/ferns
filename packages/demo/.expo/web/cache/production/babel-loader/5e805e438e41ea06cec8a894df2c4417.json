{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{CodedError,Platform,UnavailabilityError}from'expo-modules-core';import ExpoFontLoader from'./ExpoFontLoader';import{FontDisplay}from'./Font.types';import{getAssetForSource,loadSingleFontAsync,fontFamilyNeedsScoping,getNativeFontName}from'./FontLoader';import{loaded,loadPromises}from'./memory';import{registerStaticFont}from'./server';export function processFontFamily(fontFamily){if(!fontFamily||!fontFamilyNeedsScoping(fontFamily)){return fontFamily;}if(!isLoaded(fontFamily)){if(false){if(isLoading(fontFamily)){console.warn(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);}else{console.warn(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`);}}}return`ExpoFont-${getNativeFontName(fontFamily)}`;}export function isLoaded(fontFamily){var _ExpoFontLoader$custo;if(\"web\"==='web'){return fontFamily in loaded||!!ExpoFontLoader.isLoaded(fontFamily);}return fontFamily in loaded||((_ExpoFontLoader$custo=ExpoFontLoader.customNativeFonts)==null?void 0:_ExpoFontLoader$custo.includes(fontFamily));}export function isLoading(fontFamily){return fontFamily in loadPromises;}export function loadAsync(fontFamilyOrFontMap,source){var isServer=\"web\"==='web'&&typeof window==='undefined';if(typeof fontFamilyOrFontMap==='object'){if(source){return Promise.reject(new CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);if(isServer){names.map(function(name){return registerStaticFont(name,fontMap[name]);});return Promise.resolve();}return Promise.all(names.map(function(name){return loadFontInNamespaceAsync(name,fontMap[name]);})).then(function(){});}if(isServer){registerStaticFont(fontFamilyOrFontMap,source);return Promise.resolve();}return loadFontInNamespaceAsync(fontFamilyOrFontMap,source);}function loadFontInNamespaceAsync(_x,_x2){return _loadFontInNamespaceAsync.apply(this,arguments);}function _loadFontInNamespaceAsync(){_loadFontInNamespaceAsync=_asyncToGenerator(function*(fontFamily,source){if(!source){throw new CodedError(`ERR_FONT_SOURCE`,`Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);}if(loaded[fontFamily]){return;}if(loadPromises.hasOwnProperty(fontFamily)){return loadPromises[fontFamily];}var asset=getAssetForSource(source);loadPromises[fontFamily]=_asyncToGenerator(function*(){try{yield loadSingleFontAsync(fontFamily,asset);loaded[fontFamily]=true;}finally{delete loadPromises[fontFamily];}})();yield loadPromises[fontFamily];});return _loadFontInNamespaceAsync.apply(this,arguments);}export function unloadAllAsync(){return _unloadAllAsync.apply(this,arguments);}function _unloadAllAsync(){_unloadAllAsync=_asyncToGenerator(function*(){if(!ExpoFontLoader.unloadAllAsync){throw new UnavailabilityError('expo-font','unloadAllAsync');}if(Object.keys(loadPromises).length){throw new CodedError(`ERR_UNLOAD`,`Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);}for(var fontFamily of Object.keys(loaded)){delete loaded[fontFamily];}yield ExpoFontLoader.unloadAllAsync();});return _unloadAllAsync.apply(this,arguments);}export function unloadAsync(_x3,_x4){return _unloadAsync.apply(this,arguments);}function _unloadAsync(){_unloadAsync=_asyncToGenerator(function*(fontFamilyOrFontMap,options){if(!ExpoFontLoader.unloadAsync){throw new UnavailabilityError('expo-font','unloadAsync');}if(typeof fontFamilyOrFontMap==='object'){if(options){throw new CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);yield Promise.all(names.map(function(name){return unloadFontInNamespaceAsync(name,fontMap[name]);}));return;}return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap,options);});return _unloadAsync.apply(this,arguments);}function unloadFontInNamespaceAsync(_x5,_x6){return _unloadFontInNamespaceAsync.apply(this,arguments);}function _unloadFontInNamespaceAsync(){_unloadFontInNamespaceAsync=_asyncToGenerator(function*(fontFamily,options){if(!loaded[fontFamily]){return;}else{delete loaded[fontFamily];}var nativeFontName=getNativeFontName(fontFamily);if(!nativeFontName){throw new CodedError(`ERR_FONT_FAMILY`,`Cannot unload an empty name`);}yield ExpoFontLoader.unloadAsync(nativeFontName,options);});return _unloadFontInNamespaceAsync.apply(this,arguments);}export{FontDisplay};","map":{"version":3,"sources":["../src/Font.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\nimport { loaded, loadPromises } from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.warn(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`\n        );\n      }\n    }\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded || ExpoFontLoader.customNativeFonts?.includes(fontFamily);\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}