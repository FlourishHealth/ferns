{"ast":null,"code":"import Platform from\"react-native-web/dist/exports/Platform\";import createMultiStyleIconSet from'./createMultiStyleIconSet';var FA6Style={regular:'regular',light:'light',solid:'solid',brand:'brand',sharp:'sharp',sharpLight:'sharpLight',sharpSolid:'sharpSolid',duotone:'duotone',thin:'thin'};function createFA6iconSet(glyphMap){var metadata=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var fonts=arguments.length>2?arguments[2]:undefined;var pro=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var metadataKeys=Object.keys(metadata);var fontFamily=`FontAwesome6${pro?'Pro':'Free'}`;function fallbackFamily(glyph){for(var i=0;i<metadataKeys.length;i+=1){var family=metadataKeys[i];if(metadata[family].indexOf(glyph)!==-1){return family==='brands'?'brand':family;}}return'regular';}function glyphValidator(glyph,style){var family=style==='brand'?'brands':style;family=style==='sharpSolid'?'sharp-solid':family;if(metadataKeys.indexOf(family)===-1)return false;return metadata[family].indexOf(glyph)!==-1;}function createFontAwesomeStyle(style,fontWeight){var family=arguments.length>2&&arguments[2]!==undefined?arguments[2]:fontFamily;var styleName=style;var fontFile=fonts[styleName];if(styleName==='Brands'){styleName='Regular';}if(styleName==='Duotone'){styleName='Solid';}styleName=styleName.replace('Sharp_','');return{fontFamily:`${family}-${styleName}`,fontFile:fontFile,fontStyle:{},glyphMap:glyphMap};}var brandIcons=createFontAwesomeStyle('Brands','400','FontAwesome6Brands');var lightIcons=createFontAwesomeStyle('Light','300');var regularIcons=createFontAwesomeStyle('Regular','400');var solidIcons=createFontAwesomeStyle('Solid','900');var sharpLightIcons=createFontAwesomeStyle('Sharp_Light','300','FontAwesome6Sharp');var sharpIcons=createFontAwesomeStyle('Sharp_Regular','400','FontAwesome6Sharp');var sharpSolidIcons=createFontAwesomeStyle('Sharp_Solid','900','FontAwesome6Sharp');var duotoneIcons=createFontAwesomeStyle('Duotone','900','FontAwesome6Duotone');var thinIcons=createFontAwesomeStyle('Thin','100');var Icon=createMultiStyleIconSet({brand:brandIcons,light:lightIcons,regular:regularIcons,solid:solidIcons,sharp:sharpIcons,sharpLight:sharpLightIcons,sharpSolid:sharpSolidIcons,duotone:duotoneIcons,thin:thinIcons},{defaultStyle:'regular',fallbackFamily:fallbackFamily,glyphValidator:glyphValidator});return Icon;}export{createFA6iconSet,FA6Style};","map":{"version":3,"sources":["../src/createIconSetFromFontAwesome6.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\n\nimport createMultiStyleIconSet from './createMultiStyleIconSet';\n\nconst FA6Style = {\n  regular: 'regular',\n  light: 'light',\n  solid: 'solid',\n  brand: 'brand',\n  sharp: 'sharp',\n  sharpLight: 'sharpLight',\n  sharpSolid: 'sharpSolid',\n  duotone: 'duotone',\n  thin: 'thin',\n};\n\nfunction createFA6iconSet(glyphMap, metadata = {}, fonts, pro = false) {\n  const metadataKeys = Object.keys(metadata);\n  const fontFamily = `FontAwesome6${pro ? 'Pro' : 'Free'}`;\n\n  function fallbackFamily(glyph) {\n    for (let i = 0; i < metadataKeys.length; i += 1) {\n      const family = metadataKeys[i];\n      if (metadata[family].indexOf(glyph) !== -1) {\n        return family === 'brands' ? 'brand' : family;\n      }\n    }\n\n    return 'regular';\n  }\n\n  function glyphValidator(glyph, style) {\n    let family = style === 'brand' ? 'brands' : style;\n    family = style === 'sharpSolid' ? 'sharp-solid' : family;\n    if (metadataKeys.indexOf(family) === -1) return false;\n    return metadata[family].indexOf(glyph) !== -1;\n  }\n\n  function createFontAwesomeStyle(style, fontWeight, family = fontFamily) {\n    let styleName = style;\n\n    const fontFile = fonts[styleName];\n\n    if (styleName === 'Brands') {\n      styleName = 'Regular';\n    }\n\n    if (styleName === 'Duotone') {\n      styleName = 'Solid';\n    }\n\n    styleName = styleName.replace('Sharp_', '');\n\n    return {\n      fontFamily: `${family}-${styleName}`,\n      fontFile,\n      fontStyle: Platform.select({\n        ios: {\n          fontWeight,\n        },\n        default: {},\n      }),\n      glyphMap,\n    };\n  }\n\n  const brandIcons = createFontAwesomeStyle('Brands', '400', 'FontAwesome6Brands');\n  const lightIcons = createFontAwesomeStyle('Light', '300');\n  const regularIcons = createFontAwesomeStyle('Regular', '400');\n  const solidIcons = createFontAwesomeStyle('Solid', '900');\n  const sharpLightIcons = createFontAwesomeStyle('Sharp_Light', '300', 'FontAwesome6Sharp');\n  const sharpIcons = createFontAwesomeStyle('Sharp_Regular', '400', 'FontAwesome6Sharp');\n  const sharpSolidIcons = createFontAwesomeStyle('Sharp_Solid', '900', 'FontAwesome6Sharp');\n  const duotoneIcons = createFontAwesomeStyle('Duotone', '900', 'FontAwesome6Duotone');\n  const thinIcons = createFontAwesomeStyle('Thin', '100');\n  const Icon = createMultiStyleIconSet(\n    {\n      brand: brandIcons,\n      light: lightIcons,\n      regular: regularIcons,\n      solid: solidIcons,\n      sharp: sharpIcons,\n      sharpLight: sharpLightIcons,\n      sharpSolid: sharpSolidIcons,\n      duotone: duotoneIcons,\n      thin: thinIcons,\n    },\n    {\n      defaultStyle: 'regular',\n      fallbackFamily,\n      glyphValidator,\n    }\n  );\n\n  return Icon;\n}\n\nexport { createFA6iconSet, FA6Style };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}