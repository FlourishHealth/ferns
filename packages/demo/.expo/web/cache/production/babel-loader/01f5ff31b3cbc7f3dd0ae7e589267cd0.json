{"ast":null,"code":"import{DateTime}from\"luxon\";function getDate(date){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref.timezone;if(!date){throw new Error(\"Passed undefined\");}if(typeof date!==\"string\"){throw new Error(`Invalid date type: ${typeof date}`);}var clonedDate=timezone?DateTime.fromISO(date).setZone(timezone):DateTime.fromISO(date);if(!clonedDate.isValid){throw new Error(`Invalid date: ${date}`);}return clonedDate;}export function isTomorrow(date){var _ref2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref2.timezone;var clonedDate=getDate(date,{timezone:timezone});var now=timezone?DateTime.now().setZone(timezone):DateTime.now();var diff=now.startOf(\"day\").diff(clonedDate.startOf(\"day\"),\"days\");return diff.days<=-1&&diff.days>-2;}export function isYesterday(date){var _ref3=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref3.timezone;var clonedDate=getDate(date,{timezone:timezone});var now=timezone?DateTime.now().setZone(timezone):DateTime.now();var diff=now.startOf(\"day\").diff(clonedDate.startOf(\"day\"),\"days\");return diff.days<=1&&diff.days>-1;}export function isToday(date){var _ref4=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref4.timezone;var clonedDate=getDate(date,{timezone:timezone});var now=timezone?DateTime.now().setZone(timezone):DateTime.now();var diff=now.startOf(\"day\").diff(clonedDate.startOf(\"day\"),\"days\");return diff.days===0;}export function isThisYear(date){var _ref5=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref5.timezone;var clonedDate=getDate(date,{timezone:timezone});var now=timezone?DateTime.now().setZone(timezone):DateTime.now();return clonedDate.year===now.year;}export function isWithinWeek(date){var _ref6=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref6.timezone;var clonedDate=getDate(date,{timezone:timezone});var now=timezone?DateTime.now().setZone(timezone):DateTime.now();var diff=now.startOf(\"day\").diff(clonedDate.startOf(\"day\"),\"days\");return diff.days>-7&&diff.days<7;}export function humanDate(date){var _ref7=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref7.timezone,dontShowTime=_ref7.dontShowTime;var clonedDate;try{clonedDate=getDate(date,{timezone:timezone});}catch(error){throw new Error(`humanDate: ${error.message}`);}if(isTomorrow(date,{timezone:timezone})){return\"Tomorrow\";}else if(isToday(date,{timezone:timezone})){if(dontShowTime){return\"Today\";}else{return clonedDate.toFormat(\"h:mm a\");}}else if(isYesterday(date,{timezone:timezone})){return\"Yesterday\";}else if(isWithinWeek(date,{timezone:timezone})){return clonedDate.toFormat(\"EEEE\");}else if(isThisYear(date,{timezone:timezone})){return clonedDate.toFormat(\"MMM d\");}else{return clonedDate.toFormat(\"MMM d, iiii\");}}export function humanDateAndTime(date){var _ref8=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref8.timezone,_ref8$showTimezone=_ref8.showTimezone,showTimezone=_ref8$showTimezone===void 0?true:_ref8$showTimezone;var clonedDate;try{clonedDate=getDate(date,{timezone:timezone});}catch(error){throw new Error(`humanDateAndTime: ${error.message}`);}var time=clonedDate.toFormat(\"h:mm a\");if(showTimezone){time+=` ${clonedDate.offsetNameShort}`;}if(isTomorrow(date,{timezone:timezone})){return`Tomorrow ${time}`;}else if(isToday(date,{timezone:timezone})){return time;}else if(isYesterday(date,{timezone:timezone})){return`Yesterday ${time}`;}else if(isWithinWeek(date,{timezone:timezone})){return`${clonedDate.toFormat(\"EEEE\")} ${time}`;}else if(isThisYear(date,{timezone:timezone})){return`${clonedDate.toFormat(\"MMM d\")} ${time}`;}else{return`${clonedDate.toFormat(\"MMM d, iiii\")} ${time}`;}}export var printDate=function printDate(date){var _ref9=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref9.timezone,showTimezone=_ref9.showTimezone,ignoreTime=_ref9.ignoreTime,defaultValue=_ref9.defaultValue;if(!date){return defaultValue!==null&&defaultValue!==void 0?defaultValue:\"Invalid Date\";}if(showTimezone){console.warn(\"showTimezone is not supported for printDate\");}var clonedDate;try{clonedDate=getDate(date,{timezone:timezone});}catch(error){throw new Error(`printDate: ${error.message}`);}if(ignoreTime){if(!date){throw new Error(\"printDate: Passed undefined\");}var justDate=DateTime.fromISO(date);return justDate.setZone(\"UTC\").toFormat(\"M/d/yyyy\");}return clonedDate.toLocaleString(DateTime.DATE_SHORT);};export var printOnlyDate=function printOnlyDate(date){var _ref10=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},defaultValue=_ref10.defaultValue;if(!date){return defaultValue!==null&&defaultValue!==void 0?defaultValue:\"Invalid Date\";}if(!(date===null||date===void 0?void 0:date.endsWith(\"T00:00:00.000Z\"))){console.warn(\"printOnlyDate, but the time is not set to midnight UTC. \"+\"This may cause unexpected behavior.\");}var justDate=DateTime.fromISO(date,{zone:\"UTC\"});return justDate.toFormat(\"M/d/yyyy\");};export function printTime(date){var _ref11=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{timezone:\"America/New_York\",defaultValue:\"Invalid Date\"},timezone=_ref11.timezone,showTimezone=_ref11.showTimezone,defaultValue=_ref11.defaultValue;if(!date){return defaultValue!==null&&defaultValue!==void 0?defaultValue:\"Invalid Date\";}var clonedDate;if(!timezone){throw new Error(\"printTime: timezone is required\");}try{clonedDate=getDate(date,{timezone:timezone});}catch(error){throw new Error(`printTime: ${error.message}`);}if(showTimezone){return clonedDate.toFormat(\"h:mm a ZZZZ\");}else{return clonedDate.toLocaleString(DateTime.TIME_SIMPLE);}}export function printDateAndTime(date){var _ref12=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref12.timezone,showTimezone=_ref12.showTimezone,defaultValue=_ref12.defaultValue;if(!date){return defaultValue!==null&&defaultValue!==void 0?defaultValue:\"Invalid Datetime\";}var clonedDate;try{clonedDate=getDate(date,{timezone:timezone});}catch(error){throw new Error(`printDateAndTime: ${error.message}`);}var dateString=clonedDate.toLocaleString(DateTime.DATETIME_SHORT);if(showTimezone){dateString+=` ${clonedDate.offsetNameShort}`;}return dateString;}export function printDateRange(start,end,_ref13){var timezone=_ref13.timezone,_ref13$showTimezone=_ref13.showTimezone,showTimezone=_ref13$showTimezone===void 0?true:_ref13$showTimezone;var startDate=printDate(start,{timezone:timezone,showTimezone:false});var endDate=printDate(end,{timezone:timezone,showTimezone:false});var startTime=printTime(start,{timezone:timezone,showTimezone:false});var endTime=printTime(end,{timezone:timezone,showTimezone:showTimezone});if(startDate===endDate){return`${startDate} ${startTime} - ${endTime}`;}else{return`${startDate} ${startTime} - ${endDate} ${endTime}`;}}export function printSince(date){var _ref14=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref14.timezone,_ref14$showAgo=_ref14.showAgo,showAgo=_ref14$showAgo===void 0?true:_ref14$showAgo;var clonedDate;var ago=showAgo?\" ago\":\"\";try{clonedDate=getDate(date,{timezone:timezone});}catch(error){throw new Error(`printSince: ${error.message}`);}var now=timezone?DateTime.now().setZone(timezone):DateTime.now();var diff=now.diff(clonedDate,\"months\");if(diff.months<2){var days=Math.floor(now.diff(clonedDate,\"days\").days);return`${days} ${days===1?\"day\":\"days\"}${ago}`;}else if(diff.months<12){var months=Math.floor(diff.months);return`${months} ${months===1?\"month\":\"months\"}${ago}`;}else{var years=Math.floor(now.diff(clonedDate,\"years\").years);return`${years} ${years===1?\"year\":\"years\"}${ago}`;}}","map":{"version":3,"sources":["../src/DateUtilities.tsx"],"names":[],"mappings":"AAAA,OAAQ,QAAQ,KAAO,OAAO,CAE9B,QAAS,CAAA,OAAO,CAAC,IAAY,CAAsC,KAAA,IAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAnC,QAAQ,CAAA,IAAA,CAAR,QAAQ,CACtC,GAAI,CAAC,IAAI,CAAE,CACT,KAAM,IAAI,CAAA,KAAK,CAAC,kBAAkB,CAAC,CACrC,CACA,GAAI,MAAQ,CAAA,IAAY,GAAK,QAAQ,CAAE,CACrC,KAAM,IAAI,CAAA,KAAK,CAAC,sBAAsB,MAAO,CAAA,IAAI,EAAE,CAAC,CACtD,CACA,GAAM,CAAA,UAAU,CAAG,QAAQ,CAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAC/F,GAAI,CAAC,UAAU,CAAC,OAAO,CAAE,CACvB,KAAM,IAAI,CAAA,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAC1C,CACA,MAAO,CAAA,UAAU,CACnB,CAEA,MAAM,SAAU,CAAA,UAAU,CAAC,IAAY,CAAsC,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAnC,QAAQ,CAAA,KAAA,CAAR,QAAQ,CAChD,GAAM,CAAA,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAC5C,GAAM,CAAA,GAAG,CAAG,QAAQ,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CACxE,GAAM,CAAA,IAAI,CAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,MAAM,CAAC,CACvE,MAAO,CAAA,IAAI,CAAC,IAAI,EAAI,CAAC,CAAC,EAAI,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC,CAC1C,CAEA,MAAM,SAAU,CAAA,WAAW,CAAC,IAAY,CAAsC,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAnC,QAAQ,CAAA,KAAA,CAAR,QAAQ,CACjD,GAAM,CAAA,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAC5C,GAAM,CAAA,GAAG,CAAG,QAAQ,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CACxE,GAAM,CAAA,IAAI,CAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,MAAM,CAAC,CACvE,MAAO,CAAA,IAAI,CAAC,IAAI,EAAI,CAAC,EAAI,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC,CACzC,CAEA,MAAM,SAAU,CAAA,OAAO,CAAC,IAAY,CAAsC,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAnC,QAAQ,CAAA,KAAA,CAAR,QAAQ,CAC7C,GAAM,CAAA,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAC5C,GAAM,CAAA,GAAG,CAAG,QAAQ,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CACxE,GAAM,CAAA,IAAI,CAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,MAAM,CAAC,CACvE,MAAO,CAAA,IAAI,CAAC,IAAI,GAAK,CAAC,CACxB,CAEA,MAAM,SAAU,CAAA,UAAU,CAAC,IAAY,CAAsC,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAnC,QAAQ,CAAA,KAAA,CAAR,QAAQ,CAChD,GAAM,CAAA,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAC5C,GAAM,CAAA,GAAG,CAAG,QAAQ,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CACxE,MAAO,CAAA,UAAU,CAAC,IAAI,GAAK,GAAG,CAAC,IAAI,CACrC,CAEA,MAAM,SAAU,CAAA,YAAY,CAAC,IAAY,CAAsC,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAnC,QAAQ,CAAA,KAAA,CAAR,QAAQ,CAClD,GAAM,CAAA,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAC5C,GAAM,CAAA,GAAG,CAAG,QAAQ,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CACxE,GAAM,CAAA,IAAI,CAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,MAAM,CAAC,CACvE,MAAO,CAAA,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC,EAAI,IAAI,CAAC,IAAI,CAAG,CAAC,CACxC,CAIA,MAAM,SAAU,CAAA,SAAS,CACvB,IAAY,CAC8D,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAzE,QAAQ,CAAA,KAAA,CAAR,QAAQ,CAAE,YAAY,CAAA,KAAA,CAAZ,YAAY,CAEvB,GAAI,CAAA,UAAU,CACd,GAAI,CACF,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAO,KAAU,CAAE,CACnB,KAAM,IAAI,CAAA,KAAK,CAAC,cAAc,KAAK,CAAC,OAAO,EAAE,CAAC,CAChD,CACA,GAAI,UAAU,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CAChC,MAAO,UAAU,CACnB,CAAC,IAAM,IAAI,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CACpC,GAAI,YAAY,CAAE,CAChB,MAAO,OAAO,CAChB,CAAC,IAAM,CACL,MAAO,CAAA,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CACtC,CACF,CAAC,IAAM,IAAI,WAAW,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CACxC,MAAO,WAAW,CACpB,CAAC,IAAM,IAAI,YAAY,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CAEzC,MAAO,CAAA,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CACpC,CAAC,IAAM,IAAI,UAAU,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CAEvC,MAAO,CAAA,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CACrC,CAAC,IAAM,CAEL,MAAO,CAAA,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,CAC3C,CACF,CAIA,MAAM,SAAU,CAAA,gBAAgB,CAC9B,IAAY,CACqE,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAhF,QAAQ,CAAA,KAAA,CAAR,QAAQ,CAAA,kBAAA,CAAA,KAAA,CAAE,YAAY,CAAZ,YAAY,CAAA,kBAAA,UAAG,IAAI,CAAA,kBAAA,CAE9B,GAAI,CAAA,UAAU,CACd,GAAI,CACF,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAO,KAAU,CAAE,CACnB,KAAM,IAAI,CAAA,KAAK,CAAC,qBAAqB,KAAK,CAAC,OAAO,EAAE,CAAC,CACvD,CAEA,GAAI,CAAA,IAAI,CAAG,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CACxC,GAAI,YAAY,CAAE,CAChB,IAAI,EAAI,IAAI,UAAU,CAAC,eAAe,EAAE,CAC1C,CACA,GAAI,UAAU,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CAChC,MAAO,YAAY,IAAI,EAAE,CAC3B,CAAC,IAAM,IAAI,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CACpC,MAAO,CAAA,IAAI,CACb,CAAC,IAAM,IAAI,WAAW,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CACxC,MAAO,aAAa,IAAI,EAAE,CAC5B,CAAC,IAAM,IAAI,YAAY,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CAEzC,MAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CACjD,CAAC,IAAM,IAAI,UAAU,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CAAE,CAEvC,MAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAClD,CAAC,IAAM,CAEL,MAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,EAAE,CACxD,CACF,CAGA,MAAO,IAAM,CAAA,SAAS,CAAG,QAAZ,CAAA,SAAS,CACpB,IAAa,CAcH,KAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IADN,CAAA,CAAE,CAXJ,QAAQ,CAAA,KAAA,CAAR,QAAQ,CACR,YAAY,CAAA,KAAA,CAAZ,YAAY,CACZ,UAAU,CAAA,KAAA,CAAV,UAAU,CACV,YAAY,CAAA,KAAA,CAAZ,YAAY,CAUd,GAAI,CAAC,IAAI,CAAE,CACT,MAAO,CAAA,YAAY,GAAA,IAAA,EAAZ,YAAY,GAAA,IAAA,EAAA,CAAZ,YAAY,CAAI,cAAc,CACvC,CACA,GAAI,YAAY,CAAE,CAChB,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAC7D,CAEA,GAAI,CAAA,UAAU,CACd,GAAI,CACF,UAAU,CAAG,OAAO,CAAC,IAAK,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CACzC,CAAE,MAAO,KAAU,CAAE,CACnB,KAAM,IAAI,CAAA,KAAK,CAAC,cAAc,KAAK,CAAC,OAAO,EAAE,CAAC,CAChD,CAEA,GAAI,UAAU,CAAE,CACd,GAAI,CAAC,IAAI,CAAE,CACT,KAAM,IAAI,CAAA,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,GAAM,CAAA,QAAQ,CAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAEvC,MAAO,CAAA,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CACrD,CAEA,MAAO,CAAA,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CACvD,CAAC,CAID,MAAO,IAAM,CAAA,aAAa,CAAG,QAAhB,CAAA,aAAa,CACxB,IAAa,CAMH,KAAA,MAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IADN,CAAA,CAAE,CAHJ,YAAY,CAAA,MAAA,CAAZ,YAAY,CAKd,GAAI,CAAC,IAAI,CAAE,CACT,MAAO,CAAA,YAAY,GAAA,IAAA,EAAZ,YAAY,GAAA,IAAA,EAAA,CAAZ,YAAY,CAAI,cAAc,CACvC,CAEA,GAAI,EAAC,IAAI,GAAA,IAAA,EAAJ,IAAI,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAJ,IAAI,CAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAA,CAAE,CACrC,OAAO,CAAC,IAAI,CACV,0DAA0D,CACxD,qCAAqC,CACxC,CACH,CAEA,GAAM,CAAA,QAAQ,CAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAE,CAAC,IAAI,CAAE,KAAK,CAAC,CAAC,CAEtD,MAAO,CAAA,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CACtC,CAAC,CAGD,MAAM,SAAU,CAAA,SAAS,CACvB,IAAa,CASmD,KAAA,MAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAA5D,CAAC,QAAQ,CAAE,kBAAkB,CAAE,YAAY,CAAE,cAAc,CAAC,CAP9D,QAAQ,CAAA,MAAA,CAAR,QAAQ,CACR,YAAY,CAAA,MAAA,CAAZ,YAAY,CACZ,YAAY,CAAA,MAAA,CAAZ,YAAY,CAOd,GAAI,CAAC,IAAI,CAAE,CACT,MAAO,CAAA,YAAY,GAAA,IAAA,EAAZ,YAAY,GAAA,IAAA,EAAA,CAAZ,YAAY,CAAI,cAAc,CACvC,CACA,GAAI,CAAA,UAAU,CACd,GAAI,CAAC,QAAQ,CAAE,CACb,KAAM,IAAI,CAAA,KAAK,CAAC,iCAAiC,CAAC,CACpD,CACA,GAAI,CACF,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAO,KAAU,CAAE,CACnB,KAAM,IAAI,CAAA,KAAK,CAAC,cAAc,KAAK,CAAC,OAAO,EAAE,CAAC,CAChD,CACA,GAAI,YAAY,CAAE,CAChB,MAAO,CAAA,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,CAC3C,CAAC,IAAM,CACL,MAAO,CAAA,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CACxD,CACF,CAGA,MAAM,SAAU,CAAA,gBAAgB,CAC9B,IAAa,CASP,KAAA,MAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAPJ,QAAQ,CAAA,MAAA,CAAR,QAAQ,CACR,YAAY,CAAA,MAAA,CAAZ,YAAY,CACZ,YAAY,CAAA,MAAA,CAAZ,YAAY,CAOd,GAAI,CAAC,IAAI,CAAE,CACT,MAAO,CAAA,YAAY,GAAA,IAAA,EAAZ,YAAY,GAAA,IAAA,EAAA,CAAZ,YAAY,CAAI,kBAAkB,CAC3C,CACA,GAAI,CAAA,UAAU,CACd,GAAI,CACF,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAO,KAAU,CAAE,CACnB,KAAM,IAAI,CAAA,KAAK,CAAC,qBAAqB,KAAK,CAAC,OAAO,EAAE,CAAC,CACvD,CACA,GAAI,CAAA,UAAU,CAAG,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc,CAAC,CACnE,GAAI,YAAY,CAAE,CAChB,UAAU,EAAI,IAAI,UAAU,CAAC,eAAe,EAAE,CAChD,CACA,MAAO,CAAA,UAAU,CACnB,CAKA,MAAM,SAAU,CAAA,cAAc,CAC5B,KAAa,CACb,GAAW,CAAA,MAAA,CACgE,IAA1E,CAAA,QAAQ,CAAA,MAAA,CAAR,QAAQ,CAAA,mBAAA,CAAA,MAAA,CAAE,YAAY,CAAZ,YAAY,CAAA,mBAAA,UAAG,IAAI,CAAA,mBAAA,CAE9B,GAAM,CAAA,SAAS,CAAG,SAAS,CAAC,KAAK,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAE,YAAY,CAAE,KAAK,CAAC,CAAC,CACnE,GAAM,CAAA,OAAO,CAAG,SAAS,CAAC,GAAG,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAE,YAAY,CAAE,KAAK,CAAC,CAAC,CAE/D,GAAM,CAAA,SAAS,CAAG,SAAS,CAAC,KAAK,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAE,YAAY,CAAE,KAAK,CAAC,CAAC,CACnE,GAAM,CAAA,OAAO,CAAG,SAAS,CAAC,GAAG,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAE,YAAY,CAAZ,YAAY,CAAC,CAAC,CACxD,GAAI,SAAS,GAAK,OAAO,CAAE,CACzB,MAAO,GAAG,SAAS,IAAI,SAAS,MAAM,OAAO,EAAE,CACjD,CAAC,IAAM,CACL,MAAO,GAAG,SAAS,IAAI,SAAS,MAAM,OAAO,IAAI,OAAO,EAAE,CAC5D,CACF,CAIA,MAAM,SAAU,CAAA,UAAU,CACxB,IAAY,CAC2D,KAAA,MAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAF,CAAA,CAAE,CAAtE,QAAQ,CAAA,MAAA,CAAR,QAAQ,CAAA,cAAA,CAAA,MAAA,CAAE,OAAO,CAAP,OAAO,CAAA,cAAA,UAAG,IAAI,CAAA,cAAA,CAEzB,GAAI,CAAA,UAAU,CACd,GAAM,CAAA,GAAG,CAAG,OAAO,CAAG,MAAM,CAAG,EAAE,CACjC,GAAI,CACF,UAAU,CAAG,OAAO,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAR,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAO,KAAU,CAAE,CACnB,KAAM,IAAI,CAAA,KAAK,CAAC,eAAe,KAAK,CAAC,OAAO,EAAE,CAAC,CACjD,CACA,GAAM,CAAA,GAAG,CAAG,QAAQ,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAC,GAAG,CAAA,CAAE,CACxE,GAAM,CAAA,IAAI,CAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAE,QAAQ,CAAC,CAC3C,GAAI,IAAI,CAAC,MAAM,CAAG,CAAC,CAAE,CACnB,GAAM,CAAA,IAAI,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAE,MAAM,CAAC,CAAC,IAAI,CAAC,CAC1D,MAAO,GAAG,IAAI,IAAI,IAAI,GAAK,CAAC,CAAG,KAAK,CAAG,MAAM,GAAG,GAAG,EAAE,CACvD,CAAC,IAAM,IAAI,IAAI,CAAC,MAAM,CAAG,EAAE,CAAE,CAC3B,GAAM,CAAA,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CACtC,MAAO,GAAG,MAAM,IAAI,MAAM,GAAK,CAAC,CAAG,OAAO,CAAG,QAAQ,GAAG,GAAG,EAAE,CAC/D,CAAC,IAAM,CACL,GAAM,CAAA,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAE,OAAO,CAAC,CAAC,KAAK,CAAC,CAC7D,MAAO,GAAG,KAAK,IAAI,KAAK,GAAK,CAAC,CAAG,MAAM,CAAG,OAAO,GAAG,GAAG,EAAE,CAC3D,CACF","sourceRoot":"","sourcesContent":["import { DateTime } from \"luxon\";\nfunction getDate(date, { timezone } = {}) {\n    if (!date) {\n        throw new Error(\"Passed undefined\");\n    }\n    if (typeof date !== \"string\") {\n        throw new Error(`Invalid date type: ${typeof date}`);\n    }\n    const clonedDate = timezone ? DateTime.fromISO(date).setZone(timezone) : DateTime.fromISO(date);\n    if (!clonedDate.isValid) {\n        throw new Error(`Invalid date: ${date}`);\n    }\n    return clonedDate;\n}\nexport function isTomorrow(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days <= -1 && diff.days > -2;\n}\nexport function isYesterday(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days <= 1 && diff.days > -1;\n}\nexport function isToday(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days === 0;\n}\nexport function isThisYear(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    return clonedDate.year === now.year;\n}\nexport function isWithinWeek(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days > -7 && diff.days < 7;\n}\n// Prints a human friendly date, e.g. \"Tomorrow\", \"Yesterday\", \"Monday\", \"June 19\", \"December 25,\n// 2022\".\nexport function humanDate(date, { timezone, dontShowTime } = {}) {\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`humanDate: ${error.message}`);\n    }\n    if (isTomorrow(date, { timezone })) {\n        return \"Tomorrow\";\n    }\n    else if (isToday(date, { timezone })) {\n        if (dontShowTime) {\n            return \"Today\";\n        }\n        else {\n            return clonedDate.toFormat(\"h:mm a\");\n        }\n    }\n    else if (isYesterday(date, { timezone })) {\n        return \"Yesterday\";\n    }\n    else if (isWithinWeek(date, { timezone })) {\n        // E.g. Monday\n        return clonedDate.toFormat(\"EEEE\");\n    }\n    else if (isThisYear(date, { timezone })) {\n        // E.g. June 19\n        return clonedDate.toFormat(\"MMM d\");\n    }\n    else {\n        // December 25, 2022\n        return clonedDate.toFormat(\"MMM d, iiii\");\n    }\n}\n// Prints a human friendly date and time, e.g. \"Tomorrow 9:00 AM\", \"Yesterday 9:00 AM\", \"Monday\n// 9:00 AM\", \"June 19 9:00 AM\", \"December 25, 2022 9:00 AM\".\nexport function humanDateAndTime(date, { timezone, showTimezone = true } = {}) {\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`humanDateAndTime: ${error.message}`);\n    }\n    // This should maybe use printTime()\n    let time = clonedDate.toFormat(\"h:mm a\");\n    if (showTimezone) {\n        time += ` ${clonedDate.offsetNameShort}`;\n    }\n    if (isTomorrow(date, { timezone })) {\n        return `Tomorrow ${time}`;\n    }\n    else if (isToday(date, { timezone })) {\n        return time;\n    }\n    else if (isYesterday(date, { timezone })) {\n        return `Yesterday ${time}`;\n    }\n    else if (isWithinWeek(date, { timezone })) {\n        // E.g. Monday 9:00 AM\n        return `${clonedDate.toFormat(\"EEEE\")} ${time}`;\n    }\n    else if (isThisYear(date, { timezone })) {\n        // E.g. June 19\n        return `${clonedDate.toFormat(\"MMM d\")} ${time}`;\n    }\n    else {\n        // December 25, 2022\n        return `${clonedDate.toFormat(\"MMM d, iiii\")} ${time}`;\n    }\n}\n// Print date in the format of M/D/YY, taking timezones into account.\nexport const printDate = (date, { timezone, showTimezone, ignoreTime, defaultValue, } = {}) => {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n    }\n    if (showTimezone) {\n        console.warn(\"showTimezone is not supported for printDate\");\n    }\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printDate: ${error.message}`);\n    }\n    if (ignoreTime) {\n        if (!date) {\n            throw new Error(\"printDate: Passed undefined\");\n        }\n        // Use only the date component, ignore the time.\n        const justDate = DateTime.fromISO(date);\n        // We force it into UTC so we can get the correct date.\n        return justDate.setZone(\"UTC\").toFormat(\"M/d/yyyy\");\n    }\n    return clonedDate.toLocaleString(DateTime.DATE_SHORT);\n};\n// For printing dates from date times, ignoring the time. These should end in T00:00:00.000Z.\n// For example, the dates returned by Field type=\"date\".\nexport const printOnlyDate = (date, { defaultValue, } = {}) => {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n    }\n    if (!(date === null || date === void 0 ? void 0 : date.endsWith(\"T00:00:00.000Z\"))) {\n        console.warn(\"printOnlyDate, but the time is not set to midnight UTC. \" +\n            \"This may cause unexpected behavior.\");\n    }\n    // Use only the date component, ignore the time.\n    const justDate = DateTime.fromISO(date, { zone: \"UTC\" });\n    // We force it into UTC so we can get the correct date.\n    return justDate.toFormat(\"M/d/yyyy\");\n};\n// Print time in the format of HH:mm A, taking timezones into account.\nexport function printTime(date, { timezone, showTimezone, defaultValue, } = { timezone: \"America/New_York\", defaultValue: \"Invalid Date\" }) {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n    }\n    let clonedDate;\n    if (!timezone) {\n        throw new Error(\"printTime: timezone is required\");\n    }\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printTime: ${error.message}`);\n    }\n    if (showTimezone) {\n        return clonedDate.toFormat(\"h:mm a ZZZZ\");\n    }\n    else {\n        return clonedDate.toLocaleString(DateTime.TIME_SIMPLE);\n    }\n}\n// Print date in the format of M/D/YY HH:mm A, taking timezones into account.\nexport function printDateAndTime(date, { timezone, showTimezone, defaultValue, } = {}) {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Datetime\";\n    }\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printDateAndTime: ${error.message}`);\n    }\n    let dateString = clonedDate.toLocaleString(DateTime.DATETIME_SHORT);\n    if (showTimezone) {\n        dateString += ` ${clonedDate.offsetNameShort}`;\n    }\n    return dateString;\n}\n// Prints a date range in the format of M/D/YY HH:mm A - M/D/YY HH:mm A EST, taking timezones into\n// account. If the dates are the same, it will print the date only once, e.g. M/D/YY HH:mm A - HH:mm\n// A EST.\nexport function printDateRange(start, end, { timezone, showTimezone = true }) {\n    const startDate = printDate(start, { timezone, showTimezone: false });\n    const endDate = printDate(end, { timezone, showTimezone: false });\n    const startTime = printTime(start, { timezone, showTimezone: false });\n    const endTime = printTime(end, { timezone, showTimezone });\n    if (startDate === endDate) {\n        return `${startDate} ${startTime} - ${endTime}`;\n    }\n    else {\n        return `${startDate} ${startTime} - ${endDate} ${endTime}`;\n    }\n}\n// Print since nicely. If less than 2 months, print days, otherwise print months. If over 1 year,\n// print years.\nexport function printSince(date, { timezone, showAgo = true } = {}) {\n    let clonedDate;\n    const ago = showAgo ? \" ago\" : \"\";\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printSince: ${error.message}`);\n    }\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.diff(clonedDate, \"months\");\n    if (diff.months < 2) {\n        const days = Math.floor(now.diff(clonedDate, \"days\").days);\n        return `${days} ${days === 1 ? \"day\" : \"days\"}${ago}`;\n    }\n    else if (diff.months < 12) {\n        const months = Math.floor(diff.months);\n        return `${months} ${months === 1 ? \"month\" : \"months\"}${ago}`;\n    }\n    else {\n        const years = Math.floor(now.diff(clonedDate, \"years\").years);\n        return `${years} ${years === 1 ? \"year\" : \"years\"}${ago}`;\n    }\n}\n//# sourceMappingURL=DateUtilities.js.map"]},"metadata":{},"sourceType":"module"}