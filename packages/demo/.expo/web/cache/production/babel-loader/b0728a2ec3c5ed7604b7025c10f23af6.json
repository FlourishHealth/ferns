{"ast":null,"code":"'use strict';import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";export function convertAnimationObjectToKeyframes(animationObject){var keyframe=`@keyframes ${animationObject.name} { `;for(var _ref of Object.entries(animationObject.style)){var _ref2=_slicedToArray(_ref,2);var timestamp=_ref2[0];var style=_ref2[1];keyframe+=`${timestamp}% { `;for(var _ref3 of Object.entries(style)){var _ref4=_slicedToArray(_ref3,2);var property=_ref4[0];var values=_ref4[1];if(property!=='transform'){keyframe+=`${property}: ${values}; `;continue;}keyframe+=`transform:`;values.forEach(function(value){for(var _ref5 of Object.entries(value)){var _ref6=_slicedToArray(_ref5,2);var transformProperty=_ref6[0];var transformPropertyValue=_ref6[1];keyframe+=` ${transformProperty}(${transformPropertyValue})`;}});keyframe+=`; `;}keyframe+=`} `;}keyframe+=`} `;return keyframe;}export function convertTransformToString(transform){if(!transform){return'';}var transformString='';transform.forEach(function(transformObject){for(var _ref7 of Object.entries(transformObject)){var _ref8=_slicedToArray(_ref7,2);var key=_ref8[0];var value=_ref8[1];if(key==='reversed'){continue;}if(key.indexOf('translate')<0){transformString+=`${key}(${value}) `;}else{transformString+=`${key}(${value}px) `;}}});return transformString;}","map":{"version":3,"sources":["animationParser.ts"],"names":["convertAnimationObjectToKeyframes","animationObject","keyframe","name","timestamp","style","Object","entries","property","values","forEach","value","transformProperty","transformPropertyValue","convertTransformToString","transform","transformString","transformObject","key","indexOf"],"mappings":"AAAA,YAAY,CAAA,OAAA,cAAA,4CAqCZ,MAAO,SAASA,CAAAA,iCAAiCA,CAC/CC,eAA8B,CAC9B,CACA,GAAIC,CAAAA,QAAQ,CAAI,cAAaD,eAAe,CAACE,IAAK,KAAI,CAEtD,QAAA,IAAA,GAAiCG,CAAAA,MAAM,CAACC,OAAO,CAACN,eAAe,CAACI,KAAK,CAAC,CAAE,KAAA,KAAA,CAAA,cAAA,CAAA,IAAA,OAA5DD,CAAAA,SAAS,CAAA,KAAA,OAAEC,CAAAA,KAAK,CAAA,KAAA,IAC1BH,QAAQ,EAAK,GAAEE,SAAU,MAAK,CAE9B,QAAA,KAAA,GAAiCE,CAAAA,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,CAAE,KAAA,KAAA,CAAA,cAAA,CAAA,KAAA,OAA5CG,CAAAA,QAAQ,CAAA,KAAA,OAAEC,CAAAA,MAAM,CAAA,KAAA,IAC1B,GAAID,QAAQ,GAAK,WAAW,CAAE,CAC5BN,QAAQ,EAAK,GAAEM,QAAS,KAAIC,MAAO,IAAG,CACtC,SACF,CAEAP,QAAQ,EAAK,YAAW,CAExBO,MAAM,CAACC,OAAO,CAAEC,SAAAA,KAAuC,CAAK,CAC1D,QAAA,KAAA,GAGKL,CAAAA,MAAM,CAACC,OAAO,CAACI,KAAK,CAAC,CAAE,KAAA,KAAA,CAAA,cAAA,CAAA,KAAA,OAF1BC,CAAAA,iBAAiB,CAAA,KAAA,OACjBC,CAAAA,sBAAsB,CAAA,KAAA,IAEtBX,QAAQ,EAAK,IAAGU,iBAAkB,IAAGC,sBAAuB,GAAE,CAChE,CACF,CAAC,CAAC,CACFX,QAAQ,EAAK,IAAG,CAClB,CACAA,QAAQ,EAAK,IAAG,CAClB,CACAA,QAAQ,EAAK,IAAG,CAEhB,MAAOA,CAAAA,QAAQ,CACjB,CAEA,MAAO,SAASY,CAAAA,wBAAwBA,CACtCC,SAAgE,CAChE,CACA,GAAI,CAACA,SAAS,CAAE,CACd,MAAO,EAAE,CACX,CAIA,GAAIC,CAAAA,eAAe,CAAG,EAAE,CAIxBD,SAAS,CAACL,OAAO,CAAEO,SAAAA,eAAgC,CAAK,CACtD,QAAA,KAAA,GAA2BX,CAAAA,MAAM,CAACC,OAAO,CAACU,eAAe,CAAC,CAAE,KAAA,KAAA,CAAA,cAAA,CAAA,KAAA,OAAhDC,CAAAA,GAAG,CAAA,KAAA,OAAEP,CAAAA,KAAK,CAAA,KAAA,IACpB,GAAIO,GAAG,GAAK,UAAU,CAAE,CACtB,SACF,CAEA,GAAIA,GAAG,CAACC,OAAO,CAAC,WAAW,CAAC,CAAG,CAAC,CAAE,CAChCH,eAAe,EAAK,GAAEE,GAAI,IAAGP,KAAM,IAAG,CACxC,CAAC,IAAM,CACLK,eAAe,EAAK,GAAEE,GAAI,IAAGP,KAAM,MAAK,CAC1C,CACF,CACF,CAAC,CAAC,CAEF,MAAOK,CAAAA,eAAe,CACxB","sourcesContent":["'use strict';\n\nimport type { TransformsStyle } from 'react-native';\n\nexport interface ReanimatedWebTransformProperties {\n  translateX?: string;\n  translateY?: string;\n  rotate?: string;\n  rotateX?: string;\n  rotateY?: string;\n  scale?: number | string;\n  scaleX?: number;\n  scaleY?: number;\n  perspective?: string;\n  skew?: string;\n  skewX?: string;\n}\n\ninterface AnimationStyle {\n  opacity?: number;\n  transform?: ReanimatedWebTransformProperties[];\n}\n\nexport interface AnimationData {\n  name: string;\n  style: Record<number, AnimationStyle>;\n  duration: number;\n}\n\nexport interface TransitionData {\n  translateX: number;\n  translateY: number;\n  scaleX: number;\n  scaleY: number;\n  reversed?: boolean;\n}\n\nexport function convertAnimationObjectToKeyframes(\n  animationObject: AnimationData\n) {\n  let keyframe = `@keyframes ${animationObject.name} { `;\n\n  for (const [timestamp, style] of Object.entries(animationObject.style)) {\n    keyframe += `${timestamp}% { `;\n\n    for (const [property, values] of Object.entries(style)) {\n      if (property !== 'transform') {\n        keyframe += `${property}: ${values}; `;\n        continue;\n      }\n\n      keyframe += `transform:`;\n\n      values.forEach((value: ReanimatedWebTransformProperties) => {\n        for (const [\n          transformProperty,\n          transformPropertyValue,\n        ] of Object.entries(value)) {\n          keyframe += ` ${transformProperty}(${transformPropertyValue})`;\n        }\n      });\n      keyframe += `; `; // Property end\n    }\n    keyframe += `} `; // Timestamp end\n  }\n  keyframe += `} `; // Keyframe end\n\n  return keyframe;\n}\n\nexport function convertTransformToString(\n  transform: NonNullable<TransformsStyle['transform']> | undefined\n) {\n  if (!transform) {\n    return '';\n  }\n\n  type RNTransformProp = (typeof transform)[number];\n\n  let transformString = '';\n\n  // @ts-ignore `transform` cannot be string because in that case\n  // we throw error in `extractTransformFromStyle`\n  transform.forEach((transformObject: RNTransformProp) => {\n    for (const [key, value] of Object.entries(transformObject)) {\n      if (key === 'reversed') {\n        continue;\n      }\n\n      if (key.indexOf('translate') < 0) {\n        transformString += `${key}(${value}) `;\n      } else {\n        transformString += `${key}(${value}px) `;\n      }\n    }\n  });\n\n  return transformString;\n}\n"]},"metadata":{},"sourceType":"module"}