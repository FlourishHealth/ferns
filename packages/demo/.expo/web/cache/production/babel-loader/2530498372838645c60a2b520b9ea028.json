{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{EventTypes,PointerType}from'../interfaces';import EventManager from'./EventManager';import{isPointerInBounds}from'../utils';var POINTER_CAPTURE_EXCLUDE_LIST=new Set(['SELECT','INPUT']);var PointerEventManager=function(_EventManager){_inherits(PointerEventManager,_EventManager);var _super=_createSuper(PointerEventManager);function PointerEventManager(){var _this;_classCallCheck(this,PointerEventManager);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"trackedPointers\",new Set());return _this;}_createClass(PointerEventManager,[{key:\"setListeners\",value:function setListeners(){var _this2=this;this.view.addEventListener('pointerdown',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(!isPointerInBounds(_this2.view,{x:event.clientX,y:event.clientY})){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.DOWN);var target=event.target;if(!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)){target.setPointerCapture(adaptedEvent.pointerId);}_this2.markAsInBounds(adaptedEvent.pointerId);_this2.trackedPointers.add(adaptedEvent.pointerId);if(++_this2.activePointersCounter>1){adaptedEvent.eventType=EventTypes.ADDITIONAL_POINTER_DOWN;_this2.onPointerAdd(adaptedEvent);}else{_this2.onPointerDown(adaptedEvent);}});this.view.addEventListener('pointerup',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(_this2.activePointersCounter===0){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.UP);var target=event.target;if(!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)){target.releasePointerCapture(adaptedEvent.pointerId);}_this2.markAsOutOfBounds(adaptedEvent.pointerId);_this2.trackedPointers.delete(adaptedEvent.pointerId);if(--_this2.activePointersCounter>0){adaptedEvent.eventType=EventTypes.ADDITIONAL_POINTER_UP;_this2.onPointerRemove(adaptedEvent);}else{_this2.onPointerUp(adaptedEvent);}});this.view.addEventListener('pointermove',function(event){if(event.pointerType===PointerType.TOUCH){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.MOVE);var target=event.target;if(!target.hasPointerCapture(event.pointerId)&&!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)){target.setPointerCapture(event.pointerId);}var inBounds=isPointerInBounds(_this2.view,{x:adaptedEvent.x,y:adaptedEvent.y});var pointerIndex=_this2.pointersInBounds.indexOf(adaptedEvent.pointerId);if(inBounds){if(pointerIndex<0){adaptedEvent.eventType=EventTypes.ENTER;_this2.onPointerEnter(adaptedEvent);_this2.markAsInBounds(adaptedEvent.pointerId);}else{_this2.onPointerMove(adaptedEvent);}}else{if(pointerIndex>=0){adaptedEvent.eventType=EventTypes.LEAVE;_this2.onPointerLeave(adaptedEvent);_this2.markAsOutOfBounds(adaptedEvent.pointerId);}else{_this2.onPointerOutOfBounds(adaptedEvent);}}});this.view.addEventListener('pointercancel',function(event){if(event.pointerType===PointerType.TOUCH){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.CANCEL);_this2.onPointerCancel(adaptedEvent);_this2.markAsOutOfBounds(adaptedEvent.pointerId);_this2.activePointersCounter=0;_this2.trackedPointers.clear();});this.view.addEventListener('pointerenter',function(event){if(event.pointerType===PointerType.TOUCH){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.ENTER);_this2.onPointerMoveOver(adaptedEvent);});this.view.addEventListener('pointerleave',function(event){if(event.pointerType===PointerType.TOUCH){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.LEAVE);_this2.onPointerMoveOut(adaptedEvent);});this.view.addEventListener('lostpointercapture',function(event){var adaptedEvent=_this2.mapEvent(event,EventTypes.CANCEL);if(_this2.trackedPointers.has(adaptedEvent.pointerId)){_this2.onPointerCancel(adaptedEvent);_this2.activePointersCounter=0;_this2.trackedPointers.clear();}});}},{key:\"mapEvent\",value:function mapEvent(event,eventType){return{x:event.clientX,y:event.clientY,offsetX:event.offsetX,offsetY:event.offsetY,pointerId:event.pointerId,eventType:eventType,pointerType:event.pointerType,buttons:event.buttons,time:event.timeStamp};}},{key:\"resetManager\",value:function resetManager(){_get(_getPrototypeOf(PointerEventManager.prototype),\"resetManager\",this).call(this);this.trackedPointers.clear();}}]);return PointerEventManager;}(EventManager);export{PointerEventManager as default};","map":{"version":3,"sources":["PointerEventManager.ts"],"names":["EventTypes","PointerType","EventManager","isPointerInBounds","POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerEventManager","setListeners","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","offsetX","offsetY","buttons","time","timeStamp","resetManager"],"mappings":"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","sourcesContent":["import { AdaptedEvent, EventTypes, PointerType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const target = event.target as HTMLElement;\n\n      // You may be wondering why are we setting pointer capture here, when we\n      // already set it in `pointerdown` handler. Well, that's a great question,\n      // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n      // says that the requirement for `setPointerCapture` to work is that pointer\n      // must be in 'active buttons state`, otherwise it will fail silently, which\n      // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n      // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n      // will succeed, for some reason. Since it fails silently, we don't actually know\n      // if it worked or not (there's `gotpointercapture` event, but the complexity of\n      // incorporating it here seems stupid), so we just call it again here, every time\n      // pointer moves until it succeeds.\n      // God, I do love web development.\n      if (\n        !target.hasPointerCapture(event.pointerId) &&\n        !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n      ) {\n        target.setPointerCapture(event.pointerId);\n      }\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n\n    this.view.addEventListener('pointerenter', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n      this.onPointerMoveOver(adaptedEvent);\n    });\n\n    this.view.addEventListener('pointerleave', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n      this.onPointerMoveOut(adaptedEvent);\n    });\n\n    this.view.addEventListener(\n      'lostpointercapture',\n      (event: PointerEvent): void => {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL\n        );\n\n        if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n          // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n          // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n          this.onPointerCancel(adaptedEvent);\n\n          this.activePointersCounter = 0;\n          this.trackedPointers.clear();\n        }\n      }\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}