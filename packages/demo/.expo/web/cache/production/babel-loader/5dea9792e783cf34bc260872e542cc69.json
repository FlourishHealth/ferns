{"ast":null,"code":"import'../Expo.fx';import AppRegistry from\"react-native-web/dist/exports/AppRegistry\";import Platform from\"react-native-web/dist/exports/Platform\";export default function registerRootComponent(component){var qualifiedComponent=component;if(\"production\"!=='production'){var _require=require('./withDevTools'),withDevTools=_require.withDevTools;qualifiedComponent=withDevTools(component);}AppRegistry.registerComponent('main',function(){return qualifiedComponent;});if(\"web\"==='web'){if(typeof document!=='undefined'){var rootTag=document.getElementById('root');if(\"production\"!=='production'){if(!rootTag){throw new Error('Required HTML element with id \"root\" was not found in the document HTML.');}}AppRegistry.runApplication('main',{rootTag:rootTag,hydrate:process.env.EXPO_PUBLIC_USE_STATIC==='1'});}}}","map":{"version":3,"sources":["../../src/launch/registerRootComponent.tsx"],"names":[],"mappings":"AAAA,MAAO,YAAY,CAAC,OAAA,WAAA,wDAAA,QAAA,8CAgBpB,cAAc,SAAU,CAAA,qBAAqB,CAC3C,SAAiC,CAAA,CAEjC,GAAI,CAAA,kBAAkB,CAAG,SAAS,CAElC,GAAI,eAAyB,YAAY,CAAE,CACzC,IAAA,QAAA,CAAyB,OAAO,CAAC,gBAAgB,CAAoC,CAA7E,YAAY,CAAA,QAAA,CAAZ,YAAY,CACpB,kBAAkB,CAAG,YAAY,CAAC,SAAS,CAAC,CAC7C,CAED,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAE,iBAAM,CAAA,kBAAkB,GAAC,CAC/D,GAAI,QAAgB,KAAK,CAAE,CAEzB,GAEE,MAAO,CAAA,QAAQ,GAAK,WAAW,CAC/B,CACA,GAAM,CAAA,OAAO,CAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAC/C,GAAI,eAAyB,YAAY,CAAE,CACzC,GAAI,CAAC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAA,KAAK,CACb,0EAA0E,CAC3E,CACF,CACF,CACD,WAAW,CAAC,cAAc,CAAC,MAAM,CAAE,CACjC,OAAO,CAAP,OAAO,CACP,OAAO,CAAE,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAK,G,CACjD,CAAC,CACH,CACF,CACH","sourcesContent":["import '../Expo.fx';\n\nimport * as React from 'react';\nimport { AppRegistry, Platform } from 'react-native';\n\ntype InitialProps = {\n  exp?: {\n    notification?: any;\n    manifestString?: string;\n    [key: string]: any;\n  };\n  shell?: boolean;\n  shellManifestUrl?: string;\n  [key: string]: any;\n};\n\nexport default function registerRootComponent<P extends InitialProps>(\n  component: React.ComponentType<P>\n): void {\n  let qualifiedComponent = component;\n\n  if (process.env.NODE_ENV !== 'production') {\n    const { withDevTools } = require('./withDevTools') as typeof import('./withDevTools');\n    qualifiedComponent = withDevTools(component);\n  }\n\n  AppRegistry.registerComponent('main', () => qualifiedComponent);\n  if (Platform.OS === 'web') {\n    // Use two if statements for better dead code elimination.\n    if (\n      // Skip querying the DOM if we're in a Node.js environment.\n      typeof document !== 'undefined'\n    ) {\n      const rootTag = document.getElementById('root');\n      if (process.env.NODE_ENV !== 'production') {\n        if (!rootTag) {\n          throw new Error(\n            'Required HTML element with id \"root\" was not found in the document HTML.'\n          );\n        }\n      }\n      AppRegistry.runApplication('main', {\n        rootTag,\n        hydrate: process.env.EXPO_PUBLIC_USE_STATIC === '1',\n      });\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}