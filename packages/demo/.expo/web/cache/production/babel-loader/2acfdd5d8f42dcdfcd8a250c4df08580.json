{"ast":null,"code":"import isArray from\"lodash/isArray\";import React from\"react\";import DatePicker from\"react-date-picker\";import DateTimePickerWeb from\"react-datetime-picker\";import TimePicker from\"react-time-picker\";import{Box}from\"./Box\";import{WithLabel}from\"./WithLabel\";export var DateTimeField=function DateTimeField(_ref){var mode=_ref.mode,value=_ref.value,_onChange=_ref.onChange,errorMessage=_ref.errorMessage,errorMessageColor=_ref.errorMessageColor;return React.createElement(WithLabel,{label:errorMessage,labelColor:errorMessageColor||\"red\",labelPlacement:\"after\",labelSize:\"sm\"},React.createElement(Box,{flex:\"grow\",maxWidth:300,zIndex:\"auto\"},mode===\"datetime\"&&(React.createElement(DateTimePickerWeb,{disableClock:true,value:value,onChange:function onChange(newVal){if(isArray(newVal)||!newVal){console.warn(\"DateTimePicker returned an array\",newVal);return;}_onChange(newVal);}})),mode===\"date\"&&(React.createElement(DatePicker,{value:value,onChange:function onChange(newVal){if(isArray(newVal)||!newVal){console.warn(\"DatePicker returned an array\",newVal);return;}_onChange(newVal);}})),mode===\"time\"&&(React.createElement(TimePicker,{disableClock:true,value:value,onChange:function onChange(newVal){if(isArray(newVal)||!newVal){console.warn(\"TimePicker returned an array\",newVal);return;}var newDate=new Date(newVal);_onChange(newDate);}}))));};","map":{"version":3,"sources":["../src/DateTimeField.tsx"],"names":[],"mappings":"AAAA,MAAO,CAAA,OAAO,KAAM,gBAAgB,CACpC,MAAO,CAAA,KAAqB,KAAM,OAAO,CACzC,MAAO,CAAA,UAAU,KAAM,mBAAmB,CAC1C,MAAO,CAAA,iBAAiB,KAAM,uBAAuB,CACrD,MAAO,CAAA,UAAU,KAAM,mBAAmB,CAE1C,OAAQ,GAAG,KAAO,OAAO,CAEzB,OAAQ,SAAS,KAAO,aAAa,CAErC,MAAO,IAAM,CAAA,aAAa,CAAG,QAAhB,CAAA,aAAa,CAAA,IAAA,CAM2B,IALnD,CAAA,IAAI,CAAA,IAAA,CAAJ,IAAI,CACJ,KAAK,CAAA,IAAA,CAAL,KAAK,CACL,SAAQ,CAAA,IAAA,CAAR,QAAQ,CACR,YAAY,CAAA,IAAA,CAAZ,YAAY,CACZ,iBAAiB,CAAA,IAAA,CAAjB,iBAAiB,CAEjB,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,SAAS,CAAA,CACR,KAAK,CAAE,YAAY,CACnB,UAAU,CAAE,iBAAiB,EAAI,KAAK,CACtC,cAAc,CAAC,OAAO,CACtB,SAAS,CAAC,IAAI,CAAA,CAEd,KAAA,CAAA,aAAA,CAAC,GAAG,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,GAAG,CAAE,MAAM,CAAC,MAAM,CAAA,CAC1C,IAAI,GAAK,UAAU,GAClB,KAAA,CAAA,aAAA,CAAC,iBAAiB,CAAA,CAChB,YAAY,CAAA,IAAA,CACZ,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,SAAA,SAAC,MAAM,CAAI,CACnB,GAAI,OAAO,CAAC,MAAM,CAAC,EAAI,CAAC,MAAM,CAAE,CAC9B,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAE,MAAM,CAAC,CACxD,OACF,CACA,SAAQ,CAAC,MAAM,CAAC,CAClB,CAAC,CAAA,CACD,CACH,CACA,IAAI,GAAK,MAAM,GACd,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CACT,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,SAAA,SAAC,MAAM,CAAI,CACnB,GAAI,OAAO,CAAC,MAAM,CAAC,EAAI,CAAC,MAAM,CAAE,CAC9B,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAE,MAAM,CAAC,CACpD,OACF,CACA,SAAQ,CAAC,MAAM,CAAC,CAClB,CAAC,CAAA,CACD,CACH,CACA,IAAI,GAAK,MAAM,GACd,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CACT,YAAY,CAAA,IAAA,CACZ,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,SAAA,SAAC,MAAM,CAAI,CACnB,GAAI,OAAO,CAAC,MAAM,CAAC,EAAI,CAAC,MAAM,CAAE,CAC9B,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAE,MAAM,CAAC,CACpD,OACF,CAEA,GAAM,CAAA,OAAO,CAAG,GAAI,CAAA,IAAI,CAAC,MAAM,CAAC,CAChC,SAAQ,CAAC,OAAO,CAAC,CACnB,CAAC,CAAA,CACD,CACH,CACG,CACI,CAEhB,CAAC","sourceRoot":"","sourcesContent":["import isArray from \"lodash/isArray\";\nimport React from \"react\";\nimport DatePicker from \"react-date-picker\";\nimport DateTimePickerWeb from \"react-datetime-picker\";\nimport TimePicker from \"react-time-picker\";\nimport { Box } from \"./Box\";\nimport { WithLabel } from \"./WithLabel\";\nexport const DateTimeField = ({ mode, value, onChange, errorMessage, errorMessageColor, }) => {\n    return (React.createElement(WithLabel, { label: errorMessage, labelColor: errorMessageColor || \"red\", labelPlacement: \"after\", labelSize: \"sm\" },\n        React.createElement(Box, { flex: \"grow\", maxWidth: 300, zIndex: \"auto\" },\n            mode === \"datetime\" && (React.createElement(DateTimePickerWeb, { disableClock: true, value: value, onChange: (newVal) => {\n                    if (isArray(newVal) || !newVal) {\n                        console.warn(\"DateTimePicker returned an array\", newVal);\n                        return;\n                    }\n                    onChange(newVal);\n                } })),\n            mode === \"date\" && (React.createElement(DatePicker, { value: value, onChange: (newVal) => {\n                    if (isArray(newVal) || !newVal) {\n                        console.warn(\"DatePicker returned an array\", newVal);\n                        return;\n                    }\n                    onChange(newVal);\n                } })),\n            mode === \"time\" && (React.createElement(TimePicker, { disableClock: true, value: value, onChange: (newVal) => {\n                    if (isArray(newVal) || !newVal) {\n                        console.warn(\"TimePicker returned an array\", newVal);\n                        return;\n                    }\n                    // TimePicker returns a string or Date, so we need to make sure it's a Date\n                    const newDate = new Date(newVal);\n                    onChange(newDate);\n                } })))));\n};\n//# sourceMappingURL=DateTimeField.js.map"]},"metadata":{},"sourceType":"module"}