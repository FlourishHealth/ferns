{"ast":null,"code":"import React,{useContext}from\"react\";import NativeText from\"react-native-web/dist/exports/Text\";import{ThemeContext}from\"./Theme\";var fontSizes={sm:20,md:28,lg:36};export var Heading=function Heading(_ref){var align=_ref.align,children=_ref.children,color=_ref.color,size=_ref.size,testID=_ref.testID;var _useContext=useContext(ThemeContext),theme=_useContext.theme;var style={};style.fontFamily=theme.titleFont;style.fontSize=fontSizes[size||\"md\"];if(align){style.textAlign=align;}style.color=theme[color!==null&&color!==void 0?color:\"darkGray\"];var lines=0;return React.createElement(NativeText,{numberOfLines:lines,style:style,testID:testID},children);};","map":{"version":3,"sources":["../src/Heading.tsx"],"names":[],"mappings":"AAAA,MAAO,CAAA,KAAK,EAAG,UAAU,KAAO,OAAO,CAAC,OAAA,UAAA,0CAIxC,OAAQ,YAAY,KAAO,SAAS,CAEpC,GAAM,CAAA,SAAS,CAAG,CAChB,EAAE,CAAE,EAAE,CACN,EAAE,CAAE,EAAE,CACN,EAAE,CAAE,E,CACL,CAED,MAAO,IAAM,CAAA,OAAO,CAAG,QAAV,CAAA,OAAO,CAAA,IAAA,CAMmB,IALrC,CAAA,KAAK,CAAA,IAAA,CAAL,KAAK,CACL,QAAQ,CAAA,IAAA,CAAR,QAAQ,CACR,KAAK,CAAA,IAAA,CAAL,KAAK,CACL,IAAI,CAAA,IAAA,CAAJ,IAAI,CACJ,MAAM,CAAA,IAAA,CAAN,MAAM,CAEN,IAAA,WAAA,CAAgB,UAAU,CAAC,YAAY,CAAC,CAAjC,KAAK,CAAA,WAAA,CAAL,KAAK,CAEZ,GAAM,CAAA,KAAK,CAAyB,CAAA,CAAE,CAEtC,KAAK,CAAC,UAAU,CAAG,KAAK,CAAC,SAAS,CAElC,KAAK,CAAC,QAAQ,CAAG,SAAS,CAAC,IAAI,EAAI,IAAI,CAAC,CACxC,GAAI,KAAK,CAAE,CACT,KAAK,CAAC,SAAS,CAAG,KAAK,CACzB,CACA,KAAK,CAAC,KAAK,CAAG,KAAK,CAAC,KAAK,GAAA,IAAA,EAAL,KAAK,GAAA,IAAA,EAAA,CAAL,KAAK,CAAI,UAAU,CAAC,CAMxC,GAAM,CAAA,KAAK,CAAG,CAAC,CACf,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CAAC,aAAa,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,MAAM,CAAE,MAAM,CAAA,CAC3D,QAAQ,CACE,CAEjB,CAAC","sourceRoot":"","sourcesContent":["import React, { useContext } from \"react\";\nimport { Text as NativeText } from \"react-native\";\nimport { ThemeContext } from \"./Theme\";\nconst fontSizes = {\n    sm: 20,\n    md: 28,\n    lg: 36,\n};\nexport const Heading = ({ align, children, color, size, testID, }) => {\n    const { theme } = useContext(ThemeContext);\n    const style = {};\n    style.fontFamily = theme.titleFont;\n    style.fontSize = fontSizes[size || \"md\"];\n    if (align) {\n        style.textAlign = align;\n    }\n    style.color = theme[color !== null && color !== void 0 ? color : \"darkGray\"];\n    // TODO: might be useful for wrapping/truncating\n    // if (numberOfLines !== 1 && !inline) {\n    //   style.flexWrap = \"wrap\";\n    // }\n    const lines = 0;\n    return (React.createElement(NativeText, { numberOfLines: lines, style: style, testID: testID }, children));\n};\n//# sourceMappingURL=Heading.js.map"]},"metadata":{},"sourceType":"module"}