{"ast":null,"code":"'use strict';import{useEffect,useRef}from'react';import{makeMutable,subscribeForKeyboardEvents,unsubscribeFromKeyboardEvents}from'../core';import{KeyboardState}from'../commonTypes';var _worklet_12775767243512_init_data={code:\"function anonymous(state,height){const{keyboardEventData}=this.__closure;keyboardEventData.state.value=state;keyboardEventData.height.value=height;}\"};var _worklet_4233221673031_init_data={code:\"function anonymous(state,height){const{_keyboardEventData}=this.__closure;_keyboardEventData.state.value=state;_keyboardEventData.height.value=height;}\"};export function useAnimatedKeyboard(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{isStatusBarTranslucentAndroid:false};var ref=useRef(null);var listenerId=useRef(-1);var isSubscribed=useRef(false);if(ref.current===null){var keyboardEventData={state:makeMutable(KeyboardState.UNKNOWN),height:makeMutable(0)};listenerId.current=subscribeForKeyboardEvents(function(){var anonymous=function anonymous(state,height){keyboardEventData.state.value=state;keyboardEventData.height.value=height;};anonymous.__closure={keyboardEventData:keyboardEventData};anonymous.__workletHash=12775767243512;anonymous.__initData=_worklet_12775767243512_init_data;return anonymous;}(),options);ref.current=keyboardEventData;isSubscribed.current=true;}useEffect(function(){if(isSubscribed.current===false&&ref.current!==null){var _keyboardEventData=ref.current;listenerId.current=subscribeForKeyboardEvents(function(){var anonymous=function anonymous(state,height){_keyboardEventData.state.value=state;_keyboardEventData.height.value=height;};anonymous.__closure={_keyboardEventData:_keyboardEventData};anonymous.__workletHash=4233221673031;anonymous.__initData=_worklet_4233221673031_init_data;return anonymous;}(),options);isSubscribed.current=true;}return function(){unsubscribeFromKeyboardEvents(listenerId.current);isSubscribed.current=false;};},[]);return ref.current;}","map":{"version":3,"sources":["useAnimatedKeyboard.ts"],"names":["useEffect","useRef","makeMutable","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","KeyboardState","useAnimatedKeyboard","options","isStatusBarTranslucentAndroid","ref","listenerId","isSubscribed","current","keyboardEventData","state","UNKNOWN","height","value"],"mappings":"AAAA,YAAY,CACZ,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CACzC,OACEC,WAAW,CACXC,0BAA0B,CAC1BC,6BAA6B,KACxB,SAAS,CAKhB,OAASC,aAAa,KAAQ,gBAAgB,CAAA,IAAA,iCAAA,EAAA,IAAA,6JAAA,gCAAA,EAAA,IAAA,4JAS9C,MAAO,SAASC,CAAAA,mBAAmBA,CAAAA,CAEX,CAAA,GADtBC,CAAAA,OAAgC,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAG,CAAEC,6BAA6B,CAAE,KAAM,CAAC,CAE3E,GAAMC,CAAAA,GAAG,CAAGR,MAAM,CAA8B,IAAI,CAAC,CACrD,GAAMS,CAAAA,UAAU,CAAGT,MAAM,CAAS,CAAC,CAAC,CAAC,CACrC,GAAMU,CAAAA,YAAY,CAAGV,MAAM,CAAU,KAAK,CAAC,CAE3C,GAAIQ,GAAG,CAACG,OAAO,GAAK,IAAI,CAAE,CACxB,GAAMC,CAAAA,iBAAuC,CAAG,CAC9CC,KAAK,CAAEZ,WAAW,CAAgBG,aAAa,CAACU,OAAO,CAAC,CACxDC,MAAM,CAAEd,WAAW,CAAC,CAAC,CACvB,CAAC,CACDQ,UAAU,CAACE,OAAO,CAAGT,0BAA0B,CAAC,eAAA,SAAA,UAAA,UAACW,KAAK,CAAEE,MAAM,CAAK,CAEjEH,iBAAiB,CAACC,KAAK,CAACG,KAAK,CAAGH,KAAK,CACrCD,iBAAiB,CAACG,MAAM,CAACC,KAAK,CAAGD,MAAM,CACzC,CAAC,CAAA,SAAA,CAAA,SAAA,EAAA,iBAAA,CAFCH,iBAAiB,EAAA,SAAA,CAAA,aAAA,gBAAA,SAAA,CAAA,UAAA,CAAA,iCAAA,QAAA,SAAA,EAF6B,GAI7CN,OAAO,CAAC,CACXE,GAAG,CAACG,OAAO,CAAGC,iBAAiB,CAC/BF,YAAY,CAACC,OAAO,CAAG,IAAI,CAC7B,CACAZ,SAAS,CAAC,UAAM,CACd,GAAIW,YAAY,CAACC,OAAO,GAAK,KAAK,EAAIH,GAAG,CAACG,OAAO,GAAK,IAAI,CAAE,CAC1D,GAAMC,CAAAA,kBAAiB,CAAGJ,GAAG,CAACG,OAAO,CAErCF,UAAU,CAACE,OAAO,CAAGT,0BAA0B,CAAC,eAAA,SAAA,UAAA,UAACW,KAAK,CAAEE,MAAM,CAAK,CAEjEH,kBAAiB,CAACC,KAAK,CAACG,KAAK,CAAGH,KAAK,CACrCD,kBAAiB,CAACG,MAAM,CAACC,KAAK,CAAGD,MAAM,CACzC,CAAC,CAAA,SAAA,CAAA,SAAA,EAAA,kBAAA,CAFCH,kBAAiB,EAAA,SAAA,CAAA,aAAA,eAAA,SAAA,CAAA,UAAA,CAAA,gCAAA,QAAA,SAAA,EAF6B,GAI7CN,OAAO,CAAC,CACXI,YAAY,CAACC,OAAO,CAAG,IAAI,CAC7B,CACA,MAAO,WAAM,CACXR,6BAA6B,CAACM,UAAU,CAACE,OAAO,CAAC,CACjDD,YAAY,CAACC,OAAO,CAAG,KAAK,CAC9B,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CACN,MAAOH,CAAAA,GAAG,CAACG,OAAO,CACpB","sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport {\n  makeMutable,\n  subscribeForKeyboardEvents,\n  unsubscribeFromKeyboardEvents,\n} from '../core';\nimport type {\n  AnimatedKeyboardInfo,\n  AnimatedKeyboardOptions,\n} from '../commonTypes';\nimport { KeyboardState } from '../commonTypes';\n\n/**\n * Lets you synchronously get the position and state of the keyboard.\n *\n * @param options - An additional keyboard configuration options.\n * @returns An object with the current keyboard `height` and `state` as [shared values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value).\n * @see https://docs.swmansion.com/react-native-reanimated/docs/device/useAnimatedKeyboard\n */\nexport function useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions = { isStatusBarTranslucentAndroid: false }\n): AnimatedKeyboardInfo {\n  const ref = useRef<AnimatedKeyboardInfo | null>(null);\n  const listenerId = useRef<number>(-1);\n  const isSubscribed = useRef<boolean>(false);\n\n  if (ref.current === null) {\n    const keyboardEventData: AnimatedKeyboardInfo = {\n      state: makeMutable<KeyboardState>(KeyboardState.UNKNOWN),\n      height: makeMutable(0),\n    };\n    listenerId.current = subscribeForKeyboardEvents((state, height) => {\n      'worklet';\n      keyboardEventData.state.value = state;\n      keyboardEventData.height.value = height;\n    }, options);\n    ref.current = keyboardEventData;\n    isSubscribed.current = true;\n  }\n  useEffect(() => {\n    if (isSubscribed.current === false && ref.current !== null) {\n      const keyboardEventData = ref.current;\n      // subscribe again after Fast Refresh\n      listenerId.current = subscribeForKeyboardEvents((state, height) => {\n        'worklet';\n        keyboardEventData.state.value = state;\n        keyboardEventData.height.value = height;\n      }, options);\n      isSubscribed.current = true;\n    }\n    return () => {\n      unsubscribeFromKeyboardEvents(listenerId.current);\n      isSubscribed.current = false;\n    };\n  }, []);\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}