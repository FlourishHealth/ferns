{"ast":null,"code":"'use strict';import{SLOPE_FACTOR,VELOCITY_EPS}from'./utils';var _worklet_16476132305586_init_data={code:\"function rigidDecay(animation,now,config){const{SLOPE_FACTOR,VELOCITY_EPS}=this.__closure;const{lastTimestamp:lastTimestamp,startTimestamp:startTimestamp,initialVelocity:initialVelocity,current:current,velocity:velocity}=animation;const deltaTime=Math.min(now-lastTimestamp,64);const v=velocity*Math.exp(-(1-config.deceleration)*(now-startTimestamp)*SLOPE_FACTOR);animation.current=current+v*config.velocityFactor*deltaTime/1000;animation.velocity=v;animation.lastTimestamp=now;if(config.clamp){if(initialVelocity<0&&animation.current<=config.clamp[0]){animation.current=config.clamp[0];return true;}else if(initialVelocity>0&&animation.current>=config.clamp[1]){animation.current=config.clamp[1];return true;}}return Math.abs(v)<VELOCITY_EPS;}\"};export var rigidDecay=function(){var rigidDecay=function rigidDecay(animation,now,config){var lastTimestamp=animation.lastTimestamp,startTimestamp=animation.startTimestamp,initialVelocity=animation.initialVelocity,current=animation.current,velocity=animation.velocity;var deltaTime=Math.min(now-lastTimestamp,64);var v=velocity*Math.exp(-(1-config.deceleration)*(now-startTimestamp)*SLOPE_FACTOR);animation.current=current+v*config.velocityFactor*deltaTime/1000;animation.velocity=v;animation.lastTimestamp=now;if(config.clamp){if(initialVelocity<0&&animation.current<=config.clamp[0]){animation.current=config.clamp[0];return true;}else if(initialVelocity>0&&animation.current>=config.clamp[1]){animation.current=config.clamp[1];return true;}}return Math.abs(v)<VELOCITY_EPS;};rigidDecay.__closure={SLOPE_FACTOR:SLOPE_FACTOR,VELOCITY_EPS:VELOCITY_EPS};rigidDecay.__workletHash=16476132305586;rigidDecay.__initData=_worklet_16476132305586_init_data;return rigidDecay;}();","map":{"version":3,"sources":["rigidDecay.ts"],"names":["SLOPE_FACTOR","VELOCITY_EPS","rigidDecay","animation","now","config","lastTimestamp","startTimestamp","initialVelocity","current","velocity","deltaTime","Math","min","v","exp","deceleration","velocityFactor","clamp","abs"],"mappings":"AAAA,YAAY,CACZ,OAASA,YAAY,CAAEC,YAAY,KAAQ,SAAS,CAAA,IAAA,iCAAA,EAAA,IAAA,6uBAGpD,UAAgBC,CAAAA,UAAUA,CAAnB,eAAA,UAAA,UAAA,WACLC,SAA8B,CAC9BC,GAAW,CACXC,MAA0B,CACjB,CAET,GAAQC,CAAAA,aAAa,CACnBH,SAAS,CADHG,aAAa,CAAEC,cAAc,CACnCJ,SAAS,CADYI,cAAc,CAAEC,eAAe,CACpDL,SAAS,CAD4BK,eAAe,CAAEC,OAAO,CAC7DN,SAAS,CAD6CM,OAAO,CAAEC,QAAAA,CAC/DP,SAAS,CADsDO,QAAAA,CAGjE,GAAMC,CAAAA,SAAS,CAAGC,IAAI,CAACC,GAAG,CAACT,GAAG,CAAGE,aAAa,CAAE,EAAE,CAAC,CACnD,GAAMQ,CAAAA,CAAC,CACLJ,QAAQ,CACRE,IAAI,CAACG,GAAG,CACN,EAAE,CAAC,CAAGV,MAAM,CAACW,YAAY,CAAC,EAAIZ,GAAG,CAAGG,cAAc,CAAC,CAAGP,YAAY,CACnE,CACHG,SAAS,CAACM,OAAO,CAAGA,OAAO,CAAIK,CAAC,CAAGT,MAAM,CAACY,cAAc,CAAGN,SAAS,CAAI,IAAI,CAC5ER,SAAS,CAACO,QAAQ,CAAGI,CAAC,CACtBX,SAAS,CAACG,aAAa,CAAGF,GAAG,CAE7B,GAAIC,MAAM,CAACa,KAAK,CAAE,CAChB,GAAIV,eAAe,CAAG,CAAC,EAAIL,SAAS,CAACM,OAAO,EAAIJ,MAAM,CAACa,KAAK,CAAC,CAAC,CAAC,CAAE,CAC/Df,SAAS,CAACM,OAAO,CAAGJ,MAAM,CAACa,KAAK,CAAC,CAAC,CAAC,CACnC,MAAO,KAAI,CACb,CAAC,IAAM,IAAIV,eAAe,CAAG,CAAC,EAAIL,SAAS,CAACM,OAAO,EAAIJ,MAAM,CAACa,KAAK,CAAC,CAAC,CAAC,CAAE,CACtEf,SAAS,CAACM,OAAO,CAAGJ,MAAM,CAACa,KAAK,CAAC,CAAC,CAAC,CACnC,MAAO,KAAI,CACb,CACF,CACA,MAAON,CAAAA,IAAI,CAACO,GAAG,CAACL,CAAC,CAAC,CAAGb,YAAY,CACnC,CAAA,CAAA,UAAA,CAAA,SAAA,EAAA,YAAA,CAhB4DD,YAAY,CAAA,YAAA,CAejDC,YAAY,EAAA,UAAA,CAAA,aAAA,gBAAA,UAAA,CAAA,UAAA,CAAA,iCAAA,QAAA,UAAA,EA5B5B","sourcesContent":["'use strict';\nimport { SLOPE_FACTOR, VELOCITY_EPS } from './utils';\nimport type { DefaultDecayConfig, InnerDecayAnimation } from './utils';\n\nexport function rigidDecay(\n  animation: InnerDecayAnimation,\n  now: number,\n  config: DefaultDecayConfig\n): boolean {\n  'worklet';\n  const { lastTimestamp, startTimestamp, initialVelocity, current, velocity } =\n    animation;\n\n  const deltaTime = Math.min(now - lastTimestamp, 64);\n  const v =\n    velocity *\n    Math.exp(\n      -(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR\n    );\n  animation.current = current + (v * config.velocityFactor * deltaTime) / 1000;\n  animation.velocity = v;\n  animation.lastTimestamp = now;\n\n  if (config.clamp) {\n    if (initialVelocity < 0 && animation.current <= config.clamp[0]) {\n      animation.current = config.clamp[0];\n      return true;\n    } else if (initialVelocity > 0 && animation.current >= config.clamp[1]) {\n      animation.current = config.clamp[1];\n      return true;\n    }\n  }\n  return Math.abs(v) < VELOCITY_EPS;\n}\n"]},"metadata":{},"sourceType":"module"}