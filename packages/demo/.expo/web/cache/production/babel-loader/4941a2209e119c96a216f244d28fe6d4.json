{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{ClipboardUnavailableException,CopyFailureException,NoPermissionException,PasteFailureException}from'./Exceptions';import{base64toBlob,blobToBase64Async,findHtmlInClipboardAsync,findImageInClipboardAsync,getImageSizeFromBlobAsync,htmlToPlainText,isClipboardPermissionDeniedAsync}from'./Utils';import{StringFormat}from'../Clipboard.types';export default{get name(){return'ExpoClipboard';},getStringAsync:function(){var _getStringAsync=_asyncToGenerator(function*(options){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{switch(options.preferredFormat){case StringFormat.HTML:{var clipboardItems=yield navigator.clipboard.read();var blob=yield findHtmlInClipboardAsync(clipboardItems);if(!blob){return yield navigator.clipboard.readText();}return yield new Response(blob).text();}default:{var text=yield navigator.clipboard.readText();if(!text||text===''){var _clipboardItems=yield navigator.clipboard.read();var _blob=yield findHtmlInClipboardAsync(_clipboardItems);var blobText=yield _blob==null?void 0:_blob.text();text=htmlToPlainText(blobText!=null?blobText:'');}return text;}}}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}try{return window.clipboardData.getData('Text');}catch(_unused){return Promise.reject(new Error('Unable to retrieve item from clipboard'));}}});function getStringAsync(_x){return _getStringAsync.apply(this,arguments);}return getStringAsync;}(),setString:function setString(text){var textField=document.createElement('textarea');textField.textContent=text;document.body.appendChild(textField);textField.select();try{document.execCommand('copy');return true;}catch(_unused2){return false;}finally{document.body.removeChild(textField);}},setStringAsync:function(){var _setStringAsync=_asyncToGenerator(function*(text,options){switch(options.inputFormat){case StringFormat.HTML:{if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var clipboardItemInput=createHtmlClipboardItem(text);yield navigator.clipboard.write([clipboardItemInput]);return true;}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw new CopyFailureException(e.message);}}default:{try{if(!navigator.clipboard){throw new Error();}yield navigator.clipboard.writeText(text);return true;}catch(_unused3){return this.setString(text);}}}});function setStringAsync(_x2,_x3){return _setStringAsync.apply(this,arguments);}return setStringAsync;}(),hasStringAsync:function(){var _hasStringAsync=_asyncToGenerator(function*(){return yield clipboardHasTypesAsync(['text/plain','text/html']);});function hasStringAsync(){return _hasStringAsync.apply(this,arguments);}return hasStringAsync;}(),getImageAsync:function(){var _getImageAsync=_asyncToGenerator(function*(_options){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var clipboardItems=yield navigator.clipboard.read();var blob=yield findImageInClipboardAsync(clipboardItems);if(!blob){return null;}var _yield$Promise$all=yield Promise.all([blobToBase64Async(blob),getImageSizeFromBlobAsync(blob)]),_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2),data=_yield$Promise$all2[0],size=_yield$Promise$all2[1];return{data:data,size:size};}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw new PasteFailureException(e.message);}});function getImageAsync(_x4){return _getImageAsync.apply(this,arguments);}return getImageAsync;}(),setImageAsync:function(){var _setImageAsync=_asyncToGenerator(function*(base64image){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var blob=base64toBlob(base64image,'image/png');yield navigator.clipboard.write([new ClipboardItem(_defineProperty({},blob.type,blob))]);}catch(err){throw new CopyFailureException(err.message);}});function setImageAsync(_x5){return _setImageAsync.apply(this,arguments);}return setImageAsync;}(),hasImageAsync:function(){var _hasImageAsync=_asyncToGenerator(function*(){return yield clipboardHasTypesAsync(['image/png','image/jpeg']);});function hasImageAsync(){return _hasImageAsync.apply(this,arguments);}return hasImageAsync;}(),addClipboardListener:function addClipboardListener(){},removeClipboardListener:function removeClipboardListener(){}};function clipboardHasTypesAsync(_x6){return _clipboardHasTypesAsync.apply(this,arguments);}function _clipboardHasTypesAsync(){_clipboardHasTypesAsync=_asyncToGenerator(function*(types){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{var clipboardItems=yield navigator.clipboard.read();return clipboardItems.flatMap(function(item){return item.types;}).some(function(type){return types.includes(type);});}catch(e){if(e.name==='NotAllowedError'||(yield isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw e;}});return _clipboardHasTypesAsync.apply(this,arguments);}function createHtmlClipboardItem(htmlString){return new ClipboardItem({'text/html':new Blob([htmlString],{type:'text/html'}),'text/plain':new Blob([htmlToPlainText(htmlString)],{type:'text/plain'})});}","map":{"version":3,"sources":["../../src/web/ClipboardModule.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\nimport {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default: {\n        try {\n          if (!navigator.clipboard) {\n            throw new Error();\n          }\n          await navigator.clipboard.writeText(text);\n          return true;\n        } catch {\n          // we can fall back to legacy behavior in any kind of failure\n          // including navigator.clipboard unavailability\n          return this.setString(text);\n        }\n      }\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          [blob.type]: blob,\n        }),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}