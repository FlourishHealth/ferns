{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useMemo,useState}from\"react\";import{Box}from\"./Box\";import{SelectList}from\"./SelectList\";import{TextField}from\"./TextField\";export var CustomSelect=function CustomSelect(_ref){var value=_ref.value,_onChange=_ref.onChange,placeholder=_ref.placeholder,disabled=_ref.disabled,options=_ref.options;var _useState=useState(value),_useState2=_slicedToArray(_useState,2),customValue=_useState2[0],setCustomValue=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),showCustomInput=_useState4[0],setShowCustomInput=_useState4[1];var isValueCustom=useMemo(function(){return![].concat(_toConsumableArray(options),[{value:\"\"}]).map(function(i){return i.value;}).includes(customValue);},[options,customValue]);useEffect(function(){setShowCustomInput(isValueCustom);if(!showCustomInput){setCustomValue(value);}},[showCustomInput,value,isValueCustom]);var handleCustomSelectListChange=function handleCustomSelectListChange(newValue){if(newValue===\"custom\"){setShowCustomInput(true);setCustomValue(isValueCustom?\"custom\":newValue);_onChange(\"\");}else{if(showCustomInput){setShowCustomInput(false);}_onChange(newValue);}};return React.createElement(React.Fragment,null,React.createElement(SelectList,{id:\"providedOptions\",options:[].concat(_toConsumableArray(options),[{label:\"Custom\",value:\"custom\"}]),placeholder:placeholder,value:isValueCustom?\"custom\":customValue,onChange:handleCustomSelectListChange}),Boolean(showCustomInput)&&(React.createElement(Box,{paddingY:2},React.createElement(TextField,{disabled:disabled,id:\"customOptions\",placeholder:placeholder,type:\"text\",value:value,onChange:function onChange(result){return _onChange(result.value);}}))));};","map":{"version":3,"sources":["../src/CustomSelect.tsx"],"names":[],"mappings":"0IAAA,MAAO,CAAA,KAAK,EAAiB,SAAS,CAAE,OAAO,CAAE,QAAQ,KAAO,OAAO,CAEvE,OAAQ,GAAG,KAAO,OAAO,CAEzB,OAAQ,UAAU,KAAO,cAAc,CACvC,OAAQ,SAAS,KAAO,aAAa,CAErC,MAAO,IAAM,CAAA,YAAY,CAAG,QAAf,CAAA,YAAY,CAAA,IAAA,CAMoB,IAL3C,CAAA,KAAK,CAAA,IAAA,CAAL,KAAK,CACL,SAAQ,CAAA,IAAA,CAAR,QAAQ,CACR,WAAW,CAAA,IAAA,CAAX,WAAW,CACX,QAAQ,CAAA,IAAA,CAAR,QAAQ,CACR,OAAO,CAAA,IAAA,CAAP,OAAO,CAEP,IAAA,SAAA,CAAsC,QAAQ,CAAC,KAAK,CAAC,CAAA,UAAA,CAAA,cAAA,CAAA,SAAA,IAA9C,WAAW,CAAA,UAAA,IAAE,cAAc,CAAA,UAAA,IAClC,IAAA,UAAA,CAA8C,QAAQ,CAAC,KAAK,CAAC,CAAA,UAAA,CAAA,cAAA,CAAA,UAAA,IAAtD,eAAe,CAAA,UAAA,IAAE,kBAAkB,CAAA,UAAA,IAI1C,GAAM,CAAA,aAAa,CAAY,OAAO,CAAC,UAAc,CAGnD,MAAO,CAAC,GAAA,MAAA,CAAA,kBAAA,CAAI,OAAO,GAAE,CAAC,KAAK,CAAE,EAAE,CAAC,GAAE,GAAG,CAAC,SAAC,CAAC,QAAK,CAAA,CAAC,CAAC,KAAK,GAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAC7E,CAAC,CAAE,CAAC,OAAO,CAAE,WAAW,CAAC,CAAC,CAG1B,SAAS,CAAC,UAAK,CACb,kBAAkB,CAAC,aAAa,CAAC,CACjC,GAAI,CAAC,eAAe,CAAE,CACpB,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAAE,CAAC,eAAe,CAAE,KAAK,CAAE,aAAa,CAAC,CAAC,CAI3C,GAAM,CAAA,4BAA4B,CAAG,QAA/B,CAAA,4BAA4B,CAAI,QAAiB,CAAI,CAGzD,GAAI,QAAQ,GAAK,QAAQ,CAAE,CACzB,kBAAkB,CAAC,IAAI,CAAC,CACxB,cAAc,CAAC,aAAa,CAAG,QAAQ,CAAG,QAAQ,CAAC,CACnD,SAAQ,CAAC,EAAE,CAAC,CACd,CAAC,IAGI,CAEH,GAAI,eAAe,CAAE,CACnB,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CAGA,SAAQ,CAAC,QAAQ,CAAC,CACpB,CACF,CAAC,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CACT,EAAE,CAAC,iBAAiB,CACpB,OAAO,IAAA,MAAA,CAAA,kBAAA,CAAM,OAAO,GAAE,CAAC,KAAK,CAAE,QAAQ,CAAE,KAAK,CAAE,QAAQ,CAAC,EAAC,CACzD,WAAW,CAAE,WAAW,CACxB,KAAK,CAAE,aAAa,CAAG,QAAQ,CAAG,WAAW,CAC7C,QAAQ,CAAE,4BAA4B,CAAA,CACtC,CACD,OAAO,CAAC,eAAe,CAAC,GACvB,KAAA,CAAA,aAAA,CAAC,GAAG,CAAA,CAAC,QAAQ,CAAE,CAAC,CAAA,CACd,KAAA,CAAA,aAAA,CAAC,SAAS,CAAA,CACR,QAAQ,CAAE,QAAQ,CAClB,EAAE,CAAC,eAAe,CAClB,WAAW,CAAE,WAAW,CACxB,IAAI,CAAC,MAAM,CACX,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,SAAA,SAAC,MAAM,QAAK,CAAA,SAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAA,CAAA,CAC5C,CACE,CACP,CACA,CAEP,CAAC","sourceRoot":"","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { Box } from \"./Box\";\nimport { SelectList } from \"./SelectList\";\nimport { TextField } from \"./TextField\";\nexport const CustomSelect = ({ value, onChange, placeholder, disabled, options, }) => {\n    const [customValue, setCustomValue] = useState(value);\n    const [showCustomInput, setShowCustomInput] = useState(false);\n    // Boolean that checks if customValue is a value from the\n    // options prop or if it is a true custom value\n    const isValueCustom = useMemo(() => {\n        // We add an empty value to protect against an empty string custom value or if the placeholder\n        // value is selected\n        return ![...options, { value: \"\" }].map((i) => i.value).includes(customValue);\n    }, [options, customValue]);\n    // If the value is set to custom, show the custom input\n    useEffect(() => {\n        setShowCustomInput(isValueCustom);\n        if (!showCustomInput) {\n            setCustomValue(value);\n        }\n    }, [showCustomInput, value, isValueCustom]);\n    // Custom select has 3 values - the overall field value, the value of the select menu,\n    // and the value of the custom input\n    const handleCustomSelectListChange = (newValue) => {\n        // If \"custom\" is selected from the dropdown, toggle the custom input open and clear the\n        // previous value\n        if (newValue === \"custom\") {\n            setShowCustomInput(true);\n            setCustomValue(isValueCustom ? \"custom\" : newValue);\n            onChange(\"\");\n        }\n        // If any non-custom value is selected\n        else {\n            // Close the custom input if open and clear the value\n            if (showCustomInput) {\n                setShowCustomInput(false);\n            }\n            // Update the field value and select value\n            onChange(newValue);\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(SelectList, { id: \"providedOptions\", options: [...options, { label: \"Custom\", value: \"custom\" }], placeholder: placeholder, value: isValueCustom ? \"custom\" : customValue, onChange: handleCustomSelectListChange }),\n        Boolean(showCustomInput) && (React.createElement(Box, { paddingY: 2 },\n            React.createElement(TextField, { disabled: disabled, id: \"customOptions\", placeholder: placeholder, type: \"text\", value: value, onChange: (result) => onChange(result.value) })))));\n};\n//# sourceMappingURL=CustomSelect.js.map"]},"metadata":{},"sourceType":"module"}