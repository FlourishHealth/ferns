{"ast":null,"code":"import{CodedError}from'expo-modules-core';import{getContext}from'../utils/getContext.web';export default(function(canvas,options){var _options$backgroundCo=options.backgroundColor,backgroundColor=_options$backgroundCo===void 0?null:_options$backgroundCo,_options$originX=options.originX,originX=_options$originX===void 0?0:_options$originX,_options$originY=options.originY,originY=_options$originY===void 0?0:_options$originY,_options$width=options.width,width=_options$width===void 0?0:_options$width,_options$height=options.height,height=_options$height===void 0?0:_options$height;if(width===0||height===0){throw new CodedError('ERR_IMAGE_MANIPULATOR_EXTENT','Extent size must be greater than 0: '+JSON.stringify(options,null,2));}var result=document.createElement('canvas');result.width=width;result.height=height;var sx=originX<0?0:originX;var sy=originY<0?0:originY;var sw=originX<0?Math.min(canvas.width,width+originX):Math.min(canvas.width-originX,width);var sh=originY<0?Math.min(canvas.height,height+originY):Math.min(canvas.height-originY,height);var dx=originX<0?-originX:0;var dy=originY<0?-originY:0;var context=getContext(result);if(backgroundColor!=null){context.fillStyle=backgroundColor;context.fillRect(0,0,width,height);}context.drawImage(canvas,sx,sy,sw,sh,dx,dy,sw,sh);return result;});","map":{"version":3,"sources":["../../src/actions/ExtentAction.web.ts"],"names":[],"mappings":"AAAA,OAAS,UAAU,KAAQ,mBAAmB,CAG9C,OAAS,UAAU,KAAQ,yBAAyB,CAEpD,eAAe,SAAC,MAAyB,CAAE,OAA+B,CAAI,CAE5E,IAAA,qBAAA,CAAoF,OAAO,CAAnF,eAAe,CAAf,eAAe,CAAA,qBAAA,UAAG,IAAI,CAAA,qBAAA,CAAA,gBAAA,CAAsD,OAAO,CAA3D,OAAO,CAAP,OAAO,CAAA,gBAAA,UAAG,CAAC,CAAA,gBAAA,CAAA,gBAAA,CAAyC,OAAO,CAA9C,OAAO,CAAP,OAAO,CAAA,gBAAA,UAAG,CAAC,CAAA,gBAAA,CAAA,cAAA,CAA4B,OAAO,CAAjC,KAAK,CAAL,KAAK,CAAA,cAAA,UAAG,CAAC,CAAA,cAAA,CAAA,eAAA,CAAiB,OAAO,CAAtB,MAAM,CAAN,MAAM,CAAA,eAAA,UAAG,CAAC,CAAA,eAAA,CAE/E,GAAI,KAAK,GAAK,CAAC,EAAI,MAAM,GAAK,CAAC,CAAE,CAC/B,KAAM,IAAI,CAAA,UAAU,CAClB,8BAA8B,CAC9B,sCAAsC,CAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC,CAAC,CAC1E,CACF,CAED,GAAM,CAAA,MAAM,CAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAC/C,MAAM,CAAC,KAAK,CAAG,KAAK,CACpB,MAAM,CAAC,MAAM,CAAG,MAAM,CAEtB,GAAM,CAAA,EAAE,CAAG,OAAO,CAAG,CAAC,CAAG,CAAC,CAAG,OAAO,CACpC,GAAM,CAAA,EAAE,CAAG,OAAO,CAAG,CAAC,CAAG,CAAC,CAAG,OAAO,CACpC,GAAM,CAAA,EAAE,CACN,OAAO,CAAG,CAAC,CAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAE,KAAK,CAAG,OAAO,CAAC,CAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAG,OAAO,CAAE,KAAK,CAAC,CACjG,GAAM,CAAA,EAAE,CACN,OAAO,CAAG,CAAC,CACP,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAE,MAAM,CAAG,OAAO,CAAC,CACzC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAG,OAAO,CAAE,MAAM,CAAC,CAE/C,GAAM,CAAA,EAAE,CAAG,OAAO,CAAG,CAAC,CAAG,CAAC,OAAO,CAAG,CAAC,CACrC,GAAM,CAAA,EAAE,CAAG,OAAO,CAAG,CAAC,CAAG,CAAC,OAAO,CAAG,CAAC,CAErC,GAAM,CAAA,OAAO,CAAG,UAAU,CAAC,MAAM,CAAC,CAElC,GAAI,eAAe,EAAI,IAAI,CAAE,CAC3B,OAAO,CAAC,SAAS,CAAG,eAAe,CACnC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAE,KAAK,CAAE,MAAM,CAAC,CACtC,CAED,OAAO,CAAC,SAAS,CAAC,MAAM,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAC,CAEzD,MAAO,CAAA,MAAM,CACf,CAAC","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionExtent } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionExtent['extent']) => {\n  // ensure values are defined.\n  const { backgroundColor = null, originX = 0, originY = 0, width = 0, height = 0 } = options;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_EXTENT',\n      'Extent size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const sx = originX < 0 ? 0 : originX;\n  const sy = originY < 0 ? 0 : originY;\n  const sw =\n    originX < 0 ? Math.min(canvas.width, width + originX) : Math.min(canvas.width - originX, width);\n  const sh =\n    originY < 0\n      ? Math.min(canvas.height, height + originY)\n      : Math.min(canvas.height - originY, height);\n\n  const dx = originX < 0 ? -originX : 0;\n  const dy = originY < 0 ? -originY : 0;\n\n  const context = getContext(result);\n\n  if (backgroundColor != null) {\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, width, height);\n  }\n\n  context.drawImage(canvas, sx, sy, sw, sh, dx, dy, sw, sh);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}