{"ast":null,"code":"import{getAssetByID}from'@react-native/assets-registry/registry';import AssetSourceResolver from'./AssetSourceResolver';var _customSourceTransformer;export function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}export default function resolveAssetSource(source){if(typeof source==='object'){return source;}var asset=getAssetByID(source);if(!asset){return null;}var resolver=new AssetSourceResolver('https://expo.dev',null,asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}Object.defineProperty(resolveAssetSource,'setCustomSourceTransformer',{get:function get(){return setCustomSourceTransformer;}});var pickScale=AssetSourceResolver.pickScale;export{pickScale};","map":{"version":3,"sources":["../src/resolveAssetSource.ts"],"names":[],"mappings":"AAAA,OAAS,YAAY,KAAQ,wCAAwC,CAErE,MAAO,CAAA,mBAA4C,KAAM,uBAAuB,CAEhF,GAAI,CAAA,wBAAwB,CAE5B,MAAM,SAAU,CAAA,0BAA0B,CACxC,WAAmE,CAAA,CAEnE,wBAAwB,CAAG,WAAW,CACxC,CAMA,cAAc,SAAU,CAAA,kBAAkB,CAAC,MAAW,CAAA,CACpD,GAAI,MAAO,CAAA,MAAM,GAAK,QAAQ,CAAE,CAC9B,MAAO,CAAA,MAAM,CACd,CAED,GAAM,CAAA,KAAK,CAAG,YAAY,CAAC,MAAM,CAAC,CAClC,GAAI,CAAC,KAAK,CAAE,CACV,MAAO,KAAI,CACZ,CAED,GAAM,CAAA,QAAQ,CAAG,GAAI,CAAA,mBAAmB,CAEtC,kBAAkB,CAClB,IAAI,CACJ,KAAK,CACN,CACD,GAAI,wBAAwB,CAAE,CAC5B,MAAO,CAAA,wBAAwB,CAAC,QAAQ,CAAC,CAC1C,CACD,MAAO,CAAA,QAAQ,CAAC,YAAY,CAAA,CAAE,CAChC,CAEA,MAAM,CAAC,cAAc,CAAC,kBAAkB,CAAE,4BAA4B,CAAE,CACtE,GAAG,UAAA,IAAA,CAAA,CACD,MAAO,CAAA,0BAA0B,CACnC,C,CACD,CAAC,CAEK,GAAQ,CAAA,SAAS,CAAK,mBAAmB,CAAjC,SAAS,CAAyB,OAAA,SAAA","sourcesContent":["import { getAssetByID } from '@react-native/assets-registry/registry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\nlet _customSourceTransformer;\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | null {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    // Doesn't matter since this is removed on web\n    'https://expo.dev',\n    null,\n    asset\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}