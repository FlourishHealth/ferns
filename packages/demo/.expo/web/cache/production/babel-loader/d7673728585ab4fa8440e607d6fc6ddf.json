{"ast":null,"code":"import _construct from\"@babel/runtime/helpers/construct\";import{FlingGesture}from'./flingGesture';import{ForceTouchGesture}from'./forceTouchGesture';import{ComposedGesture,ExclusiveGesture,SimultaneousGesture}from'./gestureComposition';import{LongPressGesture}from'./longPressGesture';import{PanGesture}from'./panGesture';import{PinchGesture}from'./pinchGesture';import{RotationGesture}from'./rotationGesture';import{TapGesture}from'./tapGesture';import{NativeGesture}from'./nativeGesture';import{ManualGesture}from'./manualGesture';import{HoverGesture}from'./hoverGesture';export var GestureObjects={Tap:function Tap(){return new TapGesture();},Pan:function Pan(){return new PanGesture();},Pinch:function Pinch(){return new PinchGesture();},Rotation:function Rotation(){return new RotationGesture();},Fling:function Fling(){return new FlingGesture();},LongPress:function LongPress(){return new LongPressGesture();},ForceTouch:function ForceTouch(){return new ForceTouchGesture();},Native:function Native(){return new NativeGesture();},Manual:function Manual(){return new ManualGesture();},Hover:function Hover(){return new HoverGesture();},Race:function Race(){for(var _len=arguments.length,gestures=new Array(_len),_key=0;_key<_len;_key++){gestures[_key]=arguments[_key];}return _construct(ComposedGesture,gestures);},Simultaneous:function Simultaneous(){for(var _len2=arguments.length,gestures=new Array(_len2),_key2=0;_key2<_len2;_key2++){gestures[_key2]=arguments[_key2];}return _construct(SimultaneousGesture,gestures);},Exclusive:function Exclusive(){for(var _len3=arguments.length,gestures=new Array(_len3),_key3=0;_key3<_len3;_key3++){gestures[_key3]=arguments[_key3];}return _construct(ExclusiveGesture,gestures);}};","map":{"version":3,"sources":["gestureObjects.ts"],"names":["FlingGesture","ForceTouchGesture","ComposedGesture","ExclusiveGesture","SimultaneousGesture","LongPressGesture","PanGesture","PinchGesture","RotationGesture","TapGesture","NativeGesture","ManualGesture","HoverGesture","GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Hover","Race","gestures","Simultaneous","Exclusive"],"mappings":"yDAAA,OAASA,YAAT,KAA6B,gBAA7B,CACA,OAASC,iBAAT,KAAkC,qBAAlC,CAEA,OACEC,eADF,CAEEC,gBAFF,CAGEC,mBAHF,KAIO,sBAJP,CAKA,OAASC,gBAAT,KAAiC,oBAAjC,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,eAAT,KAAgC,mBAAhC,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,YAAT,KAA6B,gBAA7B,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,CAC5BC,GAAG,CAAE,SAAA,IAAA,CAAM,CACT,MAAO,IAAIL,CAAAA,UAAJ,CAAA,CAAP,CACD,CAH2B,CAK5BM,GAAG,CAAE,SAAA,IAAA,CAAM,CACT,MAAO,IAAIT,CAAAA,UAAJ,CAAA,CAAP,CACD,CAP2B,CAS5BU,KAAK,CAAE,SAAA,MAAA,CAAM,CACX,MAAO,IAAIT,CAAAA,YAAJ,CAAA,CAAP,CACD,CAX2B,CAa5BU,QAAQ,CAAE,SAAA,SAAA,CAAM,CACd,MAAO,IAAIT,CAAAA,eAAJ,CAAA,CAAP,CACD,CAf2B,CAiB5BU,KAAK,CAAE,SAAA,MAAA,CAAM,CACX,MAAO,IAAIlB,CAAAA,YAAJ,CAAA,CAAP,CACD,CAnB2B,CAqB5BmB,SAAS,CAAE,SAAA,UAAA,CAAM,CACf,MAAO,IAAId,CAAAA,gBAAJ,CAAA,CAAP,CACD,CAvB2B,CAyB5Be,UAAU,CAAE,SAAA,WAAA,CAAM,CAChB,MAAO,IAAInB,CAAAA,iBAAJ,CAAA,CAAP,CACD,CA3B2B,CA6B5BoB,MAAM,CAAE,SAAA,OAAA,CAAM,CACZ,MAAO,IAAIX,CAAAA,aAAJ,CAAA,CAAP,CACD,CA/B2B,CAiC5BY,MAAM,CAAE,SAAA,OAAA,CAAM,CACZ,MAAO,IAAIX,CAAAA,aAAJ,CAAA,CAAP,CACD,CAnC2B,CAqC5BY,KAAK,CAAE,SAAA,MAAA,CAAM,CACX,MAAO,IAAIX,CAAAA,YAAJ,CAAA,CAAP,CACD,CAvC2B,CA6C5BY,IAAI,CAAE,SAAA,KAAA,CAA4B,SAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAxBC,QAAJ,KAAA,KAAA,CAAA,IAAA,EAAA,IAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAIA,QAAJ,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,GACJ,OAAA,UAAA,CAAWvB,eAAJ,CAAuBuB,QAA9B,EACD,CA/C2B,CAoD5BC,YAAY,UAAA,aAAA,CAAyB,SAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAArBD,QAAJ,KAAA,KAAA,CAAA,KAAA,EAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,KAAA,IAAIA,QAAJ,CAAA,KAAA,EAAA,SAAA,CAAA,KAAA,GACV,OAAA,UAAA,CAAWrB,mBAAJ,CAA2BqB,QAAlC,EACD,CAtD2B,CA+D5BE,SAAS,UAAA,UAAA,CAAyB,SAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAArBF,QAAJ,KAAA,KAAA,CAAA,KAAA,EAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,KAAA,IAAIA,QAAJ,CAAA,KAAA,EAAA,SAAA,CAAA,KAAA,GACP,OAAA,UAAA,CAAWtB,gBAAJ,CAAwBsB,QAA/B,EACD,CAjE2B,CAAvB","sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\nimport { HoverGesture } from './hoverGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  Hover: () => {\n    return new HoverGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}