{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{EventEmitter,UnavailabilityError,Platform}from'expo-modules-core';import{ClipboardPasteButton}from'./ClipboardPasteButton';import ExpoClipboard from'./ExpoClipboard';var emitter=new EventEmitter(ExpoClipboard);var onClipboardEventName='onClipboardChanged';export function getStringAsync(){return _getStringAsync.apply(this,arguments);}function _getStringAsync(){_getStringAsync=_asyncToGenerator(function*(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(!ExpoClipboard.getStringAsync){throw new UnavailabilityError('Clipboard','getStringAsync');}return yield ExpoClipboard.getStringAsync(options);});return _getStringAsync.apply(this,arguments);}export function setStringAsync(_x){return _setStringAsync.apply(this,arguments);}function _setStringAsync(){_setStringAsync=_asyncToGenerator(function*(text){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!ExpoClipboard.setStringAsync){throw new UnavailabilityError('Clipboard','setStringAsync');}return ExpoClipboard.setStringAsync(text,options);});return _setStringAsync.apply(this,arguments);}export function setString(text){if(\"web\"==='web'){return ExpoClipboard.setString(text);}else{setStringAsync(text);}}export function hasStringAsync(){if(!ExpoClipboard.hasStringAsync){throw new UnavailabilityError('Clipboard','hasStringAsync');}return ExpoClipboard.hasStringAsync();}export function getUrlAsync(){return _getUrlAsync.apply(this,arguments);}function _getUrlAsync(){_getUrlAsync=_asyncToGenerator(function*(){if(!ExpoClipboard.getUrlAsync){throw new UnavailabilityError('Clipboard','getUrlAsync');}return yield ExpoClipboard.getUrlAsync();});return _getUrlAsync.apply(this,arguments);}export function setUrlAsync(_x2){return _setUrlAsync.apply(this,arguments);}function _setUrlAsync(){_setUrlAsync=_asyncToGenerator(function*(url){if(!ExpoClipboard.setUrlAsync){throw new UnavailabilityError('Clipboard','setUrlAsync');}return ExpoClipboard.setUrlAsync(url);});return _setUrlAsync.apply(this,arguments);}export function hasUrlAsync(){return _hasUrlAsync.apply(this,arguments);}function _hasUrlAsync(){_hasUrlAsync=_asyncToGenerator(function*(){if(!ExpoClipboard.hasUrlAsync){throw new UnavailabilityError('Clipboard','hasUrlAsync');}return yield ExpoClipboard.hasUrlAsync();});return _hasUrlAsync.apply(this,arguments);}export function getImageAsync(_x3){return _getImageAsync.apply(this,arguments);}function _getImageAsync(){_getImageAsync=_asyncToGenerator(function*(options){if(!ExpoClipboard.getImageAsync){throw new UnavailabilityError('Clipboard','getImageAsync');}return yield ExpoClipboard.getImageAsync(options);});return _getImageAsync.apply(this,arguments);}export function setImageAsync(_x4){return _setImageAsync.apply(this,arguments);}function _setImageAsync(){_setImageAsync=_asyncToGenerator(function*(base64Image){if(!ExpoClipboard.setImageAsync){throw new UnavailabilityError('Clipboard','setImageAsync');}return ExpoClipboard.setImageAsync(base64Image);});return _setImageAsync.apply(this,arguments);}export function hasImageAsync(){return _hasImageAsync.apply(this,arguments);}function _hasImageAsync(){_hasImageAsync=_asyncToGenerator(function*(){if(!ExpoClipboard.hasImageAsync){throw new UnavailabilityError('Clipboard','hasImageAsync');}return ExpoClipboard.hasImageAsync();});return _hasImageAsync.apply(this,arguments);}export function addClipboardListener(listener){var listenerWrapper=function listenerWrapper(event){var wrappedEvent=_objectSpread(_objectSpread({},event),{},{get content(){console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");return'';}});listener(wrappedEvent);};return emitter.addListener(onClipboardEventName,listenerWrapper);}export function removeClipboardListener(subscription){emitter.removeSubscription(subscription);}export var isPasteButtonAvailable=\"web\"==='ios'?ExpoClipboard.isPasteButtonAvailable:false;export*from'./Clipboard.types';export{ClipboardPasteButton};","map":{"version":3,"names":["EventEmitter","UnavailabilityError","Platform","ClipboardPasteButton","ExpoClipboard","emitter","onClipboardEventName","getStringAsync","_getStringAsync","apply","arguments","_asyncToGenerator","options","length","undefined","setStringAsync","_x","_setStringAsync","text","setString","hasStringAsync","getUrlAsync","_getUrlAsync","setUrlAsync","_x2","_setUrlAsync","url","hasUrlAsync","_hasUrlAsync","getImageAsync","_x3","_getImageAsync","setImageAsync","_x4","_setImageAsync","base64Image","hasImageAsync","_hasImageAsync","addClipboardListener","listener","listenerWrapper","event","wrappedEvent","_objectSpread","content","console","warn","addListener","removeClipboardListener","subscription","removeSubscription","isPasteButtonAvailable"],"sources":["/Users/josh/src/ui/node_modules/expo-clipboard/src/Clipboard.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport {\n  ClipboardImage,\n  ContentType,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n} from './Clipboard.types';\nimport { ClipboardPasteButton } from './ClipboardPasteButton';\nimport ExpoClipboard from './ExpoClipboard';\n\nconst emitter = new EventEmitter(ExpoClipboard);\n\nconst onClipboardEventName = 'onClipboardChanged';\n\ntype ClipboardEvent = {\n  /**\n   * @deprecated Returns empty string. Use [`getStringAsync()`](#getstringasyncoptions) instead to retrieve clipboard content.\n   */\n  content: string;\n  /**\n   * An array of content types that are available on the clipboard.\n   */\n  contentTypes: ContentType[];\n};\n\nexport { Subscription, ClipboardEvent };\n\n/**\n * Gets the content of the user's clipboard. Please note that calling this method on web will prompt\n * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options Options for the clipboard content to be retrieved.\n * @returns A promise that resolves to the content of the clipboard.\n */\nexport async function getStringAsync(options: GetStringOptions = {}): Promise<string> {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync(options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n *\n * @param text The string to save to the clipboard.\n * @param options Options for the clipboard content to be set.\n * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n */\nexport async function setStringAsync(\n  text: string,\n  options: SetStringOptions = {}\n): Promise<boolean> {\n  if (!ExpoClipboard.setStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'setStringAsync');\n  }\n  return ExpoClipboard.setStringAsync(text, options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n *\n * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n * the user's clipboard. On iOS and Android, nothing is returned.\n */\nexport function setString(text: string): void {\n  if (Platform.OS === 'web') {\n    // on web, we need to return legacy method,\n    // because of different return type\n    return ExpoClipboard.setString(text);\n  } else {\n    setStringAsync(text);\n  }\n}\n\n/**\n * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n */\nexport function hasStringAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasStringAsync');\n  }\n  return ExpoClipboard.hasStringAsync();\n}\n\n/**\n * Gets the URL from the user's clipboard.\n *\n * @returns A promise that fulfills to the URL in the clipboard.\n * @platform ios\n */\nexport async function getUrlAsync(): Promise<string | null> {\n  if (!ExpoClipboard.getUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'getUrlAsync');\n  }\n  return await ExpoClipboard.getUrlAsync();\n}\n\n/**\n * Sets a URL in the user's clipboard.\n *\n * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n * clipboard contains a URL and behave accordingly.\n *\n * @param url The URL to save to the clipboard.\n * @platform ios\n */\nexport async function setUrlAsync(url: string): Promise<void> {\n  if (!ExpoClipboard.setUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'setUrlAsync');\n  }\n  return ExpoClipboard.setUrlAsync(url);\n}\n\n/**\n * Returns whether the clipboard has a URL content.\n *\n * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n * @platform ios\n */\nexport async function hasUrlAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasUrlAsync');\n  }\n  return await ExpoClipboard.hasUrlAsync();\n}\n\n/**\n * Gets the image from the user's clipboard and returns it in the specified format. Please note that calling\n * this method on web will prompt the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options A `GetImageOptions` object to specify the desired format of the image.\n * @returns If there was an image in the clipboard, the promise resolves to\n * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n * Otherwise, it resolves to `null`.\n *\n * @example\n * ```tsx\n * const img = await Clipboard.getImageAsync({ format: 'png' });\n * // ...\n * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n * ```\n */\nexport async function getImageAsync(options: GetImageOptions): Promise<ClipboardImage | null> {\n  if (!ExpoClipboard.getImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'getImageAsync');\n  }\n  return await ExpoClipboard.getImageAsync(options);\n}\n\n/**\n * Sets an image in the user's clipboard.\n *\n * @param base64Image Image encoded as a base64 string, without MIME type.\n *\n * @example\n * ```tsx\n * const result = await ImagePicker.launchImageLibraryAsync({\n *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n *   base64: true,\n * });\n * await Clipboard.setImageAsync(result.base64);\n * ```\n */\nexport async function setImageAsync(base64Image: string): Promise<void> {\n  if (!ExpoClipboard.setImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'setImageAsync');\n  }\n  return ExpoClipboard.setImageAsync(base64Image);\n}\n\n/**\n * Returns whether the clipboard has an image content.\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n */\nexport async function hasImageAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasImageAsync');\n  }\n  return ExpoClipboard.hasImageAsync();\n}\n\n/**\n * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n * is a no-op on Web.\n *\n * @param listener Callback to execute when listener is triggered. The callback is provided a\n * single argument that is an object containing information about clipboard contents.\n *\n * @example\n * ```typescript\n * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n *     Clipboard.getStringAsync().then(content => {\n *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n *     });\n *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n *     alert('Yay! Clipboard contains an image');\n *   }\n * });\n * ```\n */\nexport function addClipboardListener(listener: (event: ClipboardEvent) => void): Subscription {\n  // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n  const listenerWrapper = (event: ClipboardEvent) => {\n    const wrappedEvent: ClipboardEvent = {\n      ...event,\n      get content(): string {\n        console.warn(\n          \"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\"\n        );\n        return '';\n      },\n    };\n    listener(wrappedEvent);\n  };\n  return emitter.addListener<ClipboardEvent>(onClipboardEventName, listenerWrapper);\n}\n\n/**\n * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n *\n * @param subscription The subscription to remove (created by addClipboardListener).\n *\n * @example\n * ```typescript\n * const subscription = addClipboardListener(() => {\n *   alert('Copy pasta!');\n * });\n * removeClipboardListener(subscription);\n * ```\n */\nexport function removeClipboardListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\n/**\n * Property that determines if the `ClipboardPasteButton` is available.\n *\n * This requires the users device to be using at least iOS 16.\n *\n * `true` if the component is available, and `false` otherwise.\n */\nexport const isPasteButtonAvailable: boolean =\n  Platform.OS === 'ios' ? ExpoClipboard.isPasteButtonAvailable : false;\n\nexport * from './Clipboard.types';\nexport { ClipboardPasteButton };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}