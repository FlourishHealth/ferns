{"ast":null,"code":"'use strict';import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"itemLayoutAnimation\",\"skipEnteringExitingAnimations\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef}from'react';import FlatList from\"react-native-web/dist/exports/FlatList\";import{AnimatedView}from'./View';import{createAnimatedComponent}from'../../createAnimatedComponent';import{LayoutAnimationConfig}from'./LayoutAnimationConfig';var AnimatedFlatList=createAnimatedComponent(FlatList);var createCellRendererComponent=function createCellRendererComponent(itemLayoutAnimation){var CellRendererComponent=function CellRendererComponent(props){return React.createElement(AnimatedView,{layout:itemLayoutAnimation,onLayout:props.onLayout,style:props.style},props.children);};return CellRendererComponent;};export var ReanimatedFlatList=forwardRef(function(props,ref){var itemLayoutAnimation=props.itemLayoutAnimation,skipEnteringExitingAnimations=props.skipEnteringExitingAnimations,restProps=_objectWithoutProperties(props,_excluded);if(!('scrollEventThrottle'in restProps)){restProps.scrollEventThrottle=1;}var CellRendererComponent=React.useMemo(function(){return createCellRendererComponent(itemLayoutAnimation);},[]);var animatedFlatList=React.createElement(AnimatedFlatList,_extends({ref:ref},restProps,{CellRendererComponent:CellRendererComponent}));if(skipEnteringExitingAnimations===undefined){return animatedFlatList;}return React.createElement(LayoutAnimationConfig,{skipEntering:true,skipExiting:true},animatedFlatList);});","map":{"version":3,"sources":["FlatList.tsx"],"names":["React","forwardRef","AnimatedView","createAnimatedComponent","LayoutAnimationConfig","AnimatedFlatList","FlatList","createCellRendererComponent","itemLayoutAnimation","CellRendererComponent","props","layout","onLayout","style","children","ReanimatedFlatList","ref","skipEnteringExitingAnimations","restProps","scrollEventThrottle","useMemo","animatedFlatList","undefined","skipEntering","skipExiting"],"mappings":"AAAA,YAAY,CAAA,OAAA,wBAAA,0DAAA,SAAA,yDAAC,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,SAAA,MAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,GAAA,CAAA,GAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAEb,MAAOA,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CAAA,OAAA,QAAA,8CAQzC,OAASC,YAAY,KAAQ,QAAQ,CACrC,OAASC,uBAAuB,KAAQ,+BAA+B,CAEvE,OAASC,qBAAqB,KAAQ,yBAAyB,CAG/D,GAAMC,CAAAA,gBAAgB,CAAGF,uBAAuB,CAACG,QAAQ,CAAC,CAQ1D,GAAMC,CAAAA,2BAA2B,CAC/BC,QADID,CAAAA,2BAA2B,CAC/BC,mBAA6C,CAC1C,CACH,GAAMC,CAAAA,qBAAqB,CAAIC,QAAzBD,CAAAA,qBAAqB,CAAIC,KAAiC,CAAK,CACnE,MACEV,CAAAA,KAAAA,CAAAA,aAAAA,CAACE,YAAAA,CACC,CACAS,MAAM,CAAEH,mBAA2B,CACnCI,QAAQ,CAAEF,KAAK,CAACE,QAAS,CACzBC,KAAK,CAAEH,KAAK,CAACG,KAAM,CAAA,CAClBH,KAAK,CAACI,QAAQ,CACF,CAEnB,CAAC,CAED,MAAOL,CAAAA,qBAAqB,CAC9B,CAAC,CAsBD,MAAO,IAAMM,CAAAA,kBAAkB,CAAGd,UAAU,CAC1C,SAEES,KAA6C,CAC7CM,GAA2B,CACxB,CACH,GAAQR,CAAAA,mBAAmB,CACzBE,KAAK,CADCF,mBAAmB,CAAES,6BAA6B,CACxDP,KAAK,CADsBO,6BAA6B,CAAKC,SAAAA,CAAAA,wBAAAA,CAC7DR,KAAK,CAAA,SAAA,EAOP,GAAI,EAAE,qBAAqB,EAAIQ,CAAAA,SAAS,CAAC,CAAE,CACzCA,SAAS,CAACC,mBAAmB,CAAG,CAAC,CACnC,CAEA,GAAMV,CAAAA,qBAAqB,CAAGT,KAAK,CAACoB,OAAO,CACzC,iBAAMb,CAAAA,2BAA2B,CAACC,mBAAmB,CAAC,GACtD,EAAE,CACH,CAED,GAAMa,CAAAA,gBAAgB,CACpBrB,KAAAA,CAAAA,aAAAA,CAACK,gBAAgB,CAAA,QAAA,CAAA,CACfW,GAAG,CAAEA,GAAI,CAAA,CACLE,SAAS,CAAA,CACbT,qBAAqB,CAAEA,qBAAsB,CAAA,CAAA,CAEhD,CAED,GAAIQ,6BAA6B,GAAKK,SAAS,CAAE,CAC/C,MAAOD,CAAAA,gBAAgB,CACzB,CAEA,MACErB,CAAAA,KAAAA,CAAAA,aAAAA,CAACI,qBAAqB,CAAA,CAACmB,YAAY,CAAA,IAAA,CAACC,WAAW,CAAA,IAAA,CAAA,CAC5CH,gBAAgB,CACK,CAE5B,CAAC,CACF","sourcesContent":["'use strict';\nimport type { ForwardedRef } from 'react';\nimport React, { forwardRef } from 'react';\nimport type {\n  FlatListProps,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { FlatList } from 'react-native';\nimport { AnimatedView } from './View';\nimport { createAnimatedComponent } from '../../createAnimatedComponent';\nimport type { ILayoutAnimationBuilder } from '../layoutReanimation/animationBuilder/commonTypes';\nimport { LayoutAnimationConfig } from './LayoutAnimationConfig';\nimport type { AnimatedProps, AnimatedStyle } from '../helperTypes';\n\nconst AnimatedFlatList = createAnimatedComponent(FlatList);\n\ninterface CellRendererComponentProps {\n  onLayout?: ((event: LayoutChangeEvent) => void) | undefined;\n  children: React.ReactNode;\n  style?: StyleProp<AnimatedStyle<ViewStyle>>;\n}\n\nconst createCellRendererComponent = (\n  itemLayoutAnimation?: ILayoutAnimationBuilder\n) => {\n  const CellRendererComponent = (props: CellRendererComponentProps) => {\n    return (\n      <AnimatedView\n        // TODO TYPESCRIPT This is temporary cast is to get rid of .d.ts file.\n        layout={itemLayoutAnimation as any}\n        onLayout={props.onLayout}\n        style={props.style}>\n        {props.children}\n      </AnimatedView>\n    );\n  };\n\n  return CellRendererComponent;\n};\n\ninterface ReanimatedFlatListPropsWithLayout<T>\n  extends AnimatedProps<FlatListProps<T>> {\n  /**\n   * Lets you pass layout animation directly to the FlatList item.\n   */\n  itemLayoutAnimation?: ILayoutAnimationBuilder;\n  /**\n   * Lets you skip entering and exiting animations of FlatList items when on FlatList mount or unmount.\n   */\n  skipEnteringExitingAnimations?: boolean;\n}\n\nexport type FlatListPropsWithLayout<T> = ReanimatedFlatListPropsWithLayout<T>;\n\n// Since createAnimatedComponent return type is ComponentClass that has the props of the argument,\n// but not things like NativeMethods, etc. we need to add them manually by extending the type.\ninterface AnimatedFlatListComplement<T> extends FlatList<T> {\n  getNode(): FlatList<T>;\n}\n\nexport const ReanimatedFlatList = forwardRef(\n  (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    props: ReanimatedFlatListPropsWithLayout<any>,\n    ref: ForwardedRef<FlatList>\n  ) => {\n    const { itemLayoutAnimation, skipEnteringExitingAnimations, ...restProps } =\n      props;\n\n    // Set default scrollEventThrottle, because user expects\n    // to have continuous scroll events and\n    // react-native defaults it to 50 for FlatLists.\n    // We set it to 1 so we have peace until\n    // there are 960 fps screens.\n    if (!('scrollEventThrottle' in restProps)) {\n      restProps.scrollEventThrottle = 1;\n    }\n\n    const CellRendererComponent = React.useMemo(\n      () => createCellRendererComponent(itemLayoutAnimation),\n      []\n    );\n\n    const animatedFlatList = (\n      <AnimatedFlatList\n        ref={ref}\n        {...restProps}\n        CellRendererComponent={CellRendererComponent}\n      />\n    );\n\n    if (skipEnteringExitingAnimations === undefined) {\n      return animatedFlatList;\n    }\n\n    return (\n      <LayoutAnimationConfig skipEntering skipExiting>\n        {animatedFlatList}\n      </LayoutAnimationConfig>\n    );\n  }\n);\n\nexport type ReanimatedFlatList<T> = typeof AnimatedFlatList &\n  AnimatedFlatListComplement<T>;\n"]},"metadata":{},"sourceType":"module"}