{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useContext,useEffect,useRef,useState}from\"react\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import View from\"react-native-web/dist/exports/View\";import{GooglePlacesAutocomplete}from\"react-native-google-places-autocomplete\";import{GOOGLE_PLACES_API_RESTRICTIONS}from\"./Constants\";import{TextField}from\"./TextField\";import{ThemeContext}from\"./Theme\";import{processAddressComponents}from\"./Utilities\";export var MobileAddressAutocomplete=function MobileAddressAutocomplete(_ref){var disabled=_ref.disabled,googleMapsApiKey=_ref.googleMapsApiKey,includeCounty=_ref.includeCounty,inputValue=_ref.inputValue,styles=_ref.styles,handleAddressChange=_ref.handleAddressChange,handleAutoCompleteChange=_ref.handleAutoCompleteChange,testID=_ref.testID;var _a,_b;var _useContext=useContext(ThemeContext),theme=_useContext.theme;var ref=useRef(null);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];useEffect(function(){if(!googleMapsApiKey)return;if(ref===null||ref===void 0?void 0:ref.current){ref.current.setAddressText(inputValue);}},[]);var textInputContainerStyles=Object.assign({backgroundColor:theme.white,borderColor:isFocused?theme.blue:theme.gray,borderWidth:isFocused?5:1,borderRadius:16,paddingHorizontal:isFocused?10:14,paddingVertical:isFocused?0:4},styles===null||styles===void 0?void 0:styles.textInputContainer);var textInputStyles=Object.assign({backgroundColor:theme.white,borderRadius:16,color:theme.darkGray,fontFamily:theme.primaryFont,fontSize:(_b=(_a=styles===null||styles===void 0?void 0:styles.textInput)===null||_a===void 0?void 0:_a.fontSize)!==null&&_b!==void 0?_b:14,height:40,marginBottom:0,paddingHorizontal:0,paddingVertical:4},styles===null||styles===void 0?void 0:styles.textInput);if(!googleMapsApiKey){return React.createElement(TextField,{disabled:disabled,id:\"address1\",label:\"Street Address\",testID:testID,type:\"text\",value:inputValue,onChange:function onChange(result){return handleAddressChange(result);}});}return React.createElement(TouchableOpacity,{activeOpacity:1,style:{flex:1},onPress:function onPress(){return setIsFocused(false);}},React.createElement(View,null,React.createElement(GooglePlacesAutocomplete,{ref:ref,GooglePlacesDetailsQuery:{fields:Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields).join(\",\")},disableScroll:true,fetchDetails:true,placeholder:\"Street Address\",query:{key:googleMapsApiKey,language:\"en\",components:`country:${GOOGLE_PLACES_API_RESTRICTIONS.components.country}`},styles:Object.assign({textInputContainer:Object.assign({},textInputContainerStyles),textInput:Object.assign({},textInputStyles)},styles),textInputProps:{onFocus:function onFocus(){return setIsFocused(true);},onBlur:function onBlur(){return setIsFocused(false);},onChange:function onChange(event){handleAddressChange({value:event.nativeEvent.text});}},onPress:function onPress(data){var details=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var addressComponents=details===null||details===void 0?void 0:details.address_components;var formattedAddressObject=processAddressComponents(addressComponents,{includeCounty:includeCounty});var address1=formattedAddressObject.address1;handleAutoCompleteChange(formattedAddressObject);if(ref.current){ref.current.setAddressText(address1);}setIsFocused(false);}})));};","map":{"version":3,"sources":["../src/MobileAddressAutoComplete.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { TouchableOpacity, View } from \"react-native\";\nimport { GooglePlacesAutocomplete, } from \"react-native-google-places-autocomplete\";\nimport { GOOGLE_PLACES_API_RESTRICTIONS } from \"./Constants\";\nimport { TextField } from \"./TextField\";\nimport { ThemeContext } from \"./Theme\";\nimport { processAddressComponents } from \"./Utilities\";\nexport const MobileAddressAutocomplete = ({ disabled, googleMapsApiKey, includeCounty, inputValue, \n// More on react-native-google-places-autocomplete styles here: https://github.com/FaridSafi/react-native-google-places-autocomplete#styling\nstyles, handleAddressChange, handleAutoCompleteChange, testID, }) => {\n    var _a, _b;\n    const { theme } = useContext(ThemeContext);\n    const ref = useRef(null);\n    const [isFocused, setIsFocused] = useState(false);\n    // Load the Google Maps script and initialize the autocomplete.\n    useEffect(() => {\n        if (!googleMapsApiKey)\n            return;\n        if (ref === null || ref === void 0 ? void 0 : ref.current) {\n            ref.current.setAddressText(inputValue);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const textInputContainerStyles = Object.assign({ backgroundColor: theme.white, borderColor: isFocused ? theme.blue : theme.gray, borderWidth: isFocused ? 5 : 1, borderRadius: 16, paddingHorizontal: isFocused ? 10 : 14, paddingVertical: isFocused ? 0 : 4 }, styles === null || styles === void 0 ? void 0 : styles.textInputContainer);\n    const textInputStyles = Object.assign({ backgroundColor: theme.white, borderRadius: 16, color: theme.darkGray, fontFamily: theme.primaryFont, fontSize: (_b = (_a = styles === null || styles === void 0 ? void 0 : styles.textInput) === null || _a === void 0 ? void 0 : _a.fontSize) !== null && _b !== void 0 ? _b : 14, height: 40, marginBottom: 0, paddingHorizontal: 0, paddingVertical: 4 }, styles === null || styles === void 0 ? void 0 : styles.textInput);\n    if (!googleMapsApiKey) {\n        return (React.createElement(TextField, { disabled: disabled, id: \"address1\", label: \"Street Address\", testID: testID, type: \"text\", value: inputValue, onChange: (result) => handleAddressChange(result) }));\n    }\n    return (React.createElement(TouchableOpacity, { activeOpacity: 1, style: { flex: 1 }, onPress: () => setIsFocused(false) },\n        React.createElement(View, null,\n            React.createElement(GooglePlacesAutocomplete, { ref: ref, GooglePlacesDetailsQuery: {\n                    fields: Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields).join(\",\"),\n                }, disableScroll: true, fetchDetails: true, placeholder: \"Street Address\", query: {\n                    key: googleMapsApiKey,\n                    language: \"en\",\n                    components: `country:${GOOGLE_PLACES_API_RESTRICTIONS.components.country}`,\n                }, styles: Object.assign({ textInputContainer: Object.assign({}, textInputContainerStyles), textInput: Object.assign({}, textInputStyles) }, styles), textInputProps: {\n                    onFocus: () => setIsFocused(true),\n                    onBlur: () => setIsFocused(false),\n                    onChange: (event) => {\n                        handleAddressChange({ value: event.nativeEvent.text });\n                    },\n                }, onPress: (data, details = null) => {\n                    const addressComponents = details === null || details === void 0 ? void 0 : details.address_components;\n                    const formattedAddressObject = processAddressComponents(addressComponents, {\n                        includeCounty,\n                    });\n                    const { address1 } = formattedAddressObject;\n                    handleAutoCompleteChange(formattedAddressObject);\n                    if (ref.current) {\n                        ref.current.setAddressText(address1);\n                    }\n                    setIsFocused(false);\n                } }))));\n};\n//# sourceMappingURL=MobileAddressAutoComplete.js.map"]},"metadata":{},"sourceType":"module"}