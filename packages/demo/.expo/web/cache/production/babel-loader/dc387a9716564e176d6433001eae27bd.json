{"ast":null,"code":"var _Reanimated;import{tagMessage}from'../../utils';var Reanimated;try{Reanimated=require('react-native-reanimated');}catch(e){Reanimated=undefined;}if(!((_Reanimated=Reanimated)!==null&&_Reanimated!==void 0&&_Reanimated.useSharedValue)){Reanimated=undefined;}var _worklet_5035692407728_init_data={code:\"function anonymous(){const{tagMessage}=this.__closure;console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));}\"};if(Reanimated!==undefined&&!Reanimated.setGestureState){Reanimated.setGestureState=function(){var anonymous=function anonymous(){console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));};anonymous.__closure={tagMessage:tagMessage};anonymous.__workletHash=5035692407728;anonymous.__initData=_worklet_5035692407728_init_data;return anonymous;}();}export{Reanimated};","map":{"version":3,"sources":["reanimatedWrapper.ts"],"names":["tagMessage","Reanimated","require","e","undefined","useSharedValue","setGestureState","console","warn"],"mappings":"gBAKA,OAASA,UAAT,KAA2B,aAA3B,CAMA,GAAIC,CAAAA,UAAJ,CAkBA,GAAI,CACFA,UAAU,CAAGC,OAAO,CAAC,yBAAD,CAApBD,CADF,CAEE,MAAOE,CAAP,CAAU,CAGVF,UAAU,CAAGG,SAAbH,CACD,CAED,GAAI,EAAA,CAAA,WAAA,CAACA,UAAD,IAAA,IAAA,EAAA,WAAA,GAAA,IAAA,EAAA,EAACA,WAAAA,CAAYI,cAAb,CAAJ,CAAiC,CAG/BJ,UAAU,CAAGG,SAAbH,CACD,CAAA,IAAA,gCAAA,EAAA,IAAA,uLAED,GAAIA,UAAU,GAAKG,SAAfH,EAA4B,CAACA,UAAU,CAACK,eAA5C,CAA6D,CAE3DL,UAAU,CAACK,eAAXL,CAA6B,eAAA,SAAA,UAAA,UAAA,CAAM,CAEjCM,OAAO,CAACC,IAARD,CACEP,UAAU,CACR,gGADQ,CADZO,CAAAA,CAKD,CAPDN,CAAAA,SAAAA,CAAAA,SAAAA,EAAAA,UAAAA,CAGID,UAAU,EAAA,SAAA,CAAA,aAAA,eAAA,SAAA,CAAA,UAAA,CAAA,gCAAA,QAAA,SAAA,EAHe,EAA7BC,CAQD,CAED,OAASA,UAAT","sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { tagMessage } from '../../utils';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated: {\n  default: {\n    // Slightly modified definition copied from 'react-native-reanimated'\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    createAnimatedComponent<P extends object>(\n      component: ComponentClass<P>,\n      options?: unknown\n    ): ComponentClass<P>;\n  };\n  useEvent: (\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n    events: string[],\n    rebuild: boolean\n  ) => unknown;\n  useSharedValue: <T>(value: T) => SharedValue<T>;\n  setGestureState: (handlerTag: number, newState: number) => void;\n};\n\ntry {\n  Reanimated = require('react-native-reanimated');\n} catch (e) {\n  // When 'react-native-reanimated' is not available we want to quietly continue\n  // @ts-ignore TS demands the variable to be initialized\n  Reanimated = undefined;\n}\n\nif (!Reanimated?.useSharedValue) {\n  // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n  // reset the module to undefined so we can fallback to the default implementation\n  Reanimated = undefined;\n}\n\nif (Reanimated !== undefined && !Reanimated.setGestureState) {\n  // The loaded module is Reanimated but it doesn't have the setGestureState defined\n  Reanimated.setGestureState = () => {\n    'worklet';\n    console.warn(\n      tagMessage(\n        'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n      )\n    );\n  };\n}\n\nexport { Reanimated };\n"]},"metadata":{},"sourceType":"module"}