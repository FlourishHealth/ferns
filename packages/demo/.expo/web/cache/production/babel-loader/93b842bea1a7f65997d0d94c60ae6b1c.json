{"ast":null,"code":"import React from\"react\";import{Box}from\"./Box\";import{Icon}from\"./Icon\";import{Text}from\"./Text\";export var Badge=function Badge(_ref){var title=_ref.title,_ref$position=_ref.position,position=_ref$position===void 0?\"middle\":_ref$position,_ref$type=_ref.type,type=_ref$type===void 0?\"info\":_ref$type,color=_ref.color,_ref$size=_ref.size,size=_ref$size===void 0?\"xs\":_ref$size,iconProps=_ref.iconProps,_ref$fontColor=_ref.fontColor,fontColor=_ref$fontColor===void 0?\"white\":_ref$fontColor,_ref$fontWeight=_ref.fontWeight,fontWeight=_ref$fontWeight===void 0?\"bold\":_ref$fontWeight,_ref$rounding=_ref.rounding,rounding=_ref$rounding===void 0?\"pill\":_ref$rounding;if(color&&type!==\"custom\"){console.warn('Badge color only supported when `type` is set to \"custom\".');}var badgeColor=type===\"custom\"?color:type;function renderIcon(){if(iconProps&&iconProps.name){return React.createElement(Box,{marginRight:title?1:0},React.createElement(Icon,Object.assign({color:(iconProps===null||iconProps===void 0?void 0:iconProps.color)?iconProps.color:fontColor},iconProps,{size:size})));}else{return null;}}function renderLabel(){if(!title){return null;}return React.createElement(Text,{color:fontColor,size:size,weight:fontWeight},title);}return React.createElement(Box,{alignItems:\"baseline\",alignSelf:position===\"middle\"?\"center\":position===\"bottom\"?\"end\":\"start\",color:badgeColor,direction:\"row\",height:\"min-content\",justifyContent:\"center\",marginLeft:1,marginTop:position===\"top\"?-1:0,paddingX:typeof rounding===\"number\"&&rounding>=4||rounding===\"pill\"?2:1,paddingY:1,rounding:rounding,width:\"max-content\"},renderIcon(),renderLabel());};","map":{"version":3,"sources":["../src/Badge.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { Text } from \"./Text\";\nexport const Badge = ({ title, position = \"middle\", type = \"info\", color, size = \"xs\", iconProps, fontColor = \"white\", fontWeight = \"bold\", rounding = \"pill\", }) => {\n    if (color && type !== \"custom\") {\n        console.warn('Badge color only supported when `type` is set to \"custom\".');\n    }\n    const badgeColor = type === \"custom\" ? color : type;\n    function renderIcon() {\n        if (iconProps && iconProps.name) {\n            return (React.createElement(Box, { marginRight: title ? 1 : 0 },\n                React.createElement(Icon, Object.assign({ color: (iconProps === null || iconProps === void 0 ? void 0 : iconProps.color) ? iconProps.color : fontColor }, iconProps, { size: size }))));\n        }\n        else {\n            return null;\n        }\n    }\n    function renderLabel() {\n        if (!title) {\n            return null;\n        }\n        return (React.createElement(Text, { color: fontColor, size: size, weight: fontWeight }, title));\n    }\n    return (React.createElement(Box, { alignItems: \"baseline\", alignSelf: position === \"middle\" ? \"center\" : position === \"bottom\" ? \"end\" : \"start\", color: badgeColor, direction: \"row\", height: \"min-content\", justifyContent: \"center\", marginLeft: 1, marginTop: position === \"top\" ? -1 : 0, paddingX: (typeof rounding === \"number\" && rounding >= 4) || rounding === \"pill\" ? 2 : 1, paddingY: 1, rounding: rounding, width: \"max-content\" },\n        renderIcon(),\n        renderLabel()));\n};\n//# sourceMappingURL=Badge.js.map"]},"metadata":{},"sourceType":"module"}