{"ast":null,"code":"import{isJestEnv}from'../utils';export var handlerIDToTag={};var gestures=new Map();var oldHandlers=new Map();var testIDs=new Map();var handlerTag=1;export function getNextHandlerTag(){return handlerTag++;}export function registerHandler(handlerTag,handler,testID){gestures.set(handlerTag,handler);if(isJestEnv()&&testID){testIDs.set(testID,handlerTag);}}export function registerOldGestureHandler(handlerTag,handler){oldHandlers.set(handlerTag,handler);}export function unregisterHandler(handlerTag,testID){gestures.delete(handlerTag);if(isJestEnv()&&testID){testIDs.delete(testID);}}export function findHandler(handlerTag){return gestures.get(handlerTag);}export function findOldGestureHandler(handlerTag){return oldHandlers.get(handlerTag);}export function findHandlerByTestID(testID){var handlerTag=testIDs.get(testID);if(handlerTag!==undefined){var _findHandler;return(_findHandler=findHandler(handlerTag))!==null&&_findHandler!==void 0?_findHandler:null;}return null;}","map":{"version":3,"sources":["handlersRegistry.ts"],"names":["isJestEnv","handlerIDToTag","gestures","Map","oldHandlers","testIDs","handlerTag","getNextHandlerTag","registerHandler","handler","testID","set","registerOldGestureHandler","unregisterHandler","delete","findHandler","get","findOldGestureHandler","findHandlerByTestID","undefined"],"mappings":"AAAA,OAASA,SAAT,KAA0B,UAA1B,CAIA,MAAO,IAAMC,CAAAA,cAAsC,CAAG,CAAA,CAA/C,CACP,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,GAAJ,CAAA,CAAjB,CACA,GAAMC,CAAAA,WAAW,CAAG,GAAID,CAAAA,GAAJ,CAAA,CAApB,CACA,GAAME,CAAAA,OAAO,CAAG,GAAIF,CAAAA,GAAJ,CAAA,CAAhB,CAEA,GAAIG,CAAAA,UAAU,CAAG,CAAjB,CAEA,MAAO,SAASC,CAAAA,iBAAT,CAAA,CAAqC,CAC1C,MAAOD,CAAAA,UAAU,EAAjB,CACD,CAED,MAAO,SAASE,CAAAA,eAAT,CACLF,UADK,CAELG,OAFK,CAGLC,MAHK,CAIL,CACAR,QAAQ,CAACS,GAATT,CAAaI,UAAbJ,CAAyBO,OAAzBP,CAAAA,CACA,GAAIF,SAAS,CAAA,CAAA,EAAMU,MAAnB,CAA2B,CACzBL,OAAO,CAACM,GAARN,CAAYK,MAAZL,CAAoBC,UAApBD,CAAAA,CACD,CACF,CAED,MAAO,SAASO,CAAAA,yBAAT,CACLN,UADK,CAELG,OAFK,CAGL,CACAL,WAAW,CAACO,GAAZP,CAAgBE,UAAhBF,CAA4BK,OAA5BL,CAAAA,CACD,CAED,MAAO,SAASS,CAAAA,iBAAT,CAA2BP,UAA3B,CAA+CI,MAA/C,CAAgE,CACrER,QAAQ,CAACY,MAATZ,CAAgBI,UAAhBJ,CAAAA,CACA,GAAIF,SAAS,CAAA,CAAA,EAAMU,MAAnB,CAA2B,CACzBL,OAAO,CAACS,MAART,CAAeK,MAAfL,CAAAA,CACD,CACF,CAED,MAAO,SAASU,CAAAA,WAAT,CAAqBT,UAArB,CAAyC,CAC9C,MAAOJ,CAAAA,QAAQ,CAACc,GAATd,CAAaI,UAAbJ,CAAP,CACD,CAED,MAAO,SAASe,CAAAA,qBAAT,CAA+BX,UAA/B,CAAmD,CACxD,MAAOF,CAAAA,WAAW,CAACY,GAAZZ,CAAgBE,UAAhBF,CAAP,CACD,CAED,MAAO,SAASc,CAAAA,mBAAT,CAA6BR,MAA7B,CAA6C,CAClD,GAAMJ,CAAAA,UAAU,CAAGD,OAAO,CAACW,GAARX,CAAYK,MAAZL,CAAnB,CACA,GAAIC,UAAU,GAAKa,SAAnB,CAA8B,CAAA,GAAA,CAAA,YAAA,CAC5B,MAAA,CAAA,YAAA,CAAOJ,WAAW,CAACT,UAAD,CAAlB,IAAA,IAAA,EAAA,YAAA,GAAA,IAAA,EAAA,CAAA,YAAA,CAAkC,IAAlC,CACD,CACD,MAAO,KAAP,CACD","sourcesContent":["import { isJestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nlet handlerTag = 1;\n\nexport function getNextHandlerTag(): number {\n  return handlerTag++;\n}\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"]},"metadata":{},"sourceType":"module"}