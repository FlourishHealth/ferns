{"ast":null,"code":"import React from\"react\";import{Box}from\"./Box\";import{SelectList}from\"./SelectList\";import{WithLabel}from\"./WithLabel\";var options=[{label:\"Eastern\",value:\"America/New_York\"},{label:\"Central\",value:\"America/Chicago\"},{label:\"Mountain\",value:\"America/Denver\"},{label:\"Pacific\",value:\"America/Los_Angeles\"},{label:\"Alaska\",value:\"America/Anchorage\"},{label:\"Hawaii\",value:\"Pacific/Honolulu\"},{label:\"Arizona\",value:\"America/Phoenix\"}];export var TimezonePicker=function TimezonePicker(_ref){var timezone=_ref.timezone,onChange=_ref.onChange,showLabel=_ref.showLabel,_ref$width=_ref.width,width=_ref$width===void 0?100:_ref$width;if(showLabel){return React.createElement(Box,{maxWidth:width},React.createElement(WithLabel,{label:\"Timezone\"},React.createElement(SelectList,{allowClear:true,options:options,style:{minHeight:40},value:timezone,onChange:onChange})));}else{return React.createElement(Box,{maxWidth:width},React.createElement(SelectList,{allowClear:true,options:options,style:{minHeight:40},value:timezone,onChange:onChange}));}};","map":{"version":3,"sources":["../src/TimezonePicker.tsx"],"names":[],"mappings":"AAAA,MAAO,CAAA,KAAK,KAAM,OAAO,CAEzB,OAAQ,GAAG,KAAO,OAAO,CAEzB,OAAQ,UAAU,KAAO,cAAc,CACvC,OAAQ,SAAS,KAAO,aAAa,CAGrC,GAAM,CAAA,OAAO,CAAG,CACd,CAAC,KAAK,CAAE,SAAS,CAAE,KAAK,CAAE,kBAAkB,CAAC,CAC7C,CAAC,KAAK,CAAE,SAAS,CAAE,KAAK,CAAE,iBAAiB,CAAC,CAC5C,CAAC,KAAK,CAAE,UAAU,CAAE,KAAK,CAAE,gBAAgB,CAAC,CAC5C,CAAC,KAAK,CAAE,SAAS,CAAE,KAAK,CAAE,qBAAqB,CAAC,CAChD,CAAC,KAAK,CAAE,QAAQ,CAAE,KAAK,CAAE,mBAAmB,CAAC,CAC7C,CAAC,KAAK,CAAE,QAAQ,CAAE,KAAK,CAAE,kBAAkB,CAAC,CAC5C,CAAC,KAAK,CAAE,SAAS,CAAE,KAAK,CAAE,iBAAiB,CAAC,CAC7C,CAED,MAAO,IAAM,CAAA,cAAc,CAAG,QAAjB,CAAA,cAAc,CAAA,IAAA,CAKmB,IAJ5C,CAAA,QAAQ,CAAA,IAAA,CAAR,QAAQ,CACR,QAAQ,CAAA,IAAA,CAAR,QAAQ,CACR,SAAS,CAAA,IAAA,CAAT,SAAS,CAAA,UAAA,CAAA,IAAA,CACT,KAAK,CAAL,KAAK,CAAA,UAAA,UAAG,GAAG,CAAA,UAAA,CAEX,GAAI,SAAS,CAAE,CACb,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,GAAG,CAAA,CAAC,QAAQ,CAAE,KAAK,CAAA,CAClB,KAAA,CAAA,aAAA,CAAC,SAAS,CAAA,CAAC,KAAK,CAAC,UAAU,CAAA,CACzB,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CACT,UAAU,CAAA,IAAA,CACV,OAAO,CAAE,OAAO,CAChB,KAAK,CAAE,CAAC,SAAS,CAAE,EAAE,CAAC,CACtB,KAAK,CAAE,QAAQ,CACf,QAAQ,CAAE,QAAQ,CAAA,CAClB,CACQ,CACR,CAEV,CAAC,IAAM,CACL,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,GAAG,CAAA,CAAC,QAAQ,CAAE,KAAK,CAAA,CAClB,KAAA,CAAA,aAAA,CAAC,UAAU,CAAA,CACT,UAAU,CAAA,IAAA,CACV,OAAO,CAAE,OAAO,CAChB,KAAK,CAAE,CAAC,SAAS,CAAE,EAAE,CAAC,CACtB,KAAK,CAAE,QAAQ,CACf,QAAQ,CAAE,QAAQ,CAAA,CAClB,CACE,CAEV,CACF,CAAC","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { Box } from \"./Box\";\nimport { SelectList } from \"./SelectList\";\nimport { WithLabel } from \"./WithLabel\";\n// TODO: Support world wide timezones\nconst options = [\n    { label: \"Eastern\", value: \"America/New_York\" },\n    { label: \"Central\", value: \"America/Chicago\" },\n    { label: \"Mountain\", value: \"America/Denver\" },\n    { label: \"Pacific\", value: \"America/Los_Angeles\" },\n    { label: \"Alaska\", value: \"America/Anchorage\" },\n    { label: \"Hawaii\", value: \"Pacific/Honolulu\" },\n    { label: \"Arizona\", value: \"America/Phoenix\" },\n];\nexport const TimezonePicker = ({ timezone, onChange, showLabel, width = 100, }) => {\n    if (showLabel) {\n        return (React.createElement(Box, { maxWidth: width },\n            React.createElement(WithLabel, { label: \"Timezone\" },\n                React.createElement(SelectList, { allowClear: true, options: options, style: { minHeight: 40 }, value: timezone, onChange: onChange }))));\n    }\n    else {\n        return (React.createElement(Box, { maxWidth: width },\n            React.createElement(SelectList, { allowClear: true, options: options, style: { minHeight: 40 }, value: timezone, onChange: onChange })));\n    }\n};\n//# sourceMappingURL=TimezonePicker.js.map"]},"metadata":{},"sourceType":"module"}