{"ast":null,"code":"export function getFilename(url){var _URL=new URL(url,'https://e'),pathname=_URL.pathname,searchParams=_URL.searchParams;if(false){if(searchParams.has('unstable_path')){var encodedFilePath=decodeURIComponent(searchParams.get('unstable_path'));return getBasename(encodedFilePath);}}return getBasename(pathname);}function getBasename(pathname){return pathname.substring(pathname.lastIndexOf('/')+1);}export function getFileExtension(url){var filename=getFilename(url);var dotIndex=filename.lastIndexOf('.');return dotIndex>0?filename.substring(dotIndex):'';}export function getManifestBaseUrl(manifestUrl){var urlObject=new URL(manifestUrl);var nextProtocol=urlObject.protocol;if(nextProtocol==='exp:'){nextProtocol='http:';}else if(nextProtocol==='exps:'){nextProtocol='https:';}urlObject.protocol=nextProtocol;var directory=urlObject.pathname.substring(0,urlObject.pathname.lastIndexOf('/')+1);urlObject.pathname=directory;urlObject.search='';urlObject.hash='';return urlObject.protocol!==nextProtocol?urlObject.href.replace(urlObject.protocol,nextProtocol):urlObject.href;}","map":{"version":3,"sources":["../src/AssetUris.ts"],"names":[],"mappings":"AAAA,MAAM,SAAU,CAAA,WAAW,CAAC,GAAW,CAAA,CACrC,IAAA,IAAA,CAAmC,GAAI,CAAA,GAAG,CAAC,GAAG,CAAE,WAAW,CAAC,CAApD,QAAQ,CAAA,IAAA,CAAR,QAAQ,CAAE,YAAY,CAAA,IAAA,CAAZ,YAAY,CAM9B,SAAa,CACX,GAAI,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,CAAE,CACrC,GAAM,CAAA,eAAe,CAAG,kBAAkB,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAE,CAAC,CAC9E,MAAO,CAAA,WAAW,CAAC,eAAe,CAAC,CACpC,CACF,CAED,MAAO,CAAA,WAAW,CAAC,QAAQ,CAAC,CAC9B,CAEA,QAAS,CAAA,WAAW,CAAC,QAAgB,CAAA,CACnC,MAAO,CAAA,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAC1D,CAEA,MAAM,SAAU,CAAA,gBAAgB,CAAC,GAAW,CAAA,CAC1C,GAAM,CAAA,QAAQ,CAAG,WAAW,CAAC,GAAG,CAAC,CACjC,GAAM,CAAA,QAAQ,CAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAE1C,MAAO,CAAA,QAAQ,CAAG,CAAC,CAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAG,EAAE,CACzD,CAaA,MAAM,SAAU,CAAA,kBAAkB,CAAC,WAAmB,CAAA,CACpD,GAAM,CAAA,SAAS,CAAG,GAAI,CAAA,GAAG,CAAC,WAAW,CAAC,CAEtC,GAAI,CAAA,YAAY,CAAG,SAAS,CAAC,QAAQ,CAErC,GAAI,YAAY,GAAK,MAAM,CAAE,CAC3B,YAAY,CAAG,OAAO,C,CACvB,IAAM,IAAI,YAAY,GAAK,OAAO,CAAE,CACnC,YAAY,CAAG,QAAQ,CACxB,CACD,SAAS,CAAC,QAAQ,CAAG,YAAY,CAGjC,GAAM,CAAA,SAAS,CAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAE,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAC1F,SAAS,CAAC,QAAQ,CAAG,SAAS,CAC9B,SAAS,CAAC,MAAM,CAAG,EAAE,CACrB,SAAS,CAAC,IAAI,CAAG,EAAE,CAInB,MAAO,CAAA,SAAS,CAAC,QAAQ,GAAK,YAAY,CACtC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAE,YAAY,CAAC,CACxD,SAAS,CAAC,IAAI,CACpB","sourcesContent":["export function getFilename(url: string): string {\n  const { pathname, searchParams } = new URL(url, 'https://e');\n\n  // When attached to a dev server, we use `unstable_path` to represent the file path. This ensures\n  // the file name is not canonicalized by the browser.\n  // NOTE(EvanBacon): This is technically not tied to `__DEV__` as it's possible to use this while bundling in production\n  // mode.\n  if (__DEV__) {\n    if (searchParams.has('unstable_path')) {\n      const encodedFilePath = decodeURIComponent(searchParams.get('unstable_path')!);\n      return getBasename(encodedFilePath);\n    }\n  }\n\n  return getBasename(pathname);\n}\n\nfunction getBasename(pathname: string): string {\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\n\nexport function getFileExtension(url: string): string {\n  const filename = getFilename(url);\n  const dotIndex = filename.lastIndexOf('.');\n  // Ignore leading dots for hidden files\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the\n * base URL would be https://exp.host/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\nexport function getManifestBaseUrl(manifestUrl: string): string {\n  const urlObject = new URL(manifestUrl);\n\n  let nextProtocol = urlObject.protocol;\n  // Change the scheme to http(s) if it is exp(s)\n  if (nextProtocol === 'exp:') {\n    nextProtocol = 'http:';\n  } else if (nextProtocol === 'exps:') {\n    nextProtocol = 'https:';\n  }\n  urlObject.protocol = nextProtocol;\n\n  // Trim filename, query parameters, and fragment, if any\n  const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.pathname = directory;\n  urlObject.search = '';\n  urlObject.hash = '';\n\n  // The URL spec doesn't allow for changing the protocol to `http` or `https`\n  // without a port set so instead, we'll just swap the protocol manually.\n  return urlObject.protocol !== nextProtocol\n    ? urlObject.href.replace(urlObject.protocol, nextProtocol)\n    : urlObject.href;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}