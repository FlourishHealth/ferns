{"ast":null,"code":"'use strict';import{useHandler}from'./useHandler';import{useEvent}from'./useEvent';var EVENT_TYPE={UNDETERMINED:0,FAILED:1,BEGAN:2,CANCELLED:3,ACTIVE:4,END:5};var _worklet_3049273329051_init_data={code:\"function anonymous(e){const{useWeb,EVENT_TYPE,handlers,context}=this.__closure;const event=useWeb?e.nativeEvent:e;if(event.state===EVENT_TYPE.BEGAN&&handlers.onStart){handlers.onStart(event,context);}if(event.state===EVENT_TYPE.ACTIVE&&handlers.onActive){handlers.onActive(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.END&&handlers.onEnd){handlers.onEnd(event,context);}if(event.oldState===EVENT_TYPE.BEGAN&&event.state===EVENT_TYPE.FAILED&&handlers.onFail){handlers.onFail(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.CANCELLED&&handlers.onCancel){handlers.onCancel(event,context);}if((event.oldState===EVENT_TYPE.BEGAN||event.oldState===EVENT_TYPE.ACTIVE)&&event.state!==EVENT_TYPE.BEGAN&&event.state!==EVENT_TYPE.ACTIVE&&handlers.onFinish){handlers.onFinish(event,context,event.state===EVENT_TYPE.CANCELLED||event.state===EVENT_TYPE.FAILED);}}\"};export function useAnimatedGestureHandler(handlers,dependencies){var _useHandler=useHandler(handlers,dependencies),context=_useHandler.context,doDependenciesDiffer=_useHandler.doDependenciesDiffer,useWeb=_useHandler.useWeb;var handler=function(){var anonymous=function anonymous(e){var event=useWeb?e.nativeEvent:e;if(event.state===EVENT_TYPE.BEGAN&&handlers.onStart){handlers.onStart(event,context);}if(event.state===EVENT_TYPE.ACTIVE&&handlers.onActive){handlers.onActive(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.END&&handlers.onEnd){handlers.onEnd(event,context);}if(event.oldState===EVENT_TYPE.BEGAN&&event.state===EVENT_TYPE.FAILED&&handlers.onFail){handlers.onFail(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.CANCELLED&&handlers.onCancel){handlers.onCancel(event,context);}if((event.oldState===EVENT_TYPE.BEGAN||event.oldState===EVENT_TYPE.ACTIVE)&&event.state!==EVENT_TYPE.BEGAN&&event.state!==EVENT_TYPE.ACTIVE&&handlers.onFinish){handlers.onFinish(event,context,event.state===EVENT_TYPE.CANCELLED||event.state===EVENT_TYPE.FAILED);}};anonymous.__closure={useWeb:useWeb,EVENT_TYPE:EVENT_TYPE,handlers:handlers,context:context};anonymous.__workletHash=3049273329051;anonymous.__initData=_worklet_3049273329051_init_data;return anonymous;}();if(useWeb){return handler;}return useEvent(handler,['onGestureHandlerStateChange','onGestureHandlerEvent'],doDependenciesDiffer);}","map":{"version":3,"sources":["useAnimatedGestureHandler.ts"],"names":["useHandler","useEvent","EVENT_TYPE","UNDETERMINED","FAILED","BEGAN","CANCELLED","ACTIVE","END","useAnimatedGestureHandler","handlers","dependencies","context","doDependenciesDiffer","useWeb","handler","e","event","nativeEvent","state","onStart","onActive","oldState","onEnd","onFail","onCancel","onFinish"],"mappings":"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","sourcesContent":["'use strict';\nimport type {\n  DependencyList,\n  NativeEventWrapper,\n  ReanimatedEvent,\n} from './commonTypes';\nimport { useHandler } from './useHandler';\nimport { useEvent } from './useEvent';\n\nconst EVENT_TYPE = {\n  UNDETERMINED: 0,\n  FAILED: 1,\n  BEGAN: 2,\n  CANCELLED: 3,\n  ACTIVE: 4,\n  END: 5,\n} as const;\n\ntype StateType = (typeof EVENT_TYPE)[keyof typeof EVENT_TYPE];\n\n// This type comes from React Native Gesture Handler\n// import type { PanGestureHandlerGestureEvent as DefaultEvent } from 'react-native-gesture-handler';\ntype DefaultEvent = {\n  nativeEvent: {\n    readonly handlerTag: number;\n    readonly numberOfPointers: number;\n    readonly state: (typeof EVENT_TYPE)[keyof typeof EVENT_TYPE];\n    readonly x: number;\n    readonly y: number;\n    readonly absoluteX: number;\n    readonly absoluteY: number;\n    readonly translationX: number;\n    readonly translationY: number;\n    readonly velocityX: number;\n    readonly velocityY: number;\n  };\n};\n\ninterface PropsUsedInUseAnimatedGestureHandler {\n  handlerTag?: number;\n  numberOfPointers?: number;\n  state?: StateType;\n  oldState?: StateType;\n}\n\nexport type GestureHandlerEvent<Event extends object> =\n  | ReanimatedEvent<Event>\n  | Event;\n\ntype GestureHandler<\n  Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler>,\n  Context extends Record<string, unknown>\n> = (\n  eventPayload: ReanimatedEvent<Event>,\n  context: Context,\n  isCanceledOrFailed?: boolean\n) => void;\n\nexport interface GestureHandlers<\n  Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler>,\n  Context extends Record<string, unknown>\n> {\n  [key: string]: GestureHandler<Event, Context> | undefined;\n  onStart?: GestureHandler<Event, Context>;\n  onActive?: GestureHandler<Event, Context>;\n  onEnd?: GestureHandler<Event, Context>;\n  onFail?: GestureHandler<Event, Context>;\n  onCancel?: GestureHandler<Event, Context>;\n  onFinish?: GestureHandler<Event, Context>;\n}\n\n/**\n * @deprecated useAnimatedGestureHandler is an old API which is no longer supported.\n *\n * Please check https://docs.swmansion.com/react-native-gesture-handler/docs/guides/upgrading-to-2/\n * for information about how to migrate to `react-native-gesture-handler` v2\n */\nexport function useAnimatedGestureHandler<\n  Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler> = DefaultEvent,\n  Context extends Record<string, unknown> = Record<string, unknown>\n>(handlers: GestureHandlers<Event, Context>, dependencies?: DependencyList) {\n  type WebOrNativeEvent = Event | ReanimatedEvent<Event>;\n\n  const { context, doDependenciesDiffer, useWeb } = useHandler<Event, Context>(\n    handlers,\n    dependencies\n  );\n  const handler = (e: WebOrNativeEvent) => {\n    'worklet';\n    const event = useWeb\n      ? // On Web we get events straight from React Native and they don't have\n        // the `eventName` field there. To simplify the types here we just\n        // cast it as the field was available.\n        ((e as Event).nativeEvent as ReanimatedEvent<Event>)\n      : (e as ReanimatedEvent<Event>);\n\n    if (event.state === EVENT_TYPE.BEGAN && handlers.onStart) {\n      handlers.onStart(event, context);\n    }\n    if (event.state === EVENT_TYPE.ACTIVE && handlers.onActive) {\n      handlers.onActive(event, context);\n    }\n    if (\n      event.oldState === EVENT_TYPE.ACTIVE &&\n      event.state === EVENT_TYPE.END &&\n      handlers.onEnd\n    ) {\n      handlers.onEnd(event, context);\n    }\n    if (\n      event.oldState === EVENT_TYPE.BEGAN &&\n      event.state === EVENT_TYPE.FAILED &&\n      handlers.onFail\n    ) {\n      handlers.onFail(event, context);\n    }\n    if (\n      event.oldState === EVENT_TYPE.ACTIVE &&\n      event.state === EVENT_TYPE.CANCELLED &&\n      handlers.onCancel\n    ) {\n      handlers.onCancel(event, context);\n    }\n    if (\n      (event.oldState === EVENT_TYPE.BEGAN ||\n        event.oldState === EVENT_TYPE.ACTIVE) &&\n      event.state !== EVENT_TYPE.BEGAN &&\n      event.state !== EVENT_TYPE.ACTIVE &&\n      handlers.onFinish\n    ) {\n      handlers.onFinish(\n        event,\n        context,\n        event.state === EVENT_TYPE.CANCELLED ||\n          event.state === EVENT_TYPE.FAILED\n      );\n    }\n  };\n\n  if (useWeb) {\n    return handler;\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useEvent<Event>(\n    handler,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    doDependenciesDiffer\n    // This is not correct but we want to make GH think it receives a function.\n  ) as unknown as (e: Event) => void;\n}\n"]},"metadata":{},"sourceType":"module"}