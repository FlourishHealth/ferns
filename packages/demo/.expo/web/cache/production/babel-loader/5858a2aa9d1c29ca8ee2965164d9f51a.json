{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var Vector=function(){function Vector(length){_classCallCheck(this,Vector);_defineProperty(this,\"offset\",void 0);_defineProperty(this,\"length\",void 0);_defineProperty(this,\"elements\",void 0);this.offset=0;this.length=length;this.elements=new Array(length);}_createClass(Vector,[{key:\"get\",value:function get(index){return this.elements[this.offset+index];}},{key:\"set\",value:function set(index,value){this.elements[this.offset+index]=value;}},{key:\"dot\",value:function dot(other){var result=0;for(var i=0;i<this.length;i++){result+=this.get(i)*other.get(i);}return result;}},{key:\"norm\",value:function norm(){return Math.sqrt(this.dot(this));}}],[{key:\"fromVOL\",value:function fromVOL(values,offset,length){var result=new Vector(0);result.offset=offset;result.length=length;result.elements=values;return result;}}]);return Vector;}();var Matrix=function(){function Matrix(rows,columns){_classCallCheck(this,Matrix);_defineProperty(this,\"columns\",void 0);_defineProperty(this,\"elements\",void 0);this.columns=columns;this.elements=new Array(rows*columns);}_createClass(Matrix,[{key:\"get\",value:function get(row,column){return this.elements[row*this.columns+column];}},{key:\"set\",value:function set(row,column,value){this.elements[row*this.columns+column]=value;}},{key:\"getRow\",value:function getRow(row){return Vector.fromVOL(this.elements,row*this.columns,this.columns);}}]);return Matrix;}();var PolynomialFit=_createClass(function PolynomialFit(degree){_classCallCheck(this,PolynomialFit);_defineProperty(this,\"coefficients\",void 0);this.coefficients=new Array(degree+1);});var precisionErrorTolerance=1e-10;var LeastSquareSolver=function(){function LeastSquareSolver(x,y,w){_classCallCheck(this,LeastSquareSolver);_defineProperty(this,\"x\",void 0);_defineProperty(this,\"y\",void 0);_defineProperty(this,\"w\",void 0);this.x=x;this.y=y;this.w=w;}_createClass(LeastSquareSolver,[{key:\"solve\",value:function solve(degree){if(degree>this.x.length){return null;}var result=new PolynomialFit(degree);var m=this.x.length;var n=degree+1;var a=new Matrix(n,m);for(var h=0;h<m;h++){a.set(0,h,this.w[h]);for(var i=1;i<n;i++){a.set(i,h,a.get(i-1,h)*this.x[h]);}}var q=new Matrix(n,m);var r=new Matrix(n,m);for(var j=0;j<n;j+=1){for(var _h=0;_h<m;_h+=1){q.set(j,_h,a.get(j,_h));}for(var _i=0;_i<j;_i+=1){var dot=q.getRow(j).dot(q.getRow(_i));for(var _h2=0;_h2<m;_h2+=1){q.set(j,_h2,q.get(j,_h2)-dot*q.get(_i,_h2));}}var norm=q.getRow(j).norm();if(norm<precisionErrorTolerance){return null;}var inverseNorm=1.0/norm;for(var _h3=0;_h3<m;_h3+=1){q.set(j,_h3,q.get(j,_h3)*inverseNorm);}for(var _i2=0;_i2<n;_i2+=1){r.set(j,_i2,_i2<j?0.0:q.getRow(j).dot(a.getRow(_i2)));}}var wy=new Vector(m);for(var _h4=0;_h4<m;_h4+=1){wy.set(_h4,this.y[_h4]*this.w[_h4]);}for(var _i3=n-1;_i3>=0;_i3-=1){result.coefficients[_i3]=q.getRow(_i3).dot(wy);for(var _j=n-1;_j>_i3;_j-=1){result.coefficients[_i3]-=r.get(_i3,_j)*result.coefficients[_j];}result.coefficients[_i3]/=r.get(_i3,_i3);}return result;}}]);return LeastSquareSolver;}();export{LeastSquareSolver as default};","map":{"version":3,"sources":["LeastSquareSolver.ts"],"names":["Vector","constructor","length","offset","elements","Array","fromVOL","values","result","get","index","set","value","dot","other","i","norm","Math","sqrt","Matrix","rows","columns","row","column","getRow","PolynomialFit","degree","coefficients","precisionErrorTolerance","LeastSquareSolver","x","y","w","solve","m","n","a","h","q","r","j","inverseNorm","wy"],"mappings":"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","sourcesContent":["// Implementation taken from Flutter's LeastSquareSolver\n// https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\nclass Vector {\n  private offset: number;\n  private length: number;\n  private elements: number[];\n\n  constructor(length: number) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array<number>(length);\n  }\n\n  public static fromVOL(\n    values: number[],\n    offset: number,\n    length: number\n  ): Vector {\n    const result = new Vector(0);\n\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n\n    return result;\n  }\n\n  public get(index: number): number {\n    return this.elements[this.offset + index];\n  }\n\n  public set(index: number, value: number): void {\n    this.elements[this.offset + index] = value;\n  }\n\n  public dot(other: Vector): number {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n\n  public norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\n\nclass Matrix {\n  private columns: number;\n  private elements: number[];\n\n  constructor(rows: number, columns: number) {\n    this.columns = columns;\n    this.elements = new Array<number>(rows * columns);\n  }\n\n  public get(row: number, column: number): number {\n    return this.elements[row * this.columns + column];\n  }\n\n  public set(row: number, column: number, value: number): void {\n    this.elements[row * this.columns + column] = value;\n  }\n\n  public getRow(row: number): Vector {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\n\n/// An nth degree polynomial fit to a dataset.\nclass PolynomialFit {\n  /// The polynomial coefficients of the fit.\n  ///\n  /// For each `i`, the element `coefficients[i]` is the coefficient of\n  /// the `i`-th power of the variable.\n  public coefficients: number[];\n\n  /// Creates a polynomial fit of the given degree.\n  ///\n  /// There are n + 1 coefficients in a fit of degree n.\n  constructor(degree: number) {\n    this.coefficients = new Array<number>(degree + 1);\n  }\n}\n\nconst precisionErrorTolerance = 1e-10;\n\n/// Uses the least-squares algorithm to fit a polynomial to a set of data.\nexport default class LeastSquareSolver {\n  /// The x-coordinates of each data point.\n  private x: number[];\n  /// The y-coordinates of each data point.\n  private y: number[];\n  /// The weight to use for each data point.\n  private w: number[];\n\n  /// Creates a least-squares solver.\n  ///\n  /// The [x], [y], and [w] arguments must not be null.\n  constructor(x: number[], y: number[], w: number[]) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n\n  /// Fits a polynomial of the given degree to the data points.\n  ///\n  /// When there is not enough data to fit a curve null is returned.\n  public solve(degree: number): PolynomialFit | null {\n    if (degree > this.x.length) {\n      // Not enough data to fit a curve.\n      return null;\n    }\n\n    const result = new PolynomialFit(degree);\n\n    // Shorthands for the purpose of notation equivalence to original C++ code.\n    const m = this.x.length;\n    const n = degree + 1;\n\n    // Expand the X vector to a matrix A, pre-multiplied by the weights.\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n\n    // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n    // Orthonormal basis, column-major ordVectorer.\n    const q = new Matrix(n, m);\n    // Upper triangular matrix, row-major order.\n    const r = new Matrix(n, m);\n\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        // Vectors are linearly dependent or zero so no solution.\n        return null;\n      }\n\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n\n    // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n    // We just work from bottom-right to top-left calculating B's coefficients.\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}