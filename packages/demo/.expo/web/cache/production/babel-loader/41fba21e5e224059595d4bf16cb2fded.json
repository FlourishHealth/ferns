{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError}from'expo-modules-core';import ExpoHaptics from'./ExpoHaptics';import{NotificationFeedbackType,ImpactFeedbackStyle}from'./Haptics.types';export function notificationAsync(){return _notificationAsync.apply(this,arguments);}function _notificationAsync(){_notificationAsync=_asyncToGenerator(function*(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:NotificationFeedbackType.Success;if(!ExpoHaptics.notificationAsync){throw new UnavailabilityError('Haptics','notificationAsync');}yield ExpoHaptics.notificationAsync(type);});return _notificationAsync.apply(this,arguments);}export function impactAsync(){return _impactAsync.apply(this,arguments);}function _impactAsync(){_impactAsync=_asyncToGenerator(function*(){var style=arguments.length>0&&arguments[0]!==undefined?arguments[0]:ImpactFeedbackStyle.Medium;if(!ExpoHaptics.impactAsync){throw new UnavailabilityError('Haptic','impactAsync');}yield ExpoHaptics.impactAsync(style);});return _impactAsync.apply(this,arguments);}export function selectionAsync(){return _selectionAsync.apply(this,arguments);}function _selectionAsync(){_selectionAsync=_asyncToGenerator(function*(){if(!ExpoHaptics.selectionAsync){throw new UnavailabilityError('Haptic','selectionAsync');}yield ExpoHaptics.selectionAsync();});return _selectionAsync.apply(this,arguments);}export{NotificationFeedbackType,ImpactFeedbackStyle};","map":{"version":3,"sources":["../src/Haptics.ts"],"names":[],"mappings":"uEAAA,OAAS,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAA,WAAW,KAAM,eAAe,CACvC,OAAS,wBAAwB,CAAE,mBAAmB,KAAQ,iBAAiB,CAU/E,eAAsB,CAAA,iBAAiB,CAAA,SAAA,kBAAA,CAAA,KAAA,MAAA,SAAA,GAOtC,SAAA,mBAAA,EAAA,kBAAA,CAAA,iBAAA,CAPM,WAC4D,IAAjE,CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAiC,wBAAwB,CAAC,OAAO,CAEjE,GAAI,CAAC,WAAW,CAAC,iBAAiB,CAAE,CAClC,KAAM,IAAI,CAAA,mBAAmB,CAAC,SAAS,CAAE,mBAAmB,CAAC,CAC9D,CACD,KAAM,CAAA,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAC3C,CAAC,SAAA,kBAAA,CAAA,KAAA,MAAA,SAAA,GASD,eAAsB,CAAA,WAAW,CAAA,SAAA,YAAA,CAAA,KAAA,MAAA,SAAA,GAOhC,SAAA,aAAA,EAAA,YAAA,CAAA,iBAAA,CAPM,WACkD,IAAvD,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAA6B,mBAAmB,CAAC,MAAM,CAEvD,GAAI,CAAC,WAAW,CAAC,WAAW,CAAE,CAC5B,KAAM,IAAI,CAAA,mBAAmB,CAAC,QAAQ,CAAE,aAAa,CAAC,CACvD,CACD,KAAM,CAAA,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CACtC,CAAC,SAAA,YAAA,CAAA,KAAA,MAAA,SAAA,GAOD,eAAsB,CAAA,cAAc,CAAA,SAAA,eAAA,CAAA,KAAA,MAAA,SAAA,GAKnC,SAAA,gBAAA,EAAA,eAAA,CAAA,iBAAA,CALM,WAA6B,CAClC,GAAI,CAAC,WAAW,CAAC,cAAc,CAAE,CAC/B,KAAM,IAAI,CAAA,mBAAmB,CAAC,QAAQ,CAAE,gBAAgB,CAAC,CAC1D,CACD,KAAM,CAAA,WAAW,CAAC,cAAc,CAAA,CAAE,CACpC,CAAC,SAAA,eAAA,CAAA,KAAA,MAAA,SAAA,GAED,OAAS,wBAAwB,CAAE,mBAAmB","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}