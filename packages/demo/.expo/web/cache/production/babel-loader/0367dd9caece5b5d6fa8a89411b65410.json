{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{Platform}from'expo-modules-core';import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";function getScaledAssetPath(asset){var scale=AssetSourceResolver.pickScale(asset.scales,PixelRatio.get());var scaleSuffix=scale===1?'':'@'+scale+'x';var type=!asset.type?'':`.${asset.type}`;if(false){return asset.httpServerLocation+'/'+asset.name+scaleSuffix+type;}else{return asset.httpServerLocation.replace(/\\.\\.\\//g,'_')+'/'+asset.name+scaleSuffix+type;}}var AssetSourceResolver=function(){function AssetSourceResolver(serverUrl,jsbundleUrl,asset){_classCallCheck(this,AssetSourceResolver);this.serverUrl=serverUrl||'https://expo.dev';this.jsbundleUrl=null;this.asset=asset;}_createClass(AssetSourceResolver,[{key:\"isLoadedFromServer\",value:function isLoadedFromServer(){return true;}},{key:\"isLoadedFromFileSystem\",value:function isLoadedFromFileSystem(){return false;}},{key:\"defaultAsset\",value:function defaultAsset(){return this.assetServerURL();}},{key:\"assetServerURL\",value:function assetServerURL(){var fromUrl=new URL(getScaledAssetPath(this.asset),this.serverUrl);fromUrl.searchParams.set('platform',\"web\");fromUrl.searchParams.set('hash',this.asset.hash);return this.fromSource(fromUrl.toString().replace(fromUrl.origin,''));}},{key:\"fromSource\",value:function fromSource(source){var _this$asset$width,_this$asset$height;return{__packager_asset:true,width:(_this$asset$width=this.asset.width)!=null?_this$asset$width:undefined,height:(_this$asset$height=this.asset.height)!=null?_this$asset$height:undefined,uri:source,scale:AssetSourceResolver.pickScale(this.asset.scales,PixelRatio.get())};}}],[{key:\"pickScale\",value:function pickScale(scales,deviceScale){for(var i=0;i<scales.length;i++){if(scales[i]>=deviceScale){return scales[i];}}return scales[scales.length-1]||1;}}]);return AssetSourceResolver;}();export{AssetSourceResolver as default};","map":{"version":3,"sources":["../src/AssetSourceResolver.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PackagerAsset } from '@react-native/assets-registry/registry';\nimport { Platform } from 'expo-modules-core';\nimport { PixelRatio } from 'react-native';\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean;\n  width?: number;\n  height?: number;\n  uri: string;\n  scale: number;\n};\n\n// Returns the Metro dev server-specific asset location.\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const type = !asset.type ? '' : `.${asset.type}`;\n  if (__DEV__) {\n    return asset.httpServerLocation + '/' + asset.name + scaleSuffix + type;\n  } else {\n    return asset.httpServerLocation.replace(/\\.\\.\\//g, '_') + '/' + asset.name + scaleSuffix + type;\n  }\n}\n\nexport default class AssetSourceResolver {\n  serverUrl: string;\n  // where the jsbundle is being run from\n  // NOTE(EvanBacon): Never defined on web.\n  jsbundleUrl?: string | null;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(\n    serverUrl: string | undefined | null,\n    jsbundleUrl: string | undefined | null,\n    asset: PackagerAsset\n  ) {\n    this.serverUrl = serverUrl || 'https://expo.dev';\n    this.jsbundleUrl = null;\n    this.asset = asset;\n  }\n\n  // Always true for web runtimes\n  isLoadedFromServer(): boolean {\n    return true;\n  }\n\n  // Always false for web runtimes\n  isLoadedFromFileSystem(): boolean {\n    return false;\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    return this.assetServerURL();\n  }\n\n  /**\n   * @returns absolute remote URL for the hosted asset.\n   */\n  assetServerURL(): ResolvedAssetSource {\n    const fromUrl = new URL(getScaledAssetPath(this.asset), this.serverUrl);\n    fromUrl.searchParams.set('platform', Platform.OS);\n    fromUrl.searchParams.set('hash', this.asset.hash);\n    return this.fromSource(\n      // Relative on web\n      fromUrl.toString().replace(fromUrl.origin, '')\n    );\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width ?? undefined,\n      height: this.asset.height ?? undefined,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: number[], deviceScale: number): number {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n    return scales[scales.length - 1] || 1;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}