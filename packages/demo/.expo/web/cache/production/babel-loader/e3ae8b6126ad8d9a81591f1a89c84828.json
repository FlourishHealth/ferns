{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{EventEmitter,UnavailabilityError,Platform}from'expo-modules-core';import{ClipboardPasteButton}from'./ClipboardPasteButton';import ExpoClipboard from'./ExpoClipboard';var emitter=new EventEmitter(ExpoClipboard);var onClipboardEventName='onClipboardChanged';export function getStringAsync(){return _getStringAsync.apply(this,arguments);}function _getStringAsync(){_getStringAsync=_asyncToGenerator(function*(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(!ExpoClipboard.getStringAsync){throw new UnavailabilityError('Clipboard','getStringAsync');}return yield ExpoClipboard.getStringAsync(options);});return _getStringAsync.apply(this,arguments);}export function setStringAsync(_x){return _setStringAsync.apply(this,arguments);}function _setStringAsync(){_setStringAsync=_asyncToGenerator(function*(text){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!ExpoClipboard.setStringAsync){throw new UnavailabilityError('Clipboard','setStringAsync');}return ExpoClipboard.setStringAsync(text,options);});return _setStringAsync.apply(this,arguments);}export function setString(text){if(\"web\"==='web'){return ExpoClipboard.setString(text);}else{setStringAsync(text);}}export function hasStringAsync(){if(!ExpoClipboard.hasStringAsync){throw new UnavailabilityError('Clipboard','hasStringAsync');}return ExpoClipboard.hasStringAsync();}export function getUrlAsync(){return _getUrlAsync.apply(this,arguments);}function _getUrlAsync(){_getUrlAsync=_asyncToGenerator(function*(){if(!ExpoClipboard.getUrlAsync){throw new UnavailabilityError('Clipboard','getUrlAsync');}return yield ExpoClipboard.getUrlAsync();});return _getUrlAsync.apply(this,arguments);}export function setUrlAsync(_x2){return _setUrlAsync.apply(this,arguments);}function _setUrlAsync(){_setUrlAsync=_asyncToGenerator(function*(url){if(!ExpoClipboard.setUrlAsync){throw new UnavailabilityError('Clipboard','setUrlAsync');}return ExpoClipboard.setUrlAsync(url);});return _setUrlAsync.apply(this,arguments);}export function hasUrlAsync(){return _hasUrlAsync.apply(this,arguments);}function _hasUrlAsync(){_hasUrlAsync=_asyncToGenerator(function*(){if(!ExpoClipboard.hasUrlAsync){throw new UnavailabilityError('Clipboard','hasUrlAsync');}return yield ExpoClipboard.hasUrlAsync();});return _hasUrlAsync.apply(this,arguments);}export function getImageAsync(_x3){return _getImageAsync.apply(this,arguments);}function _getImageAsync(){_getImageAsync=_asyncToGenerator(function*(options){if(!ExpoClipboard.getImageAsync){throw new UnavailabilityError('Clipboard','getImageAsync');}return yield ExpoClipboard.getImageAsync(options);});return _getImageAsync.apply(this,arguments);}export function setImageAsync(_x4){return _setImageAsync.apply(this,arguments);}function _setImageAsync(){_setImageAsync=_asyncToGenerator(function*(base64Image){if(!ExpoClipboard.setImageAsync){throw new UnavailabilityError('Clipboard','setImageAsync');}return ExpoClipboard.setImageAsync(base64Image);});return _setImageAsync.apply(this,arguments);}export function hasImageAsync(){return _hasImageAsync.apply(this,arguments);}function _hasImageAsync(){_hasImageAsync=_asyncToGenerator(function*(){if(!ExpoClipboard.hasImageAsync){throw new UnavailabilityError('Clipboard','hasImageAsync');}return ExpoClipboard.hasImageAsync();});return _hasImageAsync.apply(this,arguments);}export function addClipboardListener(listener){var listenerWrapper=function listenerWrapper(event){var wrappedEvent=_objectSpread(_objectSpread({},event),{},{get content(){console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");return'';}});listener(wrappedEvent);};return emitter.addListener(onClipboardEventName,listenerWrapper);}export function removeClipboardListener(subscription){emitter.removeSubscription(subscription);}export var isPasteButtonAvailable=\"web\"==='ios'?ExpoClipboard.isPasteButtonAvailable:false;export*from'./Clipboard.types';export{ClipboardPasteButton};","map":{"version":3,"sources":["../src/Clipboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport {\n  ClipboardImage,\n  ContentType,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n} from './Clipboard.types';\nimport { ClipboardPasteButton } from './ClipboardPasteButton';\nimport ExpoClipboard from './ExpoClipboard';\n\nconst emitter = new EventEmitter(ExpoClipboard);\n\nconst onClipboardEventName = 'onClipboardChanged';\n\ntype ClipboardEvent = {\n  /**\n   * @deprecated Returns empty string. Use [`getStringAsync()`](#getstringasyncoptions) instead to retrieve clipboard content.\n   */\n  content: string;\n  /**\n   * An array of content types that are available on the clipboard.\n   */\n  contentTypes: ContentType[];\n};\n\nexport { Subscription, ClipboardEvent };\n\n/**\n * Gets the content of the user's clipboard. Please note that calling this method on web will prompt\n * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options Options for the clipboard content to be retrieved.\n * @returns A promise that resolves to the content of the clipboard.\n */\nexport async function getStringAsync(options: GetStringOptions = {}): Promise<string> {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync(options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n *\n * @param text The string to save to the clipboard.\n * @param options Options for the clipboard content to be set.\n * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n */\nexport async function setStringAsync(\n  text: string,\n  options: SetStringOptions = {}\n): Promise<boolean> {\n  if (!ExpoClipboard.setStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'setStringAsync');\n  }\n  return ExpoClipboard.setStringAsync(text, options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n *\n * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n * the user's clipboard. On iOS and Android, nothing is returned.\n */\nexport function setString(text: string): void {\n  if (Platform.OS === 'web') {\n    // on web, we need to return legacy method,\n    // because of different return type\n    return ExpoClipboard.setString(text);\n  } else {\n    setStringAsync(text);\n  }\n}\n\n/**\n * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n */\nexport function hasStringAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasStringAsync');\n  }\n  return ExpoClipboard.hasStringAsync();\n}\n\n/**\n * Gets the URL from the user's clipboard.\n *\n * @returns A promise that fulfills to the URL in the clipboard.\n * @platform ios\n */\nexport async function getUrlAsync(): Promise<string | null> {\n  if (!ExpoClipboard.getUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'getUrlAsync');\n  }\n  return await ExpoClipboard.getUrlAsync();\n}\n\n/**\n * Sets a URL in the user's clipboard.\n *\n * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n * clipboard contains a URL and behave accordingly.\n *\n * @param url The URL to save to the clipboard.\n * @platform ios\n */\nexport async function setUrlAsync(url: string): Promise<void> {\n  if (!ExpoClipboard.setUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'setUrlAsync');\n  }\n  return ExpoClipboard.setUrlAsync(url);\n}\n\n/**\n * Returns whether the clipboard has a URL content.\n *\n * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n * @platform ios\n */\nexport async function hasUrlAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasUrlAsync');\n  }\n  return await ExpoClipboard.hasUrlAsync();\n}\n\n/**\n * Gets the image from the user's clipboard and returns it in the specified format. Please note that calling\n * this method on web will prompt the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options A `GetImageOptions` object to specify the desired format of the image.\n * @returns If there was an image in the clipboard, the promise resolves to\n * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n * Otherwise, it resolves to `null`.\n *\n * @example\n * ```tsx\n * const img = await Clipboard.getImageAsync({ format: 'png' });\n * // ...\n * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n * ```\n */\nexport async function getImageAsync(options: GetImageOptions): Promise<ClipboardImage | null> {\n  if (!ExpoClipboard.getImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'getImageAsync');\n  }\n  return await ExpoClipboard.getImageAsync(options);\n}\n\n/**\n * Sets an image in the user's clipboard.\n *\n * @param base64Image Image encoded as a base64 string, without MIME type.\n *\n * @example\n * ```tsx\n * const result = await ImagePicker.launchImageLibraryAsync({\n *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n *   base64: true,\n * });\n * await Clipboard.setImageAsync(result.base64);\n * ```\n */\nexport async function setImageAsync(base64Image: string): Promise<void> {\n  if (!ExpoClipboard.setImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'setImageAsync');\n  }\n  return ExpoClipboard.setImageAsync(base64Image);\n}\n\n/**\n * Returns whether the clipboard has an image content.\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n */\nexport async function hasImageAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasImageAsync');\n  }\n  return ExpoClipboard.hasImageAsync();\n}\n\n/**\n * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n * is a no-op on Web.\n *\n * @param listener Callback to execute when listener is triggered. The callback is provided a\n * single argument that is an object containing information about clipboard contents.\n *\n * @example\n * ```typescript\n * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n *     Clipboard.getStringAsync().then(content => {\n *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n *     });\n *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n *     alert('Yay! Clipboard contains an image');\n *   }\n * });\n * ```\n */\nexport function addClipboardListener(listener: (event: ClipboardEvent) => void): Subscription {\n  // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n  const listenerWrapper = (event: ClipboardEvent) => {\n    const wrappedEvent: ClipboardEvent = {\n      ...event,\n      get content(): string {\n        console.warn(\n          \"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\"\n        );\n        return '';\n      },\n    };\n    listener(wrappedEvent);\n  };\n  return emitter.addListener<ClipboardEvent>(onClipboardEventName, listenerWrapper);\n}\n\n/**\n * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n *\n * @param subscription The subscription to remove (created by addClipboardListener).\n *\n * @example\n * ```typescript\n * const subscription = addClipboardListener(() => {\n *   alert('Copy pasta!');\n * });\n * removeClipboardListener(subscription);\n * ```\n */\nexport function removeClipboardListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\n/**\n * Property that determines if the `ClipboardPasteButton` is available.\n *\n * This requires the users device to be using at least iOS 16.\n *\n * `true` if the component is available, and `false` otherwise.\n */\nexport const isPasteButtonAvailable: boolean =\n  Platform.OS === 'ios' ? ExpoClipboard.isPasteButtonAvailable : false;\n\nexport * from './Clipboard.types';\nexport { ClipboardPasteButton };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}