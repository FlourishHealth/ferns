{"ast":null,"code":"'use strict';export var Extrapolation=function(Extrapolation){Extrapolation[\"IDENTITY\"]=\"identity\";Extrapolation[\"CLAMP\"]=\"clamp\";Extrapolation[\"EXTEND\"]=\"extend\";return Extrapolation;}({});var _worklet_12947029934943_init_data={code:\"function getVal(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){const{Extrapolation}=this.__closure;switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}}\"};var getVal=function(){var getVal=function getVal(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}};getVal.__closure={Extrapolation:Extrapolation};getVal.__workletHash=12947029934943;getVal.__initData=_worklet_12947029934943_init_data;return getVal;}();var _worklet_9992753606300_init_data={code:\"function isExtrapolate(value){const{Extrapolation}=this.__closure;return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;}\"};var isExtrapolate=function(){var isExtrapolate=function isExtrapolate(value){return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;};isExtrapolate.__closure={Extrapolation:Extrapolation};isExtrapolate.__workletHash=9992753606300;isExtrapolate.__initData=_worklet_9992753606300_init_data;return isExtrapolate;}();var _worklet_14909900493946_init_data={code:\"function validateType(type){const{Extrapolation,isExtrapolate}=this.__closure;const extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new Error(\\\"[Reanimated] Unsupported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n        interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new Error(\\\"[Reanimated] Unsupported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n      interpolate(value, [inputRange], [outputRange], {\\\\n        extrapolateLeft: Extrapolation.CLAMP,\\\\n        extrapolateRight: Extrapolation.IDENTITY\\\\n      }})\\\");}Object.assign(extrapolationConfig,type);return extrapolationConfig;}\"};var validateType=function(){var validateType=function validateType(type){var extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new Error(`[Reanimated] Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new Error(`[Reanimated] Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);}Object.assign(extrapolationConfig,type);return extrapolationConfig;};validateType.__closure={Extrapolation:Extrapolation,isExtrapolate:isExtrapolate};validateType.__workletHash=14909900493946;validateType.__initData=_worklet_14909900493946_init_data;return validateType;}();var _worklet_13384238271996_init_data={code:\"function internalInterpolate(x,narrowedInput,extrapolationConfig){const{getVal}=this.__closure;const{leftEdgeInput:leftEdgeInput,rightEdgeInput:rightEdgeInput,leftEdgeOutput:leftEdgeOutput,rightEdgeOutput:rightEdgeOutput}=narrowedInput;if(rightEdgeInput-leftEdgeInput===0)return leftEdgeOutput;const progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);const val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);const coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;}\"};var internalInterpolate=function(){var internalInterpolate=function internalInterpolate(x,narrowedInput,extrapolationConfig){var leftEdgeInput=narrowedInput.leftEdgeInput,rightEdgeInput=narrowedInput.rightEdgeInput,leftEdgeOutput=narrowedInput.leftEdgeOutput,rightEdgeOutput=narrowedInput.rightEdgeOutput;if(rightEdgeInput-leftEdgeInput===0)return leftEdgeOutput;var progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);var val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);var coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;};internalInterpolate.__closure={getVal:getVal};internalInterpolate.__workletHash=13384238271996;internalInterpolate.__initData=_worklet_13384238271996_init_data;return internalInterpolate;}();var _worklet_12904505828514_init_data={code:\"function interpolate(x,inputRange,outputRange,type){const{validateType,internalInterpolate}=this.__closure;if(inputRange.length<2||outputRange.length<2){throw new Error('[Reanimated] Interpolation input and output ranges should contain at least two values.');}const extrapolationConfig=validateType(type);const length=inputRange.length;const narrowedInput={leftEdgeInput:inputRange[0],rightEdgeInput:inputRange[1],leftEdgeOutput:outputRange[0],rightEdgeOutput:outputRange[1]};if(length>2){if(x>inputRange[length-1]){narrowedInput.leftEdgeInput=inputRange[length-2];narrowedInput.rightEdgeInput=inputRange[length-1];narrowedInput.leftEdgeOutput=outputRange[length-2];narrowedInput.rightEdgeOutput=outputRange[length-1];}else{for(let i=1;i<length;++i){if(x<=inputRange[i]){narrowedInput.leftEdgeInput=inputRange[i-1];narrowedInput.rightEdgeInput=inputRange[i];narrowedInput.leftEdgeOutput=outputRange[i-1];narrowedInput.rightEdgeOutput=outputRange[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);}\"};export var interpolate=function(){var interpolate=function interpolate(x,inputRange,outputRange,type){if(inputRange.length<2||outputRange.length<2){throw new Error('[Reanimated] Interpolation input and output ranges should contain at least two values.');}var extrapolationConfig=validateType(type);var length=inputRange.length;var narrowedInput={leftEdgeInput:inputRange[0],rightEdgeInput:inputRange[1],leftEdgeOutput:outputRange[0],rightEdgeOutput:outputRange[1]};if(length>2){if(x>inputRange[length-1]){narrowedInput.leftEdgeInput=inputRange[length-2];narrowedInput.rightEdgeInput=inputRange[length-1];narrowedInput.leftEdgeOutput=outputRange[length-2];narrowedInput.rightEdgeOutput=outputRange[length-1];}else{for(var i=1;i<length;++i){if(x<=inputRange[i]){narrowedInput.leftEdgeInput=inputRange[i-1];narrowedInput.rightEdgeInput=inputRange[i];narrowedInput.leftEdgeOutput=outputRange[i-1];narrowedInput.rightEdgeOutput=outputRange[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);};interpolate.__closure={validateType:validateType,internalInterpolate:internalInterpolate};interpolate.__workletHash=12904505828514;interpolate.__initData=_worklet_12904505828514_init_data;return interpolate;}();var _worklet_1833118047486_init_data={code:\"function clamp(value,min,max){return Math.min(Math.max(value,min),max);}\"};export var clamp=function(){var clamp=function clamp(value,min,max){return Math.min(Math.max(value,min),max);};clamp.__closure={};clamp.__workletHash=1833118047486;clamp.__initData=_worklet_1833118047486_init_data;return clamp;}();","map":{"version":3,"sources":["interpolation.ts"],"names":["Extrapolation","getVal","type","coef","val","leftEdgeOutput","rightEdgeOutput","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","Error","Object","assign","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","interpolate","inputRange","outputRange","length","i","clamp","min","max","Math"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Extrapolation type.\n *\n * @param IDENTITY - Returns the provided value as is.\n * @param CLAMP - Clamps the value to the edge of the output range.\n * @param EXTEND - Predicts the values beyond the output range.\n */\nexport enum Extrapolation {\n  IDENTITY = 'identity',\n  CLAMP = 'clamp',\n  EXTEND = 'extend',\n}\n\n/**\n * Represents the possible values for extrapolation as a string.\n */\ntype ExtrapolationAsString = 'identity' | 'clamp' | 'extend';\n\ninterface InterpolationNarrowedInput {\n  leftEdgeInput: number;\n  rightEdgeInput: number;\n  leftEdgeOutput: number;\n  rightEdgeOutput: number;\n}\n\n/**\n * Allows to specify extrapolation for left and right edge of the interpolation.\n */\nexport interface ExtrapolationConfig {\n  extrapolateLeft?: Extrapolation | string;\n  extrapolateRight?: Extrapolation | string;\n}\n\ninterface RequiredExtrapolationConfig {\n  extrapolateLeft: Extrapolation;\n  extrapolateRight: Extrapolation;\n}\n\n/**\n * Configuration options for extrapolation.\n */\nexport type ExtrapolationType =\n  | ExtrapolationConfig\n  | Extrapolation\n  | ExtrapolationAsString\n  | undefined;\n\nfunction getVal(\n  type: Extrapolation,\n  coef: number,\n  val: number,\n  leftEdgeOutput: number,\n  rightEdgeOutput: number,\n  x: number\n): number {\n  'worklet';\n\n  switch (type) {\n    case Extrapolation.IDENTITY:\n      return x;\n    case Extrapolation.CLAMP:\n      if (coef * val < coef * leftEdgeOutput) {\n        return leftEdgeOutput;\n      }\n      return rightEdgeOutput;\n    case Extrapolation.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value: string): value is Extrapolation {\n  'worklet';\n\n  return (\n    value === Extrapolation.EXTEND ||\n    value === Extrapolation.CLAMP ||\n    value === Extrapolation.IDENTITY\n  );\n}\n\n// validates extrapolations type\n// if type is correct, converts it to ExtrapolationConfig\nfunction validateType(type: ExtrapolationType): RequiredExtrapolationConfig {\n  'worklet';\n  // initialize extrapolationConfig with default extrapolation\n  const extrapolationConfig: RequiredExtrapolationConfig = {\n    extrapolateLeft: Extrapolation.EXTEND,\n    extrapolateRight: Extrapolation.EXTEND,\n  };\n\n  if (!type) {\n    return extrapolationConfig;\n  }\n\n  if (typeof type === 'string') {\n    if (!isExtrapolate(type)) {\n      throw new Error(\n        `[Reanimated] Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`\n      );\n    }\n    extrapolationConfig.extrapolateLeft = type;\n    extrapolationConfig.extrapolateRight = type;\n    return extrapolationConfig;\n  }\n\n  // otherwise type is extrapolation config object\n  if (\n    (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\n    (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))\n  ) {\n    throw new Error(\n      `[Reanimated] Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`\n    );\n  }\n\n  Object.assign(extrapolationConfig, type);\n  return extrapolationConfig;\n}\n\nfunction internalInterpolate(\n  x: number,\n  narrowedInput: InterpolationNarrowedInput,\n  extrapolationConfig: RequiredExtrapolationConfig\n) {\n  'worklet';\n  const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } =\n    narrowedInput;\n  if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\n  const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n  const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n  const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n\n  if (coef * val < coef * leftEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateLeft,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  } else if (coef * val > coef * rightEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateRight,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  }\n\n  return val;\n}\n\n/**\n * Lets you map a value from one range to another using linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the interpolation.\n * @param outputRange - An array of numbers specifying the output range of the interpolation.\n * @param extrapolate - determines what happens when the `value` goes beyond the `input` range. Defaults to `Extrapolation.EXTEND` - {@link ExtrapolationType}.\n * @returns A mapped value within the output range.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolate\n */\nexport function interpolate(\n  x: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  type?: ExtrapolationType\n): number {\n  'worklet';\n  if (inputRange.length < 2 || outputRange.length < 2) {\n    throw new Error(\n      '[Reanimated] Interpolation input and output ranges should contain at least two values.'\n    );\n  }\n\n  const extrapolationConfig = validateType(type);\n  const length = inputRange.length;\n  const narrowedInput: InterpolationNarrowedInput = {\n    leftEdgeInput: inputRange[0],\n    rightEdgeInput: inputRange[1],\n    leftEdgeOutput: outputRange[0],\n    rightEdgeOutput: outputRange[1],\n  };\n  if (length > 2) {\n    if (x > inputRange[length - 1]) {\n      narrowedInput.leftEdgeInput = inputRange[length - 2];\n      narrowedInput.rightEdgeInput = inputRange[length - 1];\n      narrowedInput.leftEdgeOutput = outputRange[length - 2];\n      narrowedInput.rightEdgeOutput = outputRange[length - 1];\n    } else {\n      for (let i = 1; i < length; ++i) {\n        if (x <= inputRange[i]) {\n          narrowedInput.leftEdgeInput = inputRange[i - 1];\n          narrowedInput.rightEdgeInput = inputRange[i];\n          narrowedInput.leftEdgeOutput = outputRange[i - 1];\n          narrowedInput.rightEdgeOutput = outputRange[i];\n          break;\n        }\n      }\n    }\n  }\n\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}\n\n/**\n * Lets you limit a value within a specified range.\n *\n * @param value - A number that will be returned as long as the provided value is in range between `min` and `max`.\n * @param min - A number which will be returned when provided `value` is lower than `min`.\n * @param max - A number which will be returned when provided `value` is higher than `max`.\n * @returns A number between min and max bounds.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/clamp/\n */\nexport function clamp(value: number, min: number, max: number) {\n  'worklet';\n  return Math.min(Math.max(value, min), max);\n}\n"]},"metadata":{},"sourceType":"module"}