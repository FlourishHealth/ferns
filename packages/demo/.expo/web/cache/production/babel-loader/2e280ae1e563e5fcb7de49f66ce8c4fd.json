{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import GestureHandler from'./GestureHandler';import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";var DraggingGestureHandler=function(_GestureHandler){_inherits(DraggingGestureHandler,_GestureHandler);var _super=_createSuper(DraggingGestureHandler);function DraggingGestureHandler(){_classCallCheck(this,DraggingGestureHandler);return _super.apply(this,arguments);}_createClass(DraggingGestureHandler,[{key:\"shouldEnableGestureOnSetup\",get:function get(){return true;}},{key:\"transformNativeEvent\",value:function transformNativeEvent(_ref){var deltaX=_ref.deltaX,deltaY=_ref.deltaY,velocityX=_ref.velocityX,velocityY=_ref.velocityY,_ref$center=_ref.center,x=_ref$center.x,y=_ref$center.y;var rect=this.view.getBoundingClientRect();var ratio=PixelRatio.get();return{translationX:deltaX-(this.__initialX||0),translationY:deltaY-(this.__initialY||0),absoluteX:x,absoluteY:y,velocityX:velocityX*ratio,velocityY:velocityY*ratio,x:x-rect.left,y:y-rect.top};}}]);return DraggingGestureHandler;}(GestureHandler);export default DraggingGestureHandler;","map":{"version":3,"sources":["DraggingGestureHandler.ts"],"names":["GestureHandler","DraggingGestureHandler","shouldEnableGestureOnSetup","transformNativeEvent","deltaX","deltaY","velocityX","velocityY","center","x","y","rect","view","getBoundingClientRect","ratio","PixelRatio","get","translationX","__initialX","translationY","__initialY","absoluteX","absoluteY","left","top"],"mappings":"qgCAEA,MAAOA,CAAAA,cAAP,KAA+C,kBAA/C,CAAA,OAAA,UAAA,mDAGeC,CAAAA,sBAAf,UAAA,eAAA,EAAA,SAAA,CAAA,sBAAA,CAAA,eAAA,MAAA,MAAA,CAAA,YAAA,CAAA,sBAAA,WAAA,uBAAA,EAAA,eAAA,MAAA,sBAAA,SAAA,MAAA,CAAA,KAAA,MAAA,SAAA,GAAA,YAAA,CAAA,sBAAA,GAAA,GAAA,8BAAA,GAAA,CACMC,SAAAA,IAAAA,CAA6B,CAC/B,MAAO,KAAP,CACD,CAAA,GAAA,GAAA,wBAAA,KAAA,CAEDC,SAAAA,qBAAAA,IAAAA,CAMmB,IALjBC,CAAAA,MADmB,CAAA,IAAA,CACnBA,MADmB,CAEnBC,MAFmB,CAAA,IAAA,CAEnBA,MAFmB,CAGnBC,SAHmB,CAAA,IAAA,CAGnBA,SAHmB,CAInBC,SAJmB,CAAA,IAAA,CAInBA,SAJmB,CAAA,WAAA,CAAA,IAAA,CAKnBC,MAAM,CAAIC,CAAF,CAAA,WAAA,CAAEA,CAAF,CAAKC,CAAAA,CAAAA,WAAAA,CAAAA,CAAAA,CAGb,GAAMC,CAAAA,IAAI,CAAG,IAAA,CAAKC,IAAL,CAAWC,qBAAX,CAAA,CAAb,CACA,GAAMC,CAAAA,KAAK,CAAGC,UAAU,CAACC,GAAXD,CAAAA,CAAd,CACA,MAAO,CACLE,YAAY,CAAEb,MAAM,EAAI,IAAA,CAAKc,UAAL,EAAmB,CAAvB,CADf,CAELC,YAAY,CAAEd,MAAM,EAAI,IAAA,CAAKe,UAAL,EAAmB,CAAvB,CAFf,CAGLC,SAAS,CAAEZ,CAHN,CAILa,SAAS,CAAEZ,CAJN,CAKLJ,SAAS,CAAEA,SAAS,CAAGQ,KALlB,CAMLP,SAAS,CAAEA,SAAS,CAAGO,KANlB,CAOLL,CAAC,CAAEA,CAAC,CAAGE,IAAI,CAACY,IAPP,CAQLb,CAAC,CAAEA,CAAC,CAAGC,IAAI,CAACa,GARP,CAAP,CAUD,CAAA,WAAA,sBAAA,GAzB2CxB,cAA9C,EA4BA,cAAeC,CAAAA,sBAAf","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler, { HammerInputExt } from './GestureHandler';\nimport { PixelRatio } from 'react-native';\n\nabstract class DraggingGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  transformNativeEvent({\n    deltaX,\n    deltaY,\n    velocityX,\n    velocityY,\n    center: { x, y },\n  }: HammerInputExt) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const ratio = PixelRatio.get();\n    return {\n      translationX: deltaX - (this.__initialX || 0),\n      translationY: deltaY - (this.__initialY || 0),\n      absoluteX: x,\n      absoluteY: y,\n      velocityX: velocityX * ratio,\n      velocityY: velocityY * ratio,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n}\n\nexport default DraggingGestureHandler;\n"]},"metadata":{},"sourceType":"module"}