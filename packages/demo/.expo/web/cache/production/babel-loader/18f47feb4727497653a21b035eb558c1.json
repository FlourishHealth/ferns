{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useState}from\"react\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";export function useDimensions(){var _useState=useState(Dimensions.get(\"window\")),_useState2=_slicedToArray(_useState,2),dimensions=_useState2[0],setDimensions=_useState2[1];var onChange=function onChange(_ref){var window=_ref.window;setDimensions(window);};useEffect(function(){var subscription=Dimensions.addEventListener(\"change\",onChange);return function(){if(typeof(subscription===null||subscription===void 0?void 0:subscription.remove)===\"function\"){subscription.remove();}else{Dimensions.removeEventListener(\"change\",onChange);}};},[]);return dimensions;}","map":{"version":3,"sources":["useDimensions.ts"],"names":["useEffect","useState","useDimensions","dimensions","setDimensions","Dimensions","get","onChange","window","subscription","addEventListener","remove","removeEventListener"],"mappings":"iEAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAAA,OAAA,UAAA,gDAGA,MAAO,SAASC,CAAAA,aAAT,CAAA,CAAyB,CAC9B,IAAA,SAAA,CAAoCD,QAAQ,CAACI,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAD,CAA5C,CAAA,UAAA,CAAA,cAAA,CAAA,SAAA,IAAOF,UAAD,CAAA,UAAA,IAAaC,aAAb,CAAA,UAAA,IAEN,GAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAQ,CAAA,IAAA,CAA2C,IAArCC,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAClBJ,aAAa,CAACI,MAAD,CAAbJ,CACD,CAFD,CAIAJ,SAAS,CAAC,UAAM,CACd,GAAMS,CAAAA,YAAY,CAAGJ,UAAU,CAACK,gBAAXL,CAA4B,QAA5BA,CAAsCE,QAAtCF,CAArB,CAEA,MAAO,WAAM,CAEX,GAAI,OAAOI,YAAP,GAAA,IAAA,EAAOA,YAAP,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAOA,YAAY,CAAEE,MAArB,CAAA,GAAgC,UAApC,CAAgD,CAE9CF,YAAY,CAACE,MAAbF,CAAAA,CAAAA,CACD,CAHD,IAGO,CAELJ,UAAU,CAACO,mBAAXP,CAA+B,QAA/BA,CAAyCE,QAAzCF,CAAAA,CACD,CACF,CATD,CAUD,CAbQ,CAaN,EAbM,CAATL,CAeA,MAAOG,CAAAA,UAAP,CACD","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Dimensions, ScaledSize } from \"react-native\";\r\n\r\nexport function useDimensions() {\r\n  const [dimensions, setDimensions] = useState(Dimensions.get(\"window\"));\r\n\r\n  const onChange = ({ window }: { window: ScaledSize }) => {\r\n    setDimensions(window);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const subscription = Dimensions.addEventListener(\"change\", onChange);\r\n\r\n    return () => {\r\n      // @ts-expect-error - React Native >= 0.65\r\n      if (typeof subscription?.remove === \"function\") {\r\n        // @ts-expect-error\r\n        subscription.remove();\r\n      } else {\r\n        // React Native < 0.65\r\n        Dimensions.removeEventListener(\"change\", onChange);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return dimensions;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}