{"ast":null,"code":"import React,{useContext}from\"react\";import NativeText from\"react-native-web/dist/exports/Text\";import{Hyperlink}from\"./Hyperlink\";import{ThemeContext}from\"./Theme\";var fontSizes={xs:10,sm:12,md:14,lg:16};export var Text=function Text(_ref){var _ref$align=_ref.align,align=_ref$align===void 0?\"left\":_ref$align,children=_ref.children,color=_ref.color,_ref$inline=_ref.inline,inline=_ref$inline===void 0?false:_ref$inline,_ref$italic=_ref.italic,italic=_ref$italic===void 0?false:_ref$italic,overflow=_ref.overflow,_ref$size=_ref.size,size=_ref$size===void 0?\"md\":_ref$size,_ref$truncate=_ref.truncate,truncate=_ref$truncate===void 0?false:_ref$truncate,font=_ref.font,onPress=_ref.onPress,underline=_ref.underline,numberOfLines=_ref.numberOfLines,skipLinking=_ref.skipLinking,testID=_ref.testID,_ref$weight=_ref.weight,weight=_ref$weight===void 0?\"normal\":_ref$weight;var _useContext=useContext(ThemeContext),theme=_useContext.theme;function propsToStyle(){var style={};if(overflow){console.warn(\"Text overflow is deprecated. Use `truncate` to cut off the text and add ellipse, otherwise breakWord is the default.\");}var computedFont=\"primary\";if(font===\"primary\"||!font){if(weight===\"bold\"){computedFont=\"primaryBoldFont\";}else{computedFont=\"primaryFont\";}}else if(font===\"secondary\"){if(weight===\"bold\"){computedFont=\"secondaryBoldFont\";}else{computedFont=\"secondaryFont\";}}else if(font===\"button\"){computedFont=\"buttonFont\";}else if(font===\"title\"){computedFont=\"titleFont\";}else if(font===\"accent\"){if(weight===\"bold\"){computedFont=\"accentBoldFont\";}else{computedFont=\"accentFont\";}}if(weight===\"bold\"){style.fontWeight=\"bold\";}style.fontFamily=theme[computedFont];style.fontSize=fontSizes[size||\"md\"];if(align){style.textAlign=align;}if(color){style.color=theme[color];}else{style.color=theme.darkGray;}if(italic){style.fontStyle=\"italic\";}if(underline){style.textDecorationLine=\"underline\";}return style;}var lines=0;if(numberOfLines&&truncate&&numberOfLines>1){console.error(`Cannot truncate Text and have ${numberOfLines} lines`);}if(numberOfLines){lines=numberOfLines;}else if(inline||truncate){lines=1;}var inner=React.createElement(NativeText,{numberOfLines:lines,style:propsToStyle(),testID:testID,onPress:onPress},children);if(skipLinking){return inner;}else{return React.createElement(Hyperlink,{linkDefault:true,linkStyle:{textDecorationLine:\"underline\"}},inner);}};","map":{"version":3,"sources":["../src/Text.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useContext } from \"react\";\nimport { Text as NativeText } from \"react-native\";\nimport { Hyperlink } from \"./Hyperlink\";\nimport { ThemeContext } from \"./Theme\";\nconst fontSizes = {\n    xs: 10,\n    sm: 12,\n    md: 14,\n    lg: 16,\n};\nexport const Text = ({ align = \"left\", children, color, inline = false, italic = false, overflow, size = \"md\", truncate = false, font, onPress, underline, numberOfLines, skipLinking, testID, weight = \"normal\", }) => {\n    const { theme } = useContext(ThemeContext);\n    function propsToStyle() {\n        const style = {};\n        if (overflow) {\n            console.warn(\"Text overflow is deprecated. Use `truncate` to cut off the text and add ellipse, otherwise breakWord is the default.\");\n        }\n        let computedFont = \"primary\";\n        if (font === \"primary\" || !font) {\n            if (weight === \"bold\") {\n                computedFont = \"primaryBoldFont\";\n            }\n            else {\n                computedFont = \"primaryFont\";\n            }\n        }\n        else if (font === \"secondary\") {\n            if (weight === \"bold\") {\n                computedFont = \"secondaryBoldFont\";\n            }\n            else {\n                computedFont = \"secondaryFont\";\n            }\n        }\n        else if (font === \"button\") {\n            computedFont = \"buttonFont\";\n        }\n        else if (font === \"title\") {\n            computedFont = \"titleFont\";\n        }\n        else if (font === \"accent\") {\n            if (weight === \"bold\") {\n                computedFont = \"accentBoldFont\";\n            }\n            else {\n                computedFont = \"accentFont\";\n            }\n        }\n        if (weight === \"bold\") {\n            style.fontWeight = \"bold\";\n        }\n        style.fontFamily = theme[computedFont];\n        style.fontSize = fontSizes[size || \"md\"];\n        if (align) {\n            style.textAlign = align;\n        }\n        if (color) {\n            style.color = theme[color];\n        }\n        else {\n            style.color = theme.darkGray;\n        }\n        if (italic) {\n            style.fontStyle = \"italic\";\n        }\n        if (underline) {\n            style.textDecorationLine = \"underline\";\n        }\n        // TODO: might be useful for wrapping/truncating\n        // if (numberOfLines !== 1 && !inline) {\n        //   style.flexWrap = \"wrap\";\n        // }\n        return style;\n    }\n    let lines = 0;\n    if (numberOfLines && truncate && numberOfLines > 1) {\n        console.error(`Cannot truncate Text and have ${numberOfLines} lines`);\n    }\n    if (numberOfLines) {\n        lines = numberOfLines;\n    }\n    else if (inline || truncate) {\n        lines = 1;\n    }\n    const inner = (React.createElement(NativeText, { numberOfLines: lines, style: propsToStyle(), testID: testID, onPress: onPress }, children));\n    if (skipLinking) {\n        return inner;\n    }\n    else {\n        return (React.createElement(Hyperlink, { linkDefault: true, linkStyle: { textDecorationLine: \"underline\" } }, inner));\n    }\n};\n//# sourceMappingURL=Text.js.map"]},"metadata":{},"sourceType":"module"}