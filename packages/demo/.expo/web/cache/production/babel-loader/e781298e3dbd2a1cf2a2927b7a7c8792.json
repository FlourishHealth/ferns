{"ast":null,"code":"import React from'react';import{isNewWebImplementationEnabled}from'./EnableNewWebImplementation';import InteractionManager from'./web/tools/InteractionManager';import NodeManager from'./web/tools/NodeManager';import PanGestureHandler from'./web/handlers/PanGestureHandler';import TapGestureHandler from'./web/handlers/TapGestureHandler';import LongPressGestureHandler from'./web/handlers/LongPressGestureHandler';import PinchGestureHandler from'./web/handlers/PinchGestureHandler';import RotationGestureHandler from'./web/handlers/RotationGestureHandler';import FlingGestureHandler from'./web/handlers/FlingGestureHandler';import NativeViewGestureHandler from'./web/handlers/NativeViewGestureHandler';import ManualGestureHandler from'./web/handlers/ManualGestureHandler';import HoverGestureHandler from'./web/handlers/HoverGestureHandler';import*as HammerNodeManager from'./web_hammer/NodeManager';import HammerNativeViewGestureHandler from'./web_hammer/NativeViewGestureHandler';import HammerPanGestureHandler from'./web_hammer/PanGestureHandler';import HammerTapGestureHandler from'./web_hammer/TapGestureHandler';import HammerLongPressGestureHandler from'./web_hammer/LongPressGestureHandler';import HammerPinchGestureHandler from'./web_hammer/PinchGestureHandler';import HammerRotationGestureHandler from'./web_hammer/RotationGestureHandler';import HammerFlingGestureHandler from'./web_hammer/FlingGestureHandler';import{GestureHandlerWebDelegate}from'./web/tools/GestureHandlerWebDelegate';export var Gestures={NativeViewGestureHandler:NativeViewGestureHandler,PanGestureHandler:PanGestureHandler,TapGestureHandler:TapGestureHandler,LongPressGestureHandler:LongPressGestureHandler,PinchGestureHandler:PinchGestureHandler,RotationGestureHandler:RotationGestureHandler,FlingGestureHandler:FlingGestureHandler,ManualGestureHandler:ManualGestureHandler,HoverGestureHandler:HoverGestureHandler};export var HammerGestures={NativeViewGestureHandler:HammerNativeViewGestureHandler,PanGestureHandler:HammerPanGestureHandler,TapGestureHandler:HammerTapGestureHandler,LongPressGestureHandler:HammerLongPressGestureHandler,PinchGestureHandler:HammerPinchGestureHandler,RotationGestureHandler:HammerRotationGestureHandler,FlingGestureHandler:HammerFlingGestureHandler};export default{handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(isNewWebImplementationEnabled()){if(!(handlerName in Gestures)){throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);}var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass(new GestureHandlerWebDelegate()));InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),config);}else{if(!(handlerName in HammerGestures)){throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);}var _GestureClass=HammerGestures[handlerName];HammerNodeManager.createGestureHandler(handlerTag,new _GestureClass());}this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,_actionType,propsRef){if(!(newView instanceof HTMLElement||newView instanceof React.Component)){return;}if(isNewWebImplementationEnabled()){NodeManager.getHandler(handlerTag).init(newView,propsRef);}else{HammerNodeManager.getHandler(handlerTag).setView(newView,propsRef);}},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){if(isNewWebImplementationEnabled()){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),newConfig);}else{HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);}},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){if(isNewWebImplementationEnabled()){return NodeManager.getHandler(handlerTag);}else{return HammerNodeManager.getHandler(handlerTag);}},dropGestureHandler:function dropGestureHandler(handlerTag){if(isNewWebImplementationEnabled()){NodeManager.dropGestureHandler(handlerTag);}else{HammerNodeManager.dropGestureHandler(handlerTag);}},flushOperations:function flushOperations(){}};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["React","isNewWebImplementationEnabled","InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","ManualGestureHandler","HoverGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","GestureHandlerWebDelegate","Gestures","HammerGestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,OAASC,6BAAT,KAA8C,8BAA9C,CAGA,MAAOC,CAAAA,kBAAP,KAA+B,gCAA/B,CACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,kCAA9B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,kCAA9B,CACA,MAAOC,CAAAA,uBAAP,KAAoC,wCAApC,CACA,MAAOC,CAAAA,mBAAP,KAAgC,oCAAhC,CACA,MAAOC,CAAAA,sBAAP,KAAmC,uCAAnC,CACA,MAAOC,CAAAA,mBAAP,KAAgC,oCAAhC,CACA,MAAOC,CAAAA,wBAAP,KAAqC,yCAArC,CACA,MAAOC,CAAAA,oBAAP,KAAiC,qCAAjC,CACA,MAAOC,CAAAA,mBAAP,KAAgC,oCAAhC,CAGA,MAAO,GAAKC,CAAAA,iBAAZ,KAAmC,0BAAnC,CACA,MAAOC,CAAAA,8BAAP,KAA2C,uCAA3C,CACA,MAAOC,CAAAA,uBAAP,KAAoC,gCAApC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,gCAApC,CACA,MAAOC,CAAAA,6BAAP,KAA0C,sCAA1C,CACA,MAAOC,CAAAA,yBAAP,KAAsC,kCAAtC,CACA,MAAOC,CAAAA,4BAAP,KAAyC,qCAAzC,CACA,MAAOC,CAAAA,yBAAP,KAAsC,kCAAtC,CAEA,OAASC,yBAAT,KAA0C,uCAA1C,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,CACtBZ,wBADsB,CACtBA,wBADsB,CAEtBN,iBAFsB,CAEtBA,iBAFsB,CAGtBC,iBAHsB,CAGtBA,iBAHsB,CAItBC,uBAJsB,CAItBA,uBAJsB,CAKtBC,mBALsB,CAKtBA,mBALsB,CAMtBC,sBANsB,CAMtBA,sBANsB,CAOtBC,mBAPsB,CAOtBA,mBAPsB,CAQtBE,oBARsB,CAQtBA,oBARsB,CAStBC,mBAAAA,CAAAA,mBATsB,CAAjB,CAYP,MAAO,IAAMW,CAAAA,cAAc,CAAG,CAC5Bb,wBAAwB,CAAEI,8BADE,CAE5BV,iBAAiB,CAAEW,uBAFS,CAG5BV,iBAAiB,CAAEW,uBAHS,CAI5BV,uBAAuB,CAAEW,6BAJG,CAK5BV,mBAAmB,CAAEW,yBALO,CAM5BV,sBAAsB,CAAEW,4BANI,CAO5BV,mBAAmB,CAAEW,yBAPO,CAAvB,CAUP,cAAe,CACbI,oBAAoB,UAAA,qBAACC,GAAD,CAAcC,oBAAd,CAA6C,CAC/DC,OAAO,CAACC,IAARD,CAAa,wBAAbA,CAAuCF,GAAvCE,CAA4CD,oBAA5CC,CAAAA,CACD,CAHY,CAIbE,sBAAsB,UAAA,uBAAA,CAAG,CACvBF,OAAO,CAACC,IAARD,CAAa,0BAAbA,CAAAA,CACD,CANY,CAObG,oBAAoB,UAAA,qBAClBC,WADkB,CAElBC,UAFkB,CAGlBC,MAHkB,CAIlB,CACA,GAAIhC,6BAA6B,CAAA,CAAjC,CAAqC,CACnC,GAAI,EAAE8B,WAAW,GAAIT,CAAAA,QAAjB,CAAJ,CAAgC,CAC9B,KAAM,IAAIY,CAAAA,KAAJ,CACH,iCAAgCH,WAAY,2BADzC,CAAN,CAGD,CAED,GAAMI,CAAAA,YAAY,CAAGb,QAAQ,CAACS,WAAD,CAA7B,CACA5B,WAAW,CAAC2B,oBAAZ3B,CACE6B,UADF7B,CAEE,GAAIgC,CAAAA,YAAJ,CAAiB,GAAId,CAAAA,yBAAJ,CAAA,CAAjB,CAFFlB,CAAAA,CAIAD,kBAAkB,CAACkC,WAAnBlC,CAAAA,CAAAA,CAAiCmC,qBAAjCnC,CACEC,WAAW,CAACmC,UAAZnC,CAAuB6B,UAAvB7B,CADFD,CAEE+B,MAFF/B,CAAAA,CAID,CAhBD,IAgBO,CACL,GAAI,EAAE6B,WAAW,GAAIR,CAAAA,cAAjB,CAAJ,CAAsC,CACpC,KAAM,IAAIW,CAAAA,KAAJ,CACH,iCAAgCH,WAAY,2BADzC,CAAN,CAFG,CASL,GAAMI,CAAAA,aAAY,CAAGZ,cAAc,CAACQ,WAAD,CAT9B,CAWLlB,iBAAiB,CAACiB,oBAAlBjB,CAAuCmB,UAAvCnB,CAAmD,GAAIsB,CAAAA,aAAJ,CAAA,CAAnDtB,CAAAA,CACD,CAED,IAAA,CAAK0B,oBAAL,CAA0BP,UAA1B,CAAsCC,MAAtC,CAAA,CACD,CA3CY,CA4CbO,oBAAoB,UAAA,qBAClBR,UADkB,CAGlBS,OAHkB,CAIlBC,WAJkB,CAKlBC,QALkB,CAMlB,CACA,GACE,EAAEF,OAAO,WAAYG,CAAAA,WAAnBH,EAAkCA,OAAO,WAAYzC,CAAAA,KAAK,CAAC6C,SAA7D,CADF,CAEE,CACA,OACD,CAED,GAAI5C,6BAA6B,CAAA,CAAjC,CAAqC,CAEnCE,WAAW,CAACmC,UAAZnC,CAAuB6B,UAAvB7B,CAAAA,CAAmC2C,IAAnC3C,CAAwCsC,OAAxCtC,CAAiDwC,QAAjDxC,CAAAA,CACD,CAHD,IAGO,CAELU,iBAAiB,CAACyB,UAAlBzB,CAA6BmB,UAA7BnB,CAAAA,CAAyCkC,OAAzClC,CAAiD4B,OAAjD5B,CAA0D8B,QAA1D9B,CAAAA,CACD,CACF,CAhEY,CAiEb0B,oBAAoB,UAAA,qBAACP,UAAD,CAAqBgB,SAArB,CAAwC,CAC1D,GAAI/C,6BAA6B,CAAA,CAAjC,CAAqC,CACnCE,WAAW,CAACmC,UAAZnC,CAAuB6B,UAAvB7B,CAAAA,CAAmC8C,mBAAnC9C,CAAuD6C,SAAvD7C,CAAAA,CAEAD,kBAAkB,CAACkC,WAAnBlC,CAAAA,CAAAA,CAAiCmC,qBAAjCnC,CACEC,WAAW,CAACmC,UAAZnC,CAAuB6B,UAAvB7B,CADFD,CAEE8C,SAFF9C,CAAAA,CAID,CAPD,IAOO,CACLW,iBAAiB,CAACyB,UAAlBzB,CAA6BmB,UAA7BnB,CAAAA,CAAyCoC,mBAAzCpC,CAA6DmC,SAA7DnC,CAAAA,CACD,CACF,CA5EY,CA6EbqC,qBAAqB,UAAA,sBAAClB,UAAD,CAAqB,CACxC,GAAI/B,6BAA6B,CAAA,CAAjC,CAAqC,CACnC,MAAOE,CAAAA,WAAW,CAACmC,UAAZnC,CAAuB6B,UAAvB7B,CAAP,CACD,CAFD,IAEO,CACL,MAAOU,CAAAA,iBAAiB,CAACyB,UAAlBzB,CAA6BmB,UAA7BnB,CAAP,CACD,CACF,CAnFY,CAoFbsC,kBAAkB,UAAA,mBAACnB,UAAD,CAAqB,CACrC,GAAI/B,6BAA6B,CAAA,CAAjC,CAAqC,CACnCE,WAAW,CAACgD,kBAAZhD,CAA+B6B,UAA/B7B,CAAAA,CACD,CAFD,IAEO,CACLU,iBAAiB,CAACsC,kBAAlBtC,CAAqCmB,UAArCnB,CAAAA,CACD,CACF,CA1FY,CA4FbuC,eAAe,UAAA,gBAAA,CAAG,CAAE,CA5FP,CAAf","sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\nimport HoverGestureHandler from './web/handlers/HoverGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\nimport { GestureHandlerWebDelegate } from './web/tools/GestureHandlerWebDelegate';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n  HoverGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(\n        handlerTag,\n        new GestureClass(new GestureHandlerWebDelegate())\n      );\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}