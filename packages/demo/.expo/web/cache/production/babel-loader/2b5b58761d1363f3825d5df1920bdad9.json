{"ast":null,"code":"'use strict';import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{PropsAllowlists}from'./propsAllowlists';import{jsiConfigureProps}from'./reanimated2/core';function assertNoOverlapInLists(){for(var key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST){if(key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST){throw new Error(`[Reanimated] Property \\`${key}\\` was whitelisted both as UI and native prop. Please remove it from one of the lists.`);}}}function configureProps(){assertNoOverlapInLists();jsiConfigureProps(Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST),Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST));}export function addWhitelistedNativeProps(props){var oldSize=Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length;PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST=_objectSpread(_objectSpread({},PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST),props);if(oldSize!==Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length){configureProps();}}export function addWhitelistedUIProps(props){var oldSize=Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length;PropsAllowlists.UI_THREAD_PROPS_WHITELIST=_objectSpread(_objectSpread({},PropsAllowlists.UI_THREAD_PROPS_WHITELIST),props);if(oldSize!==Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length){configureProps();}}var PROCESSED_VIEW_NAMES=new Set();export function adaptViewConfig(viewConfig){var viewName=viewConfig.uiViewClassName;var props=viewConfig.validAttributes;if(!PROCESSED_VIEW_NAMES.has(viewName)){var propsToAdd={};Object.keys(props).forEach(function(key){if(!(key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST)&&!(key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST)){propsToAdd[key]=true;}});addWhitelistedUIProps(propsToAdd);PROCESSED_VIEW_NAMES.add(viewName);}}configureProps();","map":{"version":3,"sources":["ConfigHelper.ts"],"names":["PropsAllowlists","jsiConfigureProps","assertNoOverlapInLists","key","NATIVE_THREAD_PROPS_WHITELIST","UI_THREAD_PROPS_WHITELIST","Error","configureProps","Object","keys","addWhitelistedNativeProps","props","oldSize","length","addWhitelistedUIProps","PROCESSED_VIEW_NAMES","Set","adaptViewConfig","viewConfig","viewName","uiViewClassName","validAttributes","has","propsToAdd","forEach","add"],"mappings":"AAAA,YAAY,CAAA,OAAA,eAAA,sDAAA,QAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,KAAA,MAAA,CAAA,qBAAA,MAAA,CAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,MAAA,UAAA,CAAA,SAAA,MAAA,CAAA,wBAAA,CAAA,CAAA,CAAA,CAAA,EAAA,UAAA,KAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CAAA,WAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,QAAA,CAAA,OAAA,SAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,KAAA,CAAA,GAAA,OAAA,CAAA,MAAA,CAAA,CAAA,MAAA,OAAA,UAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,MAAA,CAAA,yBAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,CAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,CAAA,GAAA,OAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,UAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,CAAA,CAAA,CAAA,cAAA,CAAA,EACZ,OAASA,eAAe,KAAQ,mBAAmB,CACnD,OAASC,iBAAiB,KAAQ,oBAAoB,CACtD,QAASC,CAAAA,sBAAsBA,CAAAA,CAAG,CAChC,IAAK,GAAMC,CAAAA,GAAG,GAAIH,CAAAA,eAAe,CAACI,6BAA6B,CAAE,CAC/D,GAAID,GAAG,GAAIH,CAAAA,eAAe,CAACK,yBAAyB,CAAE,CACpD,KAAM,IAAIC,CAAAA,KAAK,CACZ,2BAA0BH,GAAI,wFAAuF,CACvH,CACH,CACF,CACF,CAEA,QAASI,CAAAA,cAAcA,CAAAA,CAAS,CAC9BL,sBAAsB,CAAA,CAAE,CACxBD,iBAAiB,CACfO,MAAM,CAACC,IAAI,CAACT,eAAe,CAACK,yBAAyB,CAAC,CACtDG,MAAM,CAACC,IAAI,CAACT,eAAe,CAACI,6BAA6B,CAAC,CAC3D,CACH,CAEA,MAAO,SAASM,CAAAA,yBAAyBA,CACvCC,KAA8B,CACxB,CACN,GAAMC,CAAAA,OAAO,CAAGJ,MAAM,CAACC,IAAI,CACzBT,eAAe,CAACI,6BAA6B,CAC9C,CAACS,MAAM,CACRb,eAAe,CAACI,6BAA6B,CAAA,aAAA,CAAA,aAAA,IACxCJ,eAAe,CAACI,6BAA6B,EAC7CO,KAAAA,CACJ,CACD,GACEC,OAAO,GACPJ,MAAM,CAACC,IAAI,CAACT,eAAe,CAACI,6BAA6B,CAAC,CAACS,MAAM,CACjE,CACAN,cAAc,CAAA,CAAE,CAClB,CACF,CAEA,MAAO,SAASO,CAAAA,qBAAqBA,CAACH,KAA8B,CAAQ,CAC1E,GAAMC,CAAAA,OAAO,CAAGJ,MAAM,CAACC,IAAI,CAACT,eAAe,CAACK,yBAAyB,CAAC,CAACQ,MAAM,CAC7Eb,eAAe,CAACK,yBAAyB,CAAA,aAAA,CAAA,aAAA,IACpCL,eAAe,CAACK,yBAAyB,EACzCM,KAAAA,CACJ,CACD,GACEC,OAAO,GAAKJ,MAAM,CAACC,IAAI,CAACT,eAAe,CAACK,yBAAyB,CAAC,CAACQ,MAAM,CACzE,CACAN,cAAc,CAAA,CAAE,CAClB,CACF,CAEA,GAAMQ,CAAAA,oBAAoB,CAAG,GAAIC,CAAAA,GAAG,CAAA,CAAE,CAWtC,MAAO,SAASC,CAAAA,eAAeA,CAACC,UAAsB,CAAQ,CAC5D,GAAMC,CAAAA,QAAQ,CAAGD,UAAU,CAACE,eAAe,CAC3C,GAAMT,CAAAA,KAAK,CAAGO,UAAU,CAACG,eAAe,CAGxC,GAAI,CAACN,oBAAoB,CAACO,GAAG,CAACH,QAAQ,CAAC,CAAE,CACvC,GAAMI,CAAAA,UAAmC,CAAG,CAAC,CAAC,CAC9Cf,MAAM,CAACC,IAAI,CAACE,KAAK,CAAC,CAACa,OAAO,CAAErB,SAAAA,GAAG,CAAK,CAGlC,GACE,EAAEA,GAAG,GAAIH,CAAAA,eAAe,CAACI,6BAA6B,CAAC,EACvD,EAAED,GAAG,GAAIH,CAAAA,eAAe,CAACK,yBAAyB,CAAC,CACnD,CACAkB,UAAU,CAACpB,GAAG,CAAC,CAAG,IAAI,CACxB,CACF,CAAC,CAAC,CACFW,qBAAqB,CAACS,UAAU,CAAC,CAEjCR,oBAAoB,CAACU,GAAG,CAACN,QAAQ,CAAC,CACpC,CACF,CAEAZ,cAAc,CAAA,CAAE","sourcesContent":["'use strict';\nimport { PropsAllowlists } from './propsAllowlists';\nimport { jsiConfigureProps } from './reanimated2/core';\nfunction assertNoOverlapInLists() {\n  for (const key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) {\n    if (key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST) {\n      throw new Error(\n        `[Reanimated] Property \\`${key}\\` was whitelisted both as UI and native prop. Please remove it from one of the lists.`\n      );\n    }\n  }\n}\n\nfunction configureProps(): void {\n  assertNoOverlapInLists();\n  jsiConfigureProps(\n    Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST),\n    Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST)\n  );\n}\n\nexport function addWhitelistedNativeProps(\n  props: Record<string, boolean>\n): void {\n  const oldSize = Object.keys(\n    PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST\n  ).length;\n  PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST = {\n    ...PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST,\n    ...props,\n  };\n  if (\n    oldSize !==\n    Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length\n  ) {\n    configureProps();\n  }\n}\n\nexport function addWhitelistedUIProps(props: Record<string, boolean>): void {\n  const oldSize = Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length;\n  PropsAllowlists.UI_THREAD_PROPS_WHITELIST = {\n    ...PropsAllowlists.UI_THREAD_PROPS_WHITELIST,\n    ...props,\n  };\n  if (\n    oldSize !== Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length\n  ) {\n    configureProps();\n  }\n}\n\nconst PROCESSED_VIEW_NAMES = new Set();\n\nexport interface ViewConfig {\n  uiViewClassName: string;\n  validAttributes: Record<string, unknown>;\n}\n/**\n * updates UI props whitelist for given view host instance\n * this will work just once for every view name\n */\n\nexport function adaptViewConfig(viewConfig: ViewConfig): void {\n  const viewName = viewConfig.uiViewClassName;\n  const props = viewConfig.validAttributes;\n\n  // update whitelist of UI props for this view name only once\n  if (!PROCESSED_VIEW_NAMES.has(viewName)) {\n    const propsToAdd: Record<string, boolean> = {};\n    Object.keys(props).forEach((key) => {\n      // we don't want to add native props as they affect layout\n      // we also skip props which repeat here\n      if (\n        !(key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) &&\n        !(key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST)\n      ) {\n        propsToAdd[key] = true;\n      }\n    });\n    addWhitelistedUIProps(propsToAdd);\n\n    PROCESSED_VIEW_NAMES.add(viewName);\n  }\n}\n\nconfigureProps();\n"]},"metadata":{},"sourceType":"module"}