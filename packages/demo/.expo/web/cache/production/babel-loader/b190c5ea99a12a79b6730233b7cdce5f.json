{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty2(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{BaseGesture,Gesture}from'./gesture';function extendRelation(currentRelation,extendWith){if(currentRelation===undefined){return _toConsumableArray(extendWith);}else{return[].concat(_toConsumableArray(currentRelation),_toConsumableArray(extendWith));}}export var ComposedGesture=function(_Gesture){_inherits(ComposedGesture,_Gesture);var _super=_createSuper(ComposedGesture);function ComposedGesture(){var _this;_classCallCheck(this,ComposedGesture);_this=_super.call(this);_defineProperty(_assertThisInitialized(_this),\"gestures\",[]);_defineProperty(_assertThisInitialized(_this),\"simultaneousGestures\",[]);_defineProperty(_assertThisInitialized(_this),\"requireGesturesToFail\",[]);for(var _len=arguments.length,gestures=new Array(_len),_key=0;_key<_len;_key++){gestures[_key]=arguments[_key];}_this.gestures=gestures;return _this;}_createClass(ComposedGesture,[{key:\"prepareSingleGesture\",value:function prepareSingleGesture(gesture,simultaneousGestures,requireGesturesToFail){if(gesture instanceof BaseGesture){var newConfig=_objectSpread({},gesture.config);newConfig.simultaneousWith=extendRelation(newConfig.simultaneousWith,simultaneousGestures);newConfig.requireToFail=extendRelation(newConfig.requireToFail,requireGesturesToFail);gesture.config=newConfig;}else if(gesture instanceof ComposedGesture){gesture.simultaneousGestures=simultaneousGestures;gesture.requireGesturesToFail=requireGesturesToFail;gesture.prepare();}}},{key:\"prepare\",value:function prepare(){for(var gesture of this.gestures){this.prepareSingleGesture(gesture,this.simultaneousGestures,this.requireGesturesToFail);}}},{key:\"initialize\",value:function initialize(){for(var gesture of this.gestures){gesture.initialize();}}},{key:\"toGestureArray\",value:function toGestureArray(){return this.gestures.flatMap(function(gesture){return gesture.toGestureArray();});}}]);return ComposedGesture;}(Gesture);export var SimultaneousGesture=function(_ComposedGesture){_inherits(SimultaneousGesture,_ComposedGesture);var _super2=_createSuper(SimultaneousGesture);function SimultaneousGesture(){_classCallCheck(this,SimultaneousGesture);return _super2.apply(this,arguments);}_createClass(SimultaneousGesture,[{key:\"prepare\",value:function prepare(){var _this2=this;var simultaneousArrays=this.gestures.map(function(gesture){return _this2.gestures.filter(function(x){return x!==gesture;}).flatMap(function(x){return x.toGestureArray();});});for(var i=0;i<this.gestures.length;i++){this.prepareSingleGesture(this.gestures[i],simultaneousArrays[i],this.requireGesturesToFail);}}}]);return SimultaneousGesture;}(ComposedGesture);export var ExclusiveGesture=function(_ComposedGesture2){_inherits(ExclusiveGesture,_ComposedGesture2);var _super3=_createSuper(ExclusiveGesture);function ExclusiveGesture(){_classCallCheck(this,ExclusiveGesture);return _super3.apply(this,arguments);}_createClass(ExclusiveGesture,[{key:\"prepare\",value:function prepare(){var gestureArrays=this.gestures.map(function(gesture){return gesture.toGestureArray();});var requireToFail=[];for(var i=0;i<this.gestures.length;i++){this.prepareSingleGesture(this.gestures[i],this.simultaneousGestures,this.requireGesturesToFail.concat(requireToFail));requireToFail=requireToFail.concat(gestureArrays[i]);}}}]);return ExclusiveGesture;}(ComposedGesture);","map":{"version":3,"sources":["gestureComposition.ts"],"names":["BaseGesture","Gesture","extendRelation","currentRelation","extendWith","undefined","ComposedGesture","constructor","gestures","prepareSingleGesture","gesture","simultaneousGestures","requireGesturesToFail","newConfig","config","simultaneousWith","requireToFail","prepare","initialize","toGestureArray","flatMap","SimultaneousGesture","simultaneousArrays","map","filter","x","i","length","ExclusiveGesture","gestureArrays","concat"],"mappings":"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","sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // this piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map((gesture) =>\n      // we take the array it's in\n      this.gestures\n        // and make a copy without it\n        .filter((x) => x !== gesture)\n        // then we flatmap the result to get list of raw (not composed) gestures\n        // this way we don't make the gestures simultaneous with themselves, which is\n        // important when the gesture is `ExclusiveGesture` - we don't want to make\n        // exclusive gestures simultaneous\n        .flatMap((x) => x.toGestureArray())\n    );\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        simultaneousArrays[i],\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      // every group gets to wait for all groups before it\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"]},"metadata":{},"sourceType":"module"}