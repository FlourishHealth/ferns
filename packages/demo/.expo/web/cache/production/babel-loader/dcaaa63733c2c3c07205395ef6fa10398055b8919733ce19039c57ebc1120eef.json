{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError}from'expo-modules-core';import ExpoHaptics from'./ExpoHaptics';import{NotificationFeedbackType,ImpactFeedbackStyle}from'./Haptics.types';export function notificationAsync(){return _notificationAsync.apply(this,arguments);}function _notificationAsync(){_notificationAsync=_asyncToGenerator(function*(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:NotificationFeedbackType.Success;if(!ExpoHaptics.notificationAsync){throw new UnavailabilityError('Haptics','notificationAsync');}yield ExpoHaptics.notificationAsync(type);});return _notificationAsync.apply(this,arguments);}export function impactAsync(){return _impactAsync.apply(this,arguments);}function _impactAsync(){_impactAsync=_asyncToGenerator(function*(){var style=arguments.length>0&&arguments[0]!==undefined?arguments[0]:ImpactFeedbackStyle.Medium;if(!ExpoHaptics.impactAsync){throw new UnavailabilityError('Haptic','impactAsync');}yield ExpoHaptics.impactAsync(style);});return _impactAsync.apply(this,arguments);}export function selectionAsync(){return _selectionAsync.apply(this,arguments);}function _selectionAsync(){_selectionAsync=_asyncToGenerator(function*(){if(!ExpoHaptics.selectionAsync){throw new UnavailabilityError('Haptic','selectionAsync');}yield ExpoHaptics.selectionAsync();});return _selectionAsync.apply(this,arguments);}export{NotificationFeedbackType,ImpactFeedbackStyle};","map":{"version":3,"names":["UnavailabilityError","ExpoHaptics","NotificationFeedbackType","ImpactFeedbackStyle","notificationAsync","_notificationAsync","apply","arguments","_asyncToGenerator","type","length","undefined","Success","impactAsync","_impactAsync","style","Medium","selectionAsync","_selectionAsync"],"sources":["/Users/josh/src/ui/node_modules/expo-haptics/src/Haptics.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"mappings":"uEAAA,OAASA,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,OAASC,wBAAwB,CAAEC,mBAAmB,KAAQ,iBAAiB,CAU/E,eAAsB,CAAAC,iBAAiBA,CAAA,SAAAC,kBAAA,CAAAC,KAAA,MAAAC,SAAA,GAOtC,SAAAF,mBAAA,EAAAA,kBAAA,CAAAG,iBAAA,CAPM,WAC4D,IAAjE,CAAAC,IAAA,CAAAF,SAAA,CAAAG,MAAA,IAAAH,SAAA,MAAAI,SAAA,CAAAJ,SAAA,IAAiCL,wBAAwB,CAACU,OAAO,CAEjE,GAAI,CAACX,WAAW,CAACG,iBAAiB,CAAE,CAClC,KAAM,IAAI,CAAAJ,mBAAmB,CAAC,SAAS,CAAE,mBAAmB,CAAC,C,CAE/D,KAAM,CAAAC,WAAW,CAACG,iBAAiB,CAACK,IAAI,CAAC,CAC3C,CAAC,SAAAJ,kBAAA,CAAAC,KAAA,MAAAC,SAAA,GASD,eAAsB,CAAAM,WAAWA,CAAA,SAAAC,YAAA,CAAAR,KAAA,MAAAC,SAAA,GAOhC,SAAAO,aAAA,EAAAA,YAAA,CAAAN,iBAAA,CAPM,WACkD,IAAvD,CAAAO,KAAA,CAAAR,SAAA,CAAAG,MAAA,IAAAH,SAAA,MAAAI,SAAA,CAAAJ,SAAA,IAA6BJ,mBAAmB,CAACa,MAAM,CAEvD,GAAI,CAACf,WAAW,CAACY,WAAW,CAAE,CAC5B,KAAM,IAAI,CAAAb,mBAAmB,CAAC,QAAQ,CAAE,aAAa,CAAC,C,CAExD,KAAM,CAAAC,WAAW,CAACY,WAAW,CAACE,KAAK,CAAC,CACtC,CAAC,SAAAD,YAAA,CAAAR,KAAA,MAAAC,SAAA,GAOD,eAAsB,CAAAU,cAAcA,CAAA,SAAAC,eAAA,CAAAZ,KAAA,MAAAC,SAAA,GAKnC,SAAAW,gBAAA,EAAAA,eAAA,CAAAV,iBAAA,CALM,WAA6B,CAClC,GAAI,CAACP,WAAW,CAACgB,cAAc,CAAE,CAC/B,KAAM,IAAI,CAAAjB,mBAAmB,CAAC,QAAQ,CAAE,gBAAgB,CAAC,C,CAE3D,KAAM,CAAAC,WAAW,CAACgB,cAAc,EAAE,CACpC,CAAC,SAAAC,eAAA,CAAAZ,KAAA,MAAAC,SAAA,GAED,OAASL,wBAAwB,CAAEC,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}