{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty2(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import UIManager from\"react-native-web/dist/exports/UIManager\";import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import deepEqual from'lodash/isEqual';import RNGestureHandlerModule from'../RNGestureHandlerModule';import{State}from'../State';import{handlerIDToTag,getNextHandlerTag,registerOldGestureHandler}from'./handlersRegistry';import{filterConfig,findNodeHandle,scheduleFlushOperations}from'./gestureHandlerCommon';import{isFabric,isJestEnv,tagMessage}from'../utils';import{ActionType}from'../ActionType';import{PressabilityDebugView}from'./PressabilityDebugView';import GestureHandlerRootViewContext from'../GestureHandlerRootViewContext';import{ghQueueMicrotask}from'../ghQueueMicrotask';var UIManagerAny=UIManager;var customGHEventsConfigFabricAndroid={topOnGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},topOnGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};var customGHEventsConfig=_objectSpread({onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}},isFabric()&&\"web\"==='android'&&customGHEventsConfigFabricAndroid);UIManagerAny.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerAny.genericDirectEventTypes),customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerConstants.genericDirectEventTypes),customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){RNGestureHandlerModule.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){RNGestureHandlerModule.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=false&&\"web\"==='android';if(DEV_ON_ANDROID){DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2({},State.UNDETERMINED,undefined),State.BEGAN,'onBegan'),State.FAILED,'onFailed'),State.CANCELLED,'onCancelled'),State.ACTIVE,'onActivated'),State.END,'onEnded');var UNRESOLVED_REFS_RETRY_LIMIT=1;export default function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){_inherits(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;_classCallCheck(this,Handler);_this=_super.call(this,props);_defineProperty(_assertThisInitialized(_this),\"handlerTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"config\",void 0);_defineProperty(_assertThisInitialized(_this),\"propsRef\",void 0);_defineProperty(_assertThisInitialized(_this),\"isMountedRef\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewNode\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"inspectorToggleListener\",void 0);_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onGestureEvent==='function'){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onHandlerStateChange==='function'){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);}var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(_assertThisInitialized(_this),\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty(_assertThisInitialized(_this),\"createGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty(_assertThisInitialized(_this),\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(\"web\"==='web'){RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,ActionType.JS_FUNCTION_OLD_API,_this.propsRef);}else{registerOldGestureHandler(_this.handlerTag,{onGestureEvent:_this.onGestureHandlerEvent,onGestureStateChange:_this.onGestureHandlerStateChange});var actionType=function(){var _this$props5,_this$props6,_this$props7;if((_this$props5=_this.props)!==null&&_this$props5!==void 0&&_this$props5.onGestureEvent&&'current'in _this.props.onGestureEvent||(_this$props6=_this.props)!==null&&_this$props6!==void 0&&_this$props6.onHandlerStateChange&&'current'in _this.props.onHandlerStateChange){return ActionType.REANIMATED_WORKLET;}else if((_this$props7=_this.props)!==null&&_this$props7!==void 0&&_this$props7.onGestureEvent&&'__isNative'in _this.props.onGestureEvent){return ActionType.NATIVE_ANIMATED_EVENT;}else{return ActionType.JS_FUNCTION_OLD_API;}}();RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,actionType);}scheduleFlushOperations();});_defineProperty(_assertThisInitialized(_this),\"updateGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.updateGestureHandler(_this.handlerTag,newConfig);scheduleFlushOperations();});_this.handlerTag=getNextHandlerTag();_this.config={};_this.propsRef=React.createRef();_this.isMountedRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(`Handler with ID \"${props.id}\" already registered`);}handlerIDToTag[props.id]=_this.handlerTag;}return _this;}_createClass(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;this.isMountedRef.current=true;if(DEV_ON_ANDROID){this.inspectorToggleListener=DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}if(hasUnresolvedRefs(props)){ghQueueMicrotask(function(){_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}this.createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config));this.attachGestureHandler(findNodeHandle(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=findNodeHandle(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update(UNRESOLVED_REFS_RETRY_LIMIT);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();this.isMountedRef.current=false;RNGestureHandlerModule.dropGestureHandler(this.handlerTag);scheduleFlushOperations();var handlerID=this.props.id;if(handlerID){delete handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(remainingTries){var _this3=this;if(!this.isMountedRef.current){return;}var props=this.props;if(hasUnresolvedRefs(props)&&remainingTries>0){ghQueueMicrotask(function(){_this3.update(remainingTries-1);});}else{var newConfig=filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);if(!deepEqual(this.config,newConfig)){this.updateGestureHandler(newConfig);}}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=_objectSpread(_objectSpread({},this.props),updates);var newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var _this$props$testID;if(false&&!this.context&&!isJestEnv()&&\"web\"!=='web'){throw new Error(name+' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');}var gestureEventHandler=this.onGestureHandlerEvent;var _this$props8=this.props,onGestureEvent=_this$props8.onGestureEvent,onGestureHandlerEvent=_this$props8.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props9=this.props,onHandlerStateChange=_this$props9.onHandlerStateChange,onGestureHandlerStateChange=_this$props9.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=null;try{child=React.Children.only(this.props.children);}catch(e){throw new Error(tagMessage(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));}var grandChildren=child.props.children;if(false&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(React.createElement(PressabilityDebugView,{key:\"pressabilityDebugView\",color:\"mediumspringgreen\",hitSlop:child.props.hitSlop}));}return React.cloneElement(child,_objectSpread(_objectSpread({ref:this.refHandler,collapsable:false},isJestEnv()?{handlerType:name,handlerTag:this.handlerTag}:{}),{},{testID:(_this$props$testID=this.props.testID)!==null&&_this$props$testID!==void 0?_this$props$testID:child.props.testID},events),grandChildren);}}]);return Handler;}(React.Component);_defineProperty(Handler,\"displayName\",name);_defineProperty(Handler,\"contextType\",GestureHandlerRootViewContext);return Handler;}","map":{"version":3,"sources":["createHandler.tsx"],"names":["React","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","registerOldGestureHandler","filterConfig","findNodeHandle","scheduleFlushOperations","isFabric","isJestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","UIManagerAny","UIManager","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","Platform","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","handlerTag","propsRef","createRef","isMountedRef","state","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","createGestureHandler","attachGestureHandler","viewNode","componentDidUpdate","viewTag","componentWillUnmount","remove","dropGestureHandler","handlerID","event","nativeEvent","onGestureEvent","onHandlerStateChange","stateEventName","eventHandler","node","child","Children","only","children","ref","newConfig","newViewTag","JS_FUNCTION_OLD_API","onGestureStateChange","actionType","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","remainingTries","setNativeProps","updates","mergedProps","render","context","gestureEventHandler","gestureStateEventHandler","events","e","grandChildren","type","displayName","toArray","push","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            (this.props?.onGestureEvent &&\n              'current' in this.props.onGestureEvent) ||\n            (this.props?.onHandlerStateChange &&\n              'current' in this.props.onHandlerStateChange)\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}