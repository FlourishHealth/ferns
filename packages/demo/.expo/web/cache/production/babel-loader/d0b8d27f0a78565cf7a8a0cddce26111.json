{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import DiscreteGestureHandler from'./DiscreteGestureHandler';import*as NodeManager from'./NodeManager';import PressGestureHandler from'./PressGestureHandler';import{TEST_MIN_IF_NOT_NAN,VEC_LEN_SQ}from'./utils';var NativeViewGestureHandler=function(_PressGestureHandler){_inherits(NativeViewGestureHandler,_PressGestureHandler);var _super=_createSuper(NativeViewGestureHandler);function NativeViewGestureHandler(){_classCallCheck(this,NativeViewGestureHandler);return _super.apply(this,arguments);}_createClass(NativeViewGestureHandler,[{key:\"isNative\",get:function get(){return true;}},{key:\"onRawEvent\",value:function onRawEvent(ev){var _this=this;_get(_getPrototypeOf(NativeViewGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(!ev.isFinal){if(TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({x:ev.deltaX,y:ev.deltaY}),10)){if(this.config.disallowInterruption){var gestures=Object.values(NodeManager.getNodes()).filter(function(gesture){var handlerTag=gesture.handlerTag,view=gesture.view,isGestureRunning=gesture.isGestureRunning;return handlerTag!==_this.handlerTag&&isGestureRunning&&gesture instanceof DiscreteGestureHandler&&view&&_this.view.contains(view);});for(var gesture of gestures){gesture.forceInvalidate(ev);}}}}}}]);return NativeViewGestureHandler;}(PressGestureHandler);export default NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","isNative","onRawEvent","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"mappings":"kjCAAA,MAAOA,CAAAA,sBAAP,KAAmC,0BAAnC,CAEA,MAAO,GAAKC,CAAAA,WAAZ,KAA6B,eAA7B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,CACA,OAASC,mBAAT,CAA8BC,UAA9B,KAAgD,SAAhD,CAAA,GAEMC,CAAAA,wBAAN,UAAA,oBAAA,EAAA,SAAA,CAAA,wBAAA,CAAA,oBAAA,MAAA,MAAA,CAAA,YAAA,CAAA,wBAAA,WAAA,yBAAA,EAAA,eAAA,MAAA,wBAAA,SAAA,MAAA,CAAA,KAAA,MAAA,SAAA,GAAA,YAAA,CAAA,wBAAA,GAAA,GAAA,YAAA,GAAA,CACMC,SAAAA,IAAAA,CAAW,CACb,MAAO,KAAP,CACD,CAAA,GAAA,GAAA,cAAA,KAAA,CAEDC,SAAAA,WAAWC,EAAD,CAAqB,KAAA,KAAA,MAC7B,IAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,SAAA,qBAAA,IAAA,MAAiBA,EAAjB,EACA,GAAI,CAACA,EAAE,CAACC,OAAR,CAAiB,CAEf,GAAIN,mBAAmB,CAACC,UAAU,CAAC,CAAEM,CAAC,CAAEF,EAAE,CAACG,MAAR,CAAgBC,CAAC,CAAEJ,EAAE,CAACK,MAAtB,CAAD,CAAX,CAA6C,EAA7C,CAAvB,CAAyE,CAEvE,GAAI,IAAA,CAAKC,MAAL,CAAYC,oBAAhB,CAAsC,CACpC,GAAMC,CAAAA,QAAQ,CAAG,MAAM,CAACC,MAAP,CAAchB,WAAW,CAACiB,QAAZjB,CAAAA,CAAd,CAAA,CAAsCkB,MAAtC,CACdC,SAAAA,OAAD,CAAa,CACX,GAAQC,CAAAA,UAAF,CAAyCD,OAA/C,CAAQC,UAAF,CAAcC,IAAd,CAAyCF,OAA/C,CAAoBE,IAAd,CAAoBC,gBAAAA,CAAqBH,OAA/C,CAA0BG,gBAAAA,CAC1B,MAEEF,CAAAA,UAAU,GAAK,KAAA,CAAKA,UAApBA,EAEAE,gBAFAF,EAIAD,OAAO,WAAYpB,CAAAA,sBAJnBqB,EAMAC,IANAD,EAQA,KAAA,CAAKC,IAAL,CAAUE,QAAV,CAAmBF,IAAnB,CAAA,CAEH,CAfc,CADmB,CAmBpC,IAAK,GAAMF,CAAAA,OAAX,GAAsBJ,CAAAA,QAAtB,CAAgC,CAE9BI,OAAO,CAACK,eAARL,CAAwBZ,EAAxBY,CAAAA,CACD,CACF,CACF,CACF,CACF,CAAA,WAAA,wBAAA,GArCoClB,mBAAvC,EAwCA,cAAeG,CAAAA,wBAAf","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  get isNative() {\n    return true;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"module"}