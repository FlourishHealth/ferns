{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var _excluded=[\"enabled\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty2(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import Hammer from'@egjs/hammerjs';import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import{State}from'../State';import{EventMap}from'./constants';import*as NodeManager from'./NodeManager';import{ghQueueMicrotask}from'../ghQueueMicrotask';var gestureInstances=0;var GestureHandler=function(){function GestureHandler(){var _this=this;_classCallCheck(this,GestureHandler);_defineProperty(this,\"handlerTag\",void 0);_defineProperty(this,\"isGestureRunning\",false);_defineProperty(this,\"view\",null);_defineProperty(this,\"hasCustomActivationCriteria\",void 0);_defineProperty(this,\"hasGestureFailed\",false);_defineProperty(this,\"hammer\",null);_defineProperty(this,\"initialRotation\",null);_defineProperty(this,\"__initialX\",void 0);_defineProperty(this,\"__initialY\",void 0);_defineProperty(this,\"config\",{});_defineProperty(this,\"previousState\",State.UNDETERMINED);_defineProperty(this,\"pendingGestures\",{});_defineProperty(this,\"oldState\",State.UNDETERMINED);_defineProperty(this,\"lastSentState\",null);_defineProperty(this,\"gestureInstance\",void 0);_defineProperty(this,\"_stillWaiting\",void 0);_defineProperty(this,\"propsRef\",void 0);_defineProperty(this,\"ref\",void 0);_defineProperty(this,\"clearSelfAsPending\",function(){if(Array.isArray(_this.config.waitFor)){for(var gesture of _this.config.waitFor){gesture.removePendingGesture(_this.id);}}});_defineProperty(this,\"destroy\",function(){_this.clearSelfAsPending();if(_this.hammer){_this.hammer.stop(false);_this.hammer.destroy();}_this.hammer=null;});_defineProperty(this,\"isPointInView\",function(_ref){var x=_ref.x,y=_ref.y;var rect=_this.view.getBoundingClientRect();var pointerInside=x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom;return pointerInside;});_defineProperty(this,\"sendEvent\",function(nativeEvent){var _this$propsRef$curren=_this.propsRef.current,onGestureHandlerEvent=_this$propsRef$curren.onGestureHandlerEvent,onGestureHandlerStateChange=_this$propsRef$curren.onGestureHandlerStateChange;var event=_this.transformEventData(nativeEvent);invokeNullableMethod(onGestureHandlerEvent,event);if(_this.lastSentState!==event.nativeEvent.state){_this.lastSentState=event.nativeEvent.state;invokeNullableMethod(onGestureHandlerStateChange,event);}});_defineProperty(this,\"sync\",function(){var gesture=_this.hammer.get(_this.name);if(!gesture)return;var enable=function enable(recognizer,inputData){if(!_this.config.enabled){_this.isGestureRunning=false;_this.hasGestureFailed=false;return false;}if(!inputData||!recognizer.options||typeof inputData.maxPointers==='undefined'){return _this.shouldEnableGestureOnSetup;}if(_this.hasGestureFailed){return false;}if(!_this.isDiscrete){if(_this.isGestureRunning){return true;}_this._stillWaiting=_this._getPendingGestures();if(_this._stillWaiting.length){for(var _gesture2 of _this._stillWaiting){if(!_gesture2.isDiscrete&&_gesture2.isGestureRunning){_this.hasGestureFailed=true;_this.isGestureRunning=false;return false;}}return false;}}if(!_this.hasCustomActivationCriteria){return true;}var deltaRotation=_this.initialRotation==null?0:inputData.rotation-_this.initialRotation;var _this$isGestureEnable=_this.isGestureEnabledForEvent(_this.getConfig(),recognizer,_objectSpread(_objectSpread({},inputData),{},{deltaRotation:deltaRotation})),success=_this$isGestureEnable.success,failed=_this$isGestureEnable.failed;if(failed){_this.simulateCancelEvent(inputData);_this.hasGestureFailed=true;}return success;};var params=_this.getHammerConfig();gesture.set(_objectSpread(_objectSpread({},params),{},{enable:enable}));});this.gestureInstance=gestureInstances++;this.hasCustomActivationCriteria=false;}_createClass(GestureHandler,[{key:\"id\",get:function get(){return`${this.name}${this.gestureInstance}`;}},{key:\"isNative\",get:function get(){return false;}},{key:\"isDiscrete\",get:function get(){return false;}},{key:\"shouldEnableGestureOnSetup\",get:function get(){throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');}},{key:\"getConfig\",value:function getConfig(){return this.config;}},{key:\"onWaitingEnded\",value:function onWaitingEnded(_gesture){}},{key:\"removePendingGesture\",value:function removePendingGesture(id){delete this.pendingGestures[id];}},{key:\"addPendingGesture\",value:function addPendingGesture(gesture){this.pendingGestures[gesture.id]=gesture;}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_config,_recognizer,_event){return{success:true};}},{key:\"NativeGestureClass\",get:function get(){throw new Error('Must override GestureHandler.NativeGestureClass');}},{key:\"updateHasCustomActivationCriteria\",value:function updateHasCustomActivationCriteria(_config){return true;}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref2){var _ref2$enabled=_ref2.enabled,enabled=_ref2$enabled===void 0?true:_ref2$enabled,props=_objectWithoutProperties(_ref2,_excluded);this.clearSelfAsPending();this.config=this.ensureConfig(_objectSpread({enabled:enabled},props));this.hasCustomActivationCriteria=this.updateHasCustomActivationCriteria(this.config);if(Array.isArray(this.config.waitFor)){for(var gesture of this.config.waitFor){gesture.addPendingGesture(this);}}if(this.hammer){this.sync();}return this.config;}},{key:\"getState\",value:function getState(type){if(type==0){return 0;}return EventMap[type];}},{key:\"transformEventData\",value:function transformEventData(event){var eventType=event.eventType,numberOfPointers=event.maxPointers;var changedTouch=event.changedPointers[0];var pointerInside=this.isPointInView({x:changedTouch.clientX,y:changedTouch.clientY});var state=this.getState(eventType);if(state!==this.previousState){this.oldState=this.previousState;this.previousState=state;}return{nativeEvent:_objectSpread(_objectSpread({numberOfPointers:numberOfPointers,state:state,pointerInside:pointerInside},this.transformNativeEvent(event)),{},{handlerTag:this.handlerTag,target:this.ref,oldState:state!==this.previousState||state!=4?this.oldState:undefined}),timeStamp:Date.now()};}},{key:\"transformNativeEvent\",value:function transformNativeEvent(_event){return{};}},{key:\"cancelPendingGestures\",value:function cancelPendingGestures(event){for(var gesture of Object.values(this.pendingGestures)){if(gesture&&gesture.isGestureRunning){gesture.hasGestureFailed=true;gesture.cancelEvent(event);}}}},{key:\"notifyPendingGestures\",value:function notifyPendingGestures(){for(var gesture of Object.values(this.pendingGestures)){if(gesture){gesture.onWaitingEnded(this);}}}},{key:\"onGestureEnded\",value:function onGestureEnded(event){this.isGestureRunning=false;this.cancelPendingGestures(event);}},{key:\"forceInvalidate\",value:function forceInvalidate(event){if(this.isGestureRunning){this.hasGestureFailed=true;this.cancelEvent(event);}}},{key:\"cancelEvent\",value:function cancelEvent(event){this.notifyPendingGestures();this.sendEvent(_objectSpread(_objectSpread({},event),{},{eventType:Hammer.INPUT_CANCEL,isFinal:true}));this.onGestureEnded(event);}},{key:\"onRawEvent\",value:function onRawEvent(_ref3){var isFirst=_ref3.isFirst;if(isFirst){this.hasGestureFailed=false;}}},{key:\"shouldUseTouchEvents\",value:function shouldUseTouchEvents(config){var _config$simultaneousH,_config$simultaneousH2;return(_config$simultaneousH=(_config$simultaneousH2=config.simultaneousHandlers)===null||_config$simultaneousH2===void 0?void 0:_config$simultaneousH2.some(function(handler){return handler.isNative;}))!==null&&_config$simultaneousH!==void 0?_config$simultaneousH:false;}},{key:\"setView\",value:function setView(ref,propsRef){var _this2=this;if(ref==null){this.destroy();this.view=null;return;}var SUPPORTS_TOUCH=('ontouchstart'in window);this.propsRef=propsRef;this.ref=ref;this.view=findNodeHandle(ref);this.hammer=SUPPORTS_TOUCH&&this.shouldUseTouchEvents(this.config)?new Hammer.Manager(this.view,{inputClass:Hammer.TouchInput}):new Hammer.Manager(this.view);this.oldState=State.UNDETERMINED;this.previousState=State.UNDETERMINED;this.lastSentState=null;var NativeGestureClass=this.NativeGestureClass;var gesture=new NativeGestureClass(this.getHammerConfig());this.hammer.add(gesture);this.hammer.on('hammer.input',function(ev){if(!_this2.config.enabled){_this2.hasGestureFailed=false;_this2.isGestureRunning=false;return;}_this2.onRawEvent(ev);if(_this2.initialRotation===null&&ev.rotation!==0){_this2.initialRotation=ev.rotation;}if(ev.isFinal){setTimeout(function(){_this2.initialRotation=null;_this2.hasGestureFailed=false;});}});this.setupEvents();this.sync();}},{key:\"setupEvents\",value:function setupEvents(){var _this3=this;if(!this.isDiscrete){this.hammer.on(`${this.name}start`,function(event){return _this3.onStart(event);});this.hammer.on(`${this.name}end ${this.name}cancel`,function(event){_this3.onGestureEnded(event);});}this.hammer.on(this.name,function(ev){return _this3.onGestureActivated(ev);});}},{key:\"onStart\",value:function onStart(_ref4){var deltaX=_ref4.deltaX,deltaY=_ref4.deltaY,rotation=_ref4.rotation;this.oldState=State.UNDETERMINED;this.previousState=State.UNDETERMINED;this.lastSentState=null;this.isGestureRunning=true;this.__initialX=deltaX;this.__initialY=deltaY;this.initialRotation=rotation;}},{key:\"onGestureActivated\",value:function onGestureActivated(ev){this.sendEvent(ev);}},{key:\"onSuccess\",value:function onSuccess(){}},{key:\"_getPendingGestures\",value:function _getPendingGestures(){if(Array.isArray(this.config.waitFor)&&this.config.waitFor.length){var stillWaiting=this.config.waitFor.filter(function(_ref5){var hasGestureFailed=_ref5.hasGestureFailed;return hasGestureFailed===false;});return stillWaiting;}return[];}},{key:\"getHammerConfig\",value:function getHammerConfig(){var pointers=this.config.minPointers===this.config.maxPointers?this.config.minPointers:0;return{pointers:pointers};}},{key:\"simulateCancelEvent\",value:function simulateCancelEvent(_inputData){}},{key:\"ensureConfig\",value:function ensureConfig(config){var _this4=this;var props=_objectSpread({},config);if('minDist'in config){props.minDist=config.minDist;props.minDistSq=props.minDist*props.minDist;}if('minVelocity'in config){props.minVelocity=config.minVelocity;props.minVelocitySq=props.minVelocity*props.minVelocity;}if('maxDist'in config){props.maxDist=config.maxDist;props.maxDistSq=config.maxDist*config.maxDist;}if('waitFor'in config){props.waitFor=asArray(config.waitFor).map(function(_ref6){var handlerTag=_ref6.handlerTag;return NodeManager.getHandler(handlerTag);}).filter(function(v){return v;});}else{props.waitFor=null;}if('simultaneousHandlers'in config){var shouldUseTouchEvents=this.shouldUseTouchEvents(this.config);props.simultaneousHandlers=asArray(config.simultaneousHandlers).map(function(handler){if(typeof handler==='number'){return NodeManager.getHandler(handler);}else{return NodeManager.getHandler(handler.handlerTag);}}).filter(function(v){return v;});if(shouldUseTouchEvents!==this.shouldUseTouchEvents(props)){ghQueueMicrotask(function(){_this4.destroy();_this4.setView(_this4.ref,_this4.propsRef);});}}else{props.simultaneousHandlers=null;}var configProps=['minPointers','maxPointers','minDist','maxDist','maxDistSq','minVelocitySq','minDistSq','minVelocity','failOffsetXStart','failOffsetYStart','failOffsetXEnd','failOffsetYEnd','activeOffsetXStart','activeOffsetXEnd','activeOffsetYStart','activeOffsetYEnd'];configProps.forEach(function(prop){if(typeof props[prop]==='undefined'){props[prop]=Number.NaN;}});return props;}}]);return GestureHandler;}();function invokeNullableMethod(method,event){if(method){if(typeof method==='function'){method(event);}else{if('__getHandler'in method&&typeof method.__getHandler==='function'){var handler=method.__getHandler();invokeNullableMethod(handler,event);}else{if('__nodeConfig'in method){var argMapping=method.__nodeConfig.argMapping;if(Array.isArray(argMapping)){for(var _ref7 of argMapping.entries()){var _ref8=_slicedToArray(_ref7,2);var index=_ref8[0];var _ref8$=_slicedToArray(_ref8[1],2);var key=_ref8$[0];var value=_ref8$[1];if(key in event.nativeEvent){var nativeValue=event.nativeEvent[key];if(value&&value.setValue){value.setValue(nativeValue);}else{method.__nodeConfig.argMapping[index]=[key,nativeValue];}}}}}}}}}function asArray(value){return value==null?[]:Array.isArray(value)?value:[value];}export default GestureHandler;","map":{"version":3,"sources":["GestureHandler.ts"],"names":["Hammer","State","EventMap","NodeManager","ghQueueMicrotask","gestureInstances","GestureHandler","UNDETERMINED","id","name","gestureInstance","isNative","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","hasCustomActivationCriteria","getConfig","config","onWaitingEnded","_gesture","removePendingGesture","pendingGestures","addPendingGesture","gesture","isGestureEnabledForEvent","_config","_recognizer","_event","success","NativeGestureClass","updateHasCustomActivationCriteria","Array","isArray","waitFor","updateGestureConfig","enabled","props","clearSelfAsPending","ensureConfig","hammer","sync","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","getState","type","transformEventData","event","eventType","maxPointers","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","state","previousState","oldState","nativeEvent","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","invokeNullableMethod","lastSentState","cancelPendingGestures","Object","values","isGestureRunning","hasGestureFailed","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","INPUT_CANCEL","isFinal","onRawEvent","isFirst","shouldUseTouchEvents","simultaneousHandlers","some","handler","setView","SUPPORTS_TOUCH","window","findNodeHandle","Manager","inputClass","TouchInput","getHammerConfig","add","on","ev","initialRotation","rotation","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","_getPendingGestures","length","stillWaiting","filter","pointers","minPointers","get","enable","recognizer","inputData","options","_stillWaiting","deltaRotation","failed","simulateCancelEvent","params","set","_inputData","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","getHandler","v","configProps","forEach","prop","Number","NaN","method","__getHandler","argMapping","__nodeConfig","index","key","value","entries","nativeValue","setValue"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n  simultaneousHandlers: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n  get isNative() {\n    return false;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = this.ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange } =\n      this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  shouldUseTouchEvents(config: Config) {\n    return (\n      config.simultaneousHandlers?.some((handler) => handler.isNative) ?? false\n    );\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n\n    // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n    this.hammer =\n      SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config)\n        ? new Hammer.Manager(this.view as any, {\n            inputClass: Hammer.TouchInput,\n          })\n        : new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev as unknown as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart(event as unknown as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded(event as unknown as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated(ev as unknown as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n\n  // Validate the props\n  ensureConfig(config: Config): Required<Config> {\n    const props = { ...config };\n\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist! * props.minDist!;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist! * config.maxDist!;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor)\n        .map(({ handlerTag }: { handlerTag: number }) =>\n          NodeManager.getHandler(handlerTag)\n        )\n        .filter((v) => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers)\n        .map((handler: number | GestureHandler) => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        })\n        .filter((v) => v);\n\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n\n    const configProps = [\n      'minPointers',\n      'maxPointers',\n      'minDist',\n      'maxDist',\n      'maxDistSq',\n      'minVelocitySq',\n      'minDistSq',\n      'minVelocity',\n      'failOffsetXStart',\n      'failOffsetYStart',\n      'failOffsetXEnd',\n      'failOffsetYEnd',\n      'activeOffsetXStart',\n      'activeOffsetXEnd',\n      'activeOffsetYStart',\n      'activeOffsetYEnd',\n    ] as const;\n    configProps.forEach((prop: typeof configProps[number]) => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n  }\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}