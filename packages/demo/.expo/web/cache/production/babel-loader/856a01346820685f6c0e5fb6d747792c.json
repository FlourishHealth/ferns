{"ast":null,"code":"'use strict';import{useEffect,useRef}from'react';import{makeRemote}from'../core';import{isWeb,isJest}from'../PlatformChecker';import{areDependenciesEqual,buildDependencies}from'./utils';export function useHandler(handlers,dependencies){var initRef=useRef(null);if(initRef.current===null){initRef.current={context:makeRemote({}),savedDependencies:[]};}useEffect(function(){return function(){initRef.current=null;};},[]);var _initRef$current=initRef.current,context=_initRef$current.context,savedDependencies=_initRef$current.savedDependencies;dependencies=buildDependencies(dependencies,handlers);var doDependenciesDiffer=!areDependenciesEqual(dependencies,savedDependencies);initRef.current.savedDependencies=dependencies;var useWeb=isWeb()||isJest();return{context:context,doDependenciesDiffer:doDependenciesDiffer,useWeb:useWeb};}","map":{"version":3,"sources":["useHandler.ts"],"names":["useEffect","useRef","makeRemote","isWeb","isJest","areDependenciesEqual","buildDependencies","useHandler","handlers","dependencies","initRef","current","context","savedDependencies","doDependenciesDiffer","useWeb"],"mappings":"AAAA,YAAY,CACZ,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAEzC,OAASC,UAAU,KAAQ,SAAS,CACpC,OAASC,KAAK,CAAEC,MAAM,KAAQ,oBAAoB,CAElD,OAASC,oBAAoB,CAAEC,iBAAiB,KAAQ,SAAS,CAoDjE,MAAO,SAASC,CAAAA,UAAUA,CAIxBC,QAAgD,CAChDC,YAA6B,CACD,CAC5B,GAAMC,CAAAA,OAAO,CAAGT,MAAM,CAA0C,IAAI,CAAC,CACrE,GAAIS,OAAO,CAACC,OAAO,GAAK,IAAI,CAAE,CAC5BD,OAAO,CAACC,OAAO,CAAG,CAChBC,OAAO,CAAEV,UAAU,CAAU,CAAC,CAAC,CAAY,CAC3CW,iBAAiB,CAAE,EACrB,CAAC,CACH,CAEAb,SAAS,CAAC,UAAM,CACd,MAAO,WAAM,CACXU,OAAO,CAACC,OAAO,CAAG,IAAI,CACxB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,IAAA,gBAAA,CAAuCD,OAAO,CAACC,OAAO,CAA9CC,OAAO,CAAA,gBAAA,CAAPA,OAAO,CAAEC,iBAAAA,CAAAA,gBAAAA,CAAAA,iBAAAA,CAEjBJ,YAAY,CAAGH,iBAAiB,CAC9BG,YAAY,CACZD,QAAQ,CACT,CAED,GAAMM,CAAAA,oBAAoB,CAAG,CAACT,oBAAoB,CAChDI,YAAY,CACZI,iBAAiB,CAClB,CACDH,OAAO,CAACC,OAAO,CAACE,iBAAiB,CAAGJ,YAAY,CAChD,GAAMM,CAAAA,MAAM,CAAGZ,KAAK,CAAA,CAAE,EAAIC,MAAM,CAAA,CAAE,CAElC,MAAO,CAAEQ,OAAO,CAAPA,OAAO,CAAEE,oBAAoB,CAApBA,oBAAoB,CAAEC,MAAAA,CAAAA,MAAO,CAAC,CAClD","sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { WorkletFunction } from '../commonTypes';\nimport { makeRemote } from '../core';\nimport { isWeb, isJest } from '../PlatformChecker';\nimport type { DependencyList, ReanimatedEvent } from './commonTypes';\nimport { areDependenciesEqual, buildDependencies } from './utils';\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n\ntype GeneralWorkletHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n> = WorkletFunction<[event: ReanimatedEvent<Event>, context: Context]>;\n\ntype GeneralHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>\n> = Record<string, GeneralHandler<Event, Context> | undefined>;\n\ntype GeneralWorkletHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>\n> = Record<string, GeneralWorkletHandler<Event, Context> | undefined>;\n\ninterface ContextWithDependencies<Context extends Record<string, unknown>> {\n  context: Context;\n  savedDependencies: DependencyList;\n}\n\nexport interface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\n/**\n * Lets you find out whether the event handler dependencies have changed.\n *\n * @param handlers - An object of event handlers.\n * @param dependencies - An optional array of dependencies.\n * @returns An object containing a boolean indicating whether the dependencies have changed, and a boolean indicating whether the code is running on the web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(\n  handlers: GeneralWorkletHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context> {\n  const initRef = useRef<ContextWithDependencies<Context> | null>(null);\n  if (initRef.current === null) {\n    initRef.current = {\n      context: makeRemote<Context>({} as Context),\n      savedDependencies: [],\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  const { context, savedDependencies } = initRef.current;\n\n  dependencies = buildDependencies(\n    dependencies,\n    handlers as Record<string, WorkletFunction | undefined>\n  );\n\n  const doDependenciesDiffer = !areDependenciesEqual(\n    dependencies,\n    savedDependencies\n  );\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = isWeb() || isJest();\n\n  return { context, doDependenciesDiffer, useWeb };\n}\n"]},"metadata":{},"sourceType":"module"}