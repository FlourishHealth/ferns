{"ast":null,"code":"'use strict';import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"scrollViewOffset\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef}from'react';import ScrollView from\"react-native-web/dist/exports/ScrollView\";import{createAnimatedComponent}from'../../createAnimatedComponent';import{useAnimatedRef,useScrollViewOffset}from'../hook';var AnimatedScrollViewComponent=createAnimatedComponent(ScrollView);export var AnimatedScrollView=forwardRef(function(props,ref){var scrollViewOffset=props.scrollViewOffset,restProps=_objectWithoutProperties(props,_excluded);var animatedRef=ref===null?useAnimatedRef():ref;if(scrollViewOffset){useScrollViewOffset(animatedRef,scrollViewOffset);}if(!('scrollEventThrottle'in restProps)){restProps.scrollEventThrottle=1;}return React.createElement(AnimatedScrollViewComponent,_extends({ref:animatedRef},restProps));});","map":{"version":3,"sources":["ScrollView.tsx"],"names":["React","forwardRef","createAnimatedComponent","useAnimatedRef","useScrollViewOffset","AnimatedScrollViewComponent","ScrollView","AnimatedScrollView","props","ref","scrollViewOffset","restProps","animatedRef","scrollEventThrottle"],"mappings":"AAAA,YAAY,CAAA,OAAA,wBAAA,0DAAA,SAAA,sBAAC,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,SAAA,MAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,GAAA,CAAA,GAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAEb,MAAOA,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CAAA,OAAA,UAAA,gDAGzC,OAASC,uBAAuB,KAAQ,+BAA+B,CAGvE,OAASC,cAAc,CAAEC,mBAAmB,KAAQ,SAAS,CAc7D,GAAMC,CAAAA,2BAA2B,CAAGH,uBAAuB,CAACI,UAAU,CAAC,CAEvE,MAAO,IAAMC,CAAAA,kBAAkB,CAAGN,UAAU,CAC1C,SAACO,KAA8B,CAAEC,GAAqC,CAAK,CACzE,GAAQC,CAAAA,gBAAgB,CAAmBF,KAAK,CAAxCE,gBAAgB,CAAKC,SAAAA,CAAAA,wBAAAA,CAAcH,KAAK,CAAA,SAAA,EAChD,GAAMI,CAAAA,WAAW,CACfH,GAAG,GAAK,IAAI,CAERN,cAAc,CAAA,CAAc,CAC5BM,GAC8B,CAEpC,GAAIC,gBAAgB,CAAE,CAEpBN,mBAAmB,CAACQ,WAAW,CAAEF,gBAAgB,CAAC,CACpD,CAMA,GAAI,EAAE,qBAAqB,EAAIC,CAAAA,SAAS,CAAC,CAAE,CACzCA,SAAS,CAACE,mBAAmB,CAAG,CAAC,CACnC,CAEA,MAAOb,CAAAA,KAAAA,CAAAA,aAAAA,CAACK,2BAA2B,CAAA,QAAA,CAAA,CAACI,GAAG,CAAEG,WAAY,CAAA,CAAKD,SAAS,CAAA,CAAI,CACzE,CAAC,CACF","sourcesContent":["'use strict';\nimport type { ForwardedRef } from 'react';\nimport React, { forwardRef } from 'react';\nimport type { ScrollViewProps } from 'react-native';\nimport { ScrollView } from 'react-native';\nimport { createAnimatedComponent } from '../../createAnimatedComponent';\nimport type { SharedValue } from '../commonTypes';\nimport type { AnimatedRef } from '../hook';\nimport { useAnimatedRef, useScrollViewOffset } from '../hook';\nimport type { AnimatedProps } from '../helperTypes';\n\nexport interface AnimatedScrollViewProps\n  extends AnimatedProps<ScrollViewProps> {\n  scrollViewOffset?: SharedValue<number>;\n}\n\n// Since createAnimatedComponent return type is ComponentClass that has the props of the argument,\n// but not things like NativeMethods, etc. we need to add them manually by extending the type.\ninterface AnimatedScrollViewComplement extends ScrollView {\n  getNode(): ScrollView;\n}\n\nconst AnimatedScrollViewComponent = createAnimatedComponent(ScrollView);\n\nexport const AnimatedScrollView = forwardRef(\n  (props: AnimatedScrollViewProps, ref: ForwardedRef<AnimatedScrollView>) => {\n    const { scrollViewOffset, ...restProps } = props;\n    const animatedRef = (\n      ref === null\n        ? // eslint-disable-next-line react-hooks/rules-of-hooks\n          useAnimatedRef<ScrollView>()\n        : ref\n    ) as AnimatedRef<AnimatedScrollView>;\n\n    if (scrollViewOffset) {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useScrollViewOffset(animatedRef, scrollViewOffset);\n    }\n\n    // Set default scrollEventThrottle, because user expects\n    // to have continuous scroll events.\n    // We set it to 1 so we have peace until\n    // there are 960 fps screens.\n    if (!('scrollEventThrottle' in restProps)) {\n      restProps.scrollEventThrottle = 1;\n    }\n\n    return <AnimatedScrollViewComponent ref={animatedRef} {...restProps} />;\n  }\n);\n\nexport type AnimatedScrollView = AnimatedScrollViewComplement &\n  typeof AnimatedScrollViewComponent;\n"]},"metadata":{},"sourceType":"module"}