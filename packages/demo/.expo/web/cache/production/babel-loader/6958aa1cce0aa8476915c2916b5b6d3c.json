{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useReducer,useMemo}from'react';import ExpoLocalization,{addCalendarListener,addLocaleListener,removeSubscription}from'./ExpoLocalization';export*from'./Localization.types';export var currency=ExpoLocalization.currency;export var decimalSeparator=ExpoLocalization.decimalSeparator;export var digitGroupingSeparator=ExpoLocalization.digitGroupingSeparator;export var isoCurrencyCodes=ExpoLocalization.isoCurrencyCodes;export var isMetric=ExpoLocalization.isMetric;export var isRTL=ExpoLocalization.isRTL;export var locale=ExpoLocalization.locale;export var locales=ExpoLocalization.locales;export var timezone=ExpoLocalization.timezone;export var region=ExpoLocalization.region;export var getLocales=ExpoLocalization.getLocales;export var getCalendars=ExpoLocalization.getCalendars;export function useLocales(){var _useReducer=useReducer(function(k){return k+1;},0),_useReducer2=_slicedToArray(_useReducer,2),key=_useReducer2[0],invalidate=_useReducer2[1];var locales=useMemo(function(){return getLocales();},[key]);useEffect(function(){var subscription=addLocaleListener(invalidate);return function(){removeSubscription(subscription);};},[]);return locales;}export function useCalendars(){var _useReducer3=useReducer(function(k){return k+1;},0),_useReducer4=_slicedToArray(_useReducer3,2),key=_useReducer4[0],invalidate=_useReducer4[1];var calendars=useMemo(function(){return getCalendars();},[key]);useEffect(function(){var subscription=addCalendarListener(invalidate);return function(){removeSubscription(subscription);};},[]);return calendars;}export function getLocalizationAsync(){return _getLocalizationAsync.apply(this,arguments);}function _getLocalizationAsync(){_getLocalizationAsync=_asyncToGenerator(function*(){return yield ExpoLocalization.getLocalizationAsync();});return _getLocalizationAsync.apply(this,arguments);}","map":{"version":3,"sources":["../src/Localization.ts"],"names":[],"mappings":"wIAAA,OAAS,SAAS,CAAE,UAAU,CAAE,OAAO,KAAQ,OAAO,CAEtD,MAAO,CAAA,gBAAgB,EACrB,mBAAmB,CACnB,iBAAiB,CACjB,kBAAkB,KACb,oBAAoB,CAE3B,WAAc,sBAAsB,CAUpC,MAAO,IAAM,CAAA,QAAQ,CAAG,gBAAgB,CAAC,QAAQ,CAUjD,MAAO,IAAM,CAAA,gBAAgB,CAAG,gBAAgB,CAAC,gBAAgB,CAUjE,MAAO,IAAM,CAAA,sBAAsB,CAAG,gBAAgB,CAAC,sBAAsB,CAQ7E,MAAO,IAAM,CAAA,gBAAgB,CAAG,gBAAgB,CAAC,gBAAgB,CASjE,MAAO,IAAM,CAAA,QAAQ,CAAG,gBAAgB,CAAC,QAAQ,CAWjD,MAAO,IAAM,CAAA,KAAK,CAAG,gBAAgB,CAAC,KAAK,CAU3C,MAAO,IAAM,CAAA,MAAM,CAAG,gBAAgB,CAAC,MAAM,CAW7C,MAAO,IAAM,CAAA,OAAO,CAAG,gBAAgB,CAAC,OAAO,CAa/C,MAAO,IAAM,CAAA,QAAQ,CAAG,gBAAgB,CAAC,QAAQ,CAWjD,MAAO,IAAM,CAAA,MAAM,CAAG,gBAAgB,CAAC,MAAM,CAqB7C,MAAO,IAAM,CAAA,UAAU,CAAG,gBAAgB,CAAC,UAAU,CAerD,MAAO,IAAM,CAAA,YAAY,CAAG,gBAAgB,CAAC,YAAY,CAsBzD,MAAM,SAAU,CAAA,UAAU,CAAA,CAAA,CACxB,IAAA,WAAA,CAA0B,UAAU,CAAC,SAAC,CAAC,QAAK,CAAA,CAAC,CAAG,CAAC,GAAE,CAAC,CAAC,CAAA,YAAA,CAAA,cAAA,CAAA,WAAA,IAA9C,GAAG,CAAA,YAAA,IAAE,UAAU,CAAA,YAAA,IACtB,GAAM,CAAA,OAAO,CAAG,OAAO,CAAC,iBAAM,CAAA,UAAU,CAAA,CAAE,GAAE,CAAC,GAAG,CAAC,CAAC,CAClD,SAAS,CAAC,UAAK,CACb,GAAM,CAAA,YAAY,CAAG,iBAAiB,CAAC,UAAU,CAAC,CAClD,MAAO,WAAK,CACV,kBAAkB,CAAC,YAAY,CAAC,CAClC,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,CAAA,OAAO,CAChB,CAgBA,MAAM,SAAU,CAAA,YAAY,CAAA,CAAA,CAC1B,IAAA,YAAA,CAA0B,UAAU,CAAC,SAAC,CAAC,QAAK,CAAA,CAAC,CAAG,CAAC,GAAE,CAAC,CAAC,CAAA,YAAA,CAAA,cAAA,CAAA,YAAA,IAA9C,GAAG,CAAA,YAAA,IAAE,UAAU,CAAA,YAAA,IACtB,GAAM,CAAA,SAAS,CAAG,OAAO,CAAC,iBAAM,CAAA,YAAY,CAAA,CAAE,GAAE,CAAC,GAAG,CAAC,CAAC,CACtD,SAAS,CAAC,UAAK,CACb,GAAM,CAAA,YAAY,CAAG,mBAAmB,CAAC,UAAU,CAAC,CACpD,MAAO,WAAK,CACV,kBAAkB,CAAC,YAAY,CAAC,CAClC,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,CAAA,SAAS,CAClB,CAmBA,eAAsB,CAAA,oBAAoB,CAAA,SAAA,qBAAA,CAAA,KAAA,MAAA,SAAA,GAEzC,SAAA,sBAAA,EAAA,qBAAA,CAAA,iBAAA,CAFM,WAAmC,CACxC,YAAa,CAAA,gBAAgB,CAAC,oBAAoB,CAAA,CAAE,CACtD,CAAC,SAAA,qBAAA,CAAA,KAAA,MAAA,SAAA","sourcesContent":["import { useEffect, useReducer, useMemo } from 'react';\n\nimport ExpoLocalization, {\n  addCalendarListener,\n  addLocaleListener,\n  removeSubscription,\n} from './ExpoLocalization';\nimport { Localization } from './Localization.types';\nexport * from './Localization.types';\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n */\nexport const currency = ExpoLocalization.currency;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * Decimal separator used for formatting numbers.\n *\n * @example `','`, `'.'`\n */\nexport const decimalSeparator = ExpoLocalization.decimalSeparator;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * Digit grouping separator used when formatting numbers larger than 1000.\n *\n * @example `'.'`, `''`, `','`\n */\nexport const digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * A list of all the supported language ISO codes.\n */\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\nexport const isMetric = ExpoLocalization.isMetric;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\nexport const isRTL = ExpoLocalization.isRTL;\n\n// @needsAudit\n/**\n * @deprecated Use [`Localization.getLocales()`](#localizationgetlocales) instead.\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n */\nexport const locale = ExpoLocalization.locale;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n *\n * @example `['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`\n */\nexport const locales = ExpoLocalization.locales;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getCalendars() instead.\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n * better estimation you could use the moment-timezone package but it will add significant bloat to\n * your website's bundle size.\n *\n * @example `'America/Los_Angeles'`\n */\nexport const timezone = ExpoLocalization.timezone;\n\n// @needsAudit\n/**\n * @hidden\n * @deprecated Use Localization.getLocales() instead.\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `'US'`, `'NZ'`, `null`\n */\nexport const region = ExpoLocalization.region;\n\n/**\n * List of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * @example `[{\n    \"languageTag\": \"pl-PL\",\n    \"languageCode\": \"pl\",\n    \"textDirection\": \"ltr\",\n    \"digitGroupingSeparator\": \" \",\n    \"decimalSeparator\": \",\",\n    \"measurementSystem\": \"metric\",\n    \"currencyCode\": \"PLN\",\n    \"currencySymbol\": \"zł\",\n    \"regionCode\": \"PL\",\n    \"temperatureUnit\": \"celsius\"\n  }]`\n */\nexport const getLocales = ExpoLocalization.getLocales;\n\n/**\n * List of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * @example `[\n    {\n      \"calendar\": \"gregory\",\n      \"timeZone\": \"Europe/Warsaw\",\n      \"uses24hourClock\": true,\n      \"firstWeekday\": 1\n    }\n  ]`\n */\nexport const getCalendars = ExpoLocalization.getCalendars;\n\n/**\n * A hook providing a list of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * If the OS settings change, the hook will rerender with a new list of locales.\n * @example `[{\n    \"languageTag\": \"pl-PL\",\n    \"languageCode\": \"pl\",\n    \"textDirection\": \"ltr\",\n    \"digitGroupingSeparator\": \" \",\n    \"decimalSeparator\": \",\",\n    \"measurementSystem\": \"metric\",\n    \"currencyCode\": \"PLN\",\n    \"currencySymbol\": \"zł\",\n    \"regionCode\": \"PL\",\n    \"temperatureUnit\": \"celsius\"\n  }]`\n */\nexport function useLocales() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const locales = useMemo(() => getLocales(), [key]);\n  useEffect(() => {\n    const subscription = addLocaleListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return locales;\n}\n\n/**\n * A hook providing a list of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * If the OS settings change, the hook will rerender with a new list of calendars.\n * @example `[\n    {\n      \"calendar\": \"gregory\",\n      \"timeZone\": \"Europe/Warsaw\",\n      \"uses24hourClock\": true,\n      \"firstWeekday\": 1\n    }\n  ]`\n */\nexport function useCalendars() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const calendars = useMemo(() => getCalendars(), [key]);\n  useEffect(() => {\n    const subscription = addCalendarListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return calendars;\n}\n\n// @needsAudit\n/**\n * @hidden\n * Get the latest native values from the device. Locale can be changed on some Android devices\n * without resetting the app.\n * > On iOS, changing the locale will cause the device to reset meaning the constants will always be\n * correct.\n *\n * @example\n * ```ts\n * // When the app returns from the background on Android...\n *\n * const { locale } = await Localization.getLocalizationAsync();\n * ```\n * @deprecated\n * Use Localization.getLocales() or Localization.getCalendars() instead.\n */\nexport async function getLocalizationAsync(): Promise<Localization> {\n  return await ExpoLocalization.getLocalizationAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}