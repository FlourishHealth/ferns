{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useState}from'react';import{loadAsync,isLoaded}from'./Font';function isMapLoaded(map){if(typeof map==='string'){return isLoaded(map);}else{return Object.keys(map).every(function(fontFamily){return isLoaded(fontFamily);});}}function useRuntimeFonts(map){var _useState=useState(isMapLoaded(map)),_useState2=_slicedToArray(_useState,2),loaded=_useState2[0],setLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){loadAsync(map).then(function(){return setLoaded(true);}).catch(setError);},[]);return[loaded,error];}function useStaticFonts(map){loadAsync(map);return[true,null];}export var useFonts=typeof window==='undefined'?useStaticFonts:useRuntimeFonts;","map":{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":"iEAAA,OAAS,SAAS,CAAE,QAAQ,KAAQ,OAAO,CAE3C,OAAS,SAAS,CAAE,QAAQ,KAAQ,QAAQ,CAG5C,QAAS,CAAA,WAAW,CAAC,GAAwC,CAAA,CAC3D,GAAI,MAAO,CAAA,GAAG,GAAK,QAAQ,CAAE,CAC3B,MAAO,CAAA,QAAQ,CAAC,GAAG,CAAC,C,CACrB,IAAM,CACL,MAAO,CAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,SAAC,UAAU,QAAK,CAAA,QAAQ,CAAC,UAAU,CAAC,GAAC,CACpE,CACH,CAEA,QAAS,CAAA,eAAe,CAAC,GAAwC,CAAA,CAC/D,IAAA,SAAA,CAA4B,QAAQ,CAGlC,WAAW,CAAC,GAAG,CAAC,CACjB,CAAA,UAAA,CAAA,cAAA,CAAA,SAAA,IAJM,MAAM,CAAA,UAAA,IAAE,SAAS,CAAA,UAAA,IAKxB,IAAA,UAAA,CAA0B,QAAQ,CAAe,IAAI,CAAC,CAAA,UAAA,CAAA,cAAA,CAAA,UAAA,IAA/C,KAAK,CAAA,UAAA,IAAE,QAAQ,CAAA,UAAA,IAEtB,SAAS,CAAC,UAAK,CACb,SAAS,CAAC,GAAG,CAAC,CACX,IAAI,CAAC,iBAAM,CAAA,SAAS,CAAC,IAAI,CAAC,GAAC,CAC3B,KAAK,CAAC,QAAQ,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAC,MAAM,CAAE,KAAK,CAAC,CACxB,CAEA,QAAS,CAAA,cAAc,CAAC,GAAwC,CAAA,CAC9D,SAAS,CAAC,GAAG,CAAC,CACd,MAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CACrB,CAoBA,MAAO,IAAM,CAAA,QAAQ,CACnB,MAAO,CAAA,MAAM,GAAK,WAAW,CAAG,cAAc,CAAG,eAAe","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * ```ts\n * const [loaded, error] = useFonts({ ... });\n * ```\n * Load a map of fonts with [`loadAsync`](#loadasync). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}