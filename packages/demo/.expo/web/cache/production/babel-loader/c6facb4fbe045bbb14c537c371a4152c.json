{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useRef,useState}from\"react\";import{GOOGLE_PLACES_API_RESTRICTIONS}from\"./Constants\";import{TextField}from\"./TextField\";import{processAddressComponents}from\"./Utilities\";var loadGooglePlacesScript=function loadGooglePlacesScript(googleMapsApiKey,callbackName){return new Promise(function(resolve,reject){if(window.google&&window.google.maps&&window.google.maps.places){resolve();return;}window[callbackName]=function(){return resolve();};var script=document.createElement(\"script\");script.src=`https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&libraries=places&callback=${callbackName}`;script.async=true;script.defer=true;script.onerror=function(){return reject(new Error(\"Google Maps script failed to load\"));};document.head.appendChild(script);return;});};export var WebAddressAutocomplete=function WebAddressAutocomplete(_ref){var disabled=_ref.disabled,googleMapsApiKey=_ref.googleMapsApiKey,includeCounty=_ref.includeCounty,inputValue=_ref.inputValue,handleAddressChange=_ref.handleAddressChange,handleAutoCompleteChange=_ref.handleAutoCompleteChange;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),scriptLoaded=_useState2[0],setScriptLoaded=_useState2[1];var autocompleteInputRef=useRef(null);useEffect(function(){var callbackName=\"initAutocomplete\";if(!googleMapsApiKey){setScriptLoaded(false);return;}loadGooglePlacesScript(googleMapsApiKey,callbackName).then(function(){var autocomplete=new window.google.maps.places.Autocomplete(autocompleteInputRef.current,{componentRestrictions:{country:GOOGLE_PLACES_API_RESTRICTIONS.components.country},fields:Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields)});autocomplete.addListener(\"place_changed\",function(){var place=autocomplete.getPlace();var addressComponents=place===null||place===void 0?void 0:place.address_components;var formattedAddressObject=processAddressComponents(addressComponents,{includeCounty:includeCounty});handleAutoCompleteChange(formattedAddressObject);});}).catch(function(error){console.warn(error);setScriptLoaded(false);});return function(){window[callbackName]=null;};},[googleMapsApiKey,includeCounty,handleAutoCompleteChange]);return React.createElement(TextField,{disabled:disabled,inputRef:scriptLoaded?function(ref){return autocompleteInputRef.current=ref;}:undefined,label:\"Street Address\",placeholder:\"Enter an address\",type:\"text\",value:inputValue,onChange:function onChange(_ref2){var value=_ref2.value;handleAddressChange({value:value});}});};","map":{"version":3,"sources":["../src/WebAddressAutocomplete.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { GOOGLE_PLACES_API_RESTRICTIONS } from \"./Constants\";\nimport { TextField } from \"./TextField\";\nimport { processAddressComponents } from \"./Utilities\";\nconst loadGooglePlacesScript = (googleMapsApiKey, callbackName) => {\n    return new Promise((resolve, reject) => {\n        if (window.google && window.google.maps && window.google.maps.places) {\n            resolve();\n            return;\n        }\n        window[callbackName] = () => resolve();\n        const script = document.createElement(\"script\");\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&libraries=places&callback=${callbackName}`;\n        script.async = true;\n        script.defer = true;\n        script.onerror = () => reject(new Error(\"Google Maps script failed to load\"));\n        document.head.appendChild(script);\n        return;\n    });\n};\nexport const WebAddressAutocomplete = ({ disabled, googleMapsApiKey, includeCounty, inputValue, handleAddressChange, handleAutoCompleteChange, }) => {\n    const [scriptLoaded, setScriptLoaded] = useState(true);\n    const autocompleteInputRef = useRef(null);\n    // Load the Google Maps script and initialize the autocomplete.\n    useEffect(() => {\n        const callbackName = \"initAutocomplete\";\n        if (!googleMapsApiKey) {\n            setScriptLoaded(false);\n            return;\n        }\n        loadGooglePlacesScript(googleMapsApiKey, callbackName)\n            .then(() => {\n            const autocomplete = new window.google.maps.places.Autocomplete(autocompleteInputRef.current, {\n                componentRestrictions: { country: GOOGLE_PLACES_API_RESTRICTIONS.components.country },\n                fields: Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields),\n            });\n            autocomplete.addListener(\"place_changed\", () => {\n                const place = autocomplete.getPlace();\n                const addressComponents = place === null || place === void 0 ? void 0 : place.address_components;\n                const formattedAddressObject = processAddressComponents(addressComponents, {\n                    includeCounty,\n                });\n                handleAutoCompleteChange(formattedAddressObject);\n            });\n        })\n            .catch((error) => {\n            console.warn(error);\n            setScriptLoaded(false);\n        });\n        // Cleanup\n        return () => {\n            window[callbackName] = null;\n        };\n    }, [googleMapsApiKey, includeCounty, handleAutoCompleteChange]);\n    return (React.createElement(TextField, { disabled: disabled, inputRef: scriptLoaded ? (ref) => (autocompleteInputRef.current = ref) : undefined, label: \"Street Address\", placeholder: \"Enter an address\", type: \"text\", value: inputValue, onChange: ({ value }) => {\n            handleAddressChange({ value });\n        } }));\n};\n//# sourceMappingURL=WebAddressAutocomplete.js.map"]},"metadata":{},"sourceType":"module"}