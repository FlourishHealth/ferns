{"ast":null,"code":"'use strict';import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import{useEffect}from'react';import{startMapper,stopMapper}from'../core';import{useSharedValue}from'./useSharedValue';import{shouldBeUseWeb}from'../PlatformChecker';var _worklet_3805047105816_init_data={code:\"function anonymous(){const{prepare,react,previous}=this.__closure;const input=prepare();react(input,previous.value);previous.value=input;}\"};export function useAnimatedReaction(prepare,react,dependencies){var _prepare$__closure;var previous=useSharedValue(null,true);var inputs=Object.values((_prepare$__closure=prepare.__closure)!=null?_prepare$__closure:{});if(shouldBeUseWeb()){var _dependencies;if(!inputs.length&&(_dependencies=dependencies)!==null&&_dependencies!==void 0&&_dependencies.length){inputs=dependencies;}}if(dependencies===undefined){var _prepare$__closure2,_react$__closure;dependencies=[].concat(_toConsumableArray(Object.values((_prepare$__closure2=prepare.__closure)!=null?_prepare$__closure2:{})),_toConsumableArray(Object.values((_react$__closure=react.__closure)!=null?_react$__closure:{})),[prepare.__workletHash,react.__workletHash]);}else{dependencies.push(prepare.__workletHash,react.__workletHash);}useEffect(function(){var fun=function(){var anonymous=function anonymous(){var input=prepare();react(input,previous.value);previous.value=input;};anonymous.__closure={prepare:prepare,react:react,previous:previous};anonymous.__workletHash=3805047105816;anonymous.__initData=_worklet_3805047105816_init_data;return anonymous;}();var mapperId=startMapper(fun,inputs,[]);return function(){stopMapper(mapperId);};},dependencies);}","map":{"version":3,"sources":["useAnimatedReaction.ts"],"names":["useEffect","startMapper","stopMapper","useSharedValue","shouldBeUseWeb","useAnimatedReaction","prepare","react","dependencies","previous","inputs","Object","values","__closure","length","undefined","__workletHash","push","fun","input","value","mapperId"],"mappings":"AAAA,YAAY,CAAA,OAAA,kBAAA,gDACZ,OAASA,SAAS,KAAQ,OAAO,CAEjC,OAASC,WAAW,CAAEC,UAAU,KAAQ,SAAS,CAEjD,OAASC,cAAc,KAAQ,kBAAkB,CACjD,OAASC,cAAc,KAAQ,oBAAoB,CAAA,IAAA,gCAAA,EAAA,IAAA,+IAiBnD,MAAO,SAASC,CAAAA,mBAAmBA,CACjCC,OAA4C,CAC5CC,KAGC,CACDC,YAA6B,CAC7B,KAAA,kBAAA,CACA,GAAMC,CAAAA,QAAQ,CAAGN,cAAc,CAAwB,IAAI,CAAE,IAAI,CAAC,CAElE,GAAIO,CAAAA,MAAM,CAAGC,MAAM,CAACC,MAAM,EAAA,kBAAA,CAACN,OAAO,CAACO,SAAS,QAAA,kBAAA,CAAI,CAAC,CAAC,CAAC,CAEnD,GAAIT,cAAc,CAAA,CAAE,CAAE,CAAA,GAAA,CAAA,aAAA,CACpB,GAAI,CAACM,MAAM,CAACI,MAAM,EAAA,CAAA,aAAA,CAAIN,YAAY,IAAA,IAAA,EAAA,aAAA,GAAA,IAAA,EAAA,EAAZA,aAAAA,CAAcM,MAAM,CAAE,CAE1CJ,MAAM,CAAGF,YAAY,CACvB,CACF,CAEA,GAAIA,YAAY,GAAKO,SAAS,CAAE,KAAA,mBAAA,CAAA,gBAAA,CAC9BP,YAAY,IAAA,MAAA,CAAA,kBAAA,CACPG,MAAM,CAACC,MAAM,EAAA,mBAAA,CAACN,OAAO,CAACO,SAAS,QAAA,mBAAA,CAAI,CAAC,CAAC,CAAC,EAAA,kBAAA,CACtCF,MAAM,CAACC,MAAM,EAAA,gBAAA,CAACL,KAAK,CAACM,SAAS,QAAA,gBAAA,CAAI,CAAC,CAAC,CAAC,GACvCP,OAAO,CAACU,aAAa,CACrBT,KAAK,CAACS,aAAa,EACpB,CACH,CAAC,IAAM,CACLR,YAAY,CAACS,IAAI,CAACX,OAAO,CAACU,aAAa,CAAET,KAAK,CAACS,aAAa,CAAC,CAC/D,CAEAhB,SAAS,CAAC,UAAM,CACd,GAAMkB,CAAAA,GAAG,CAAGA,eAAAA,SAAAA,UAAAA,UAAAA,CAAM,CAEhB,GAAMC,CAAAA,KAAK,CAAGb,OAAO,CAAA,CAAE,CACvBC,KAAK,CAACY,KAAK,CAAEV,QAAQ,CAACW,KAAK,CAAC,CAC5BX,QAAQ,CAACW,KAAK,CAAGD,KAAK,CACxB,CAAC,CAAA,SAAA,CAAA,SAAA,EAAA,OAAA,CAHeb,OAAO,CAAA,KAAA,CACrBC,KAAK,CAAA,QAAA,CAAQE,QAAQ,EAAA,SAAA,CAAA,aAAA,eAAA,SAAA,CAAA,UAAA,CAAA,gCAAA,QAAA,SAAA,EAHXS,EAKX,CACD,GAAMG,CAAAA,QAAQ,CAAGpB,WAAW,CAACiB,GAAG,CAAER,MAAM,CAAE,EAAE,CAAC,CAC7C,MAAO,WAAM,CACXR,UAAU,CAACmB,QAAQ,CAAC,CACtB,CAAC,CACH,CAAC,CAAEb,YAAY,CAAC,CAClB","sourcesContent":["'use strict';\nimport { useEffect } from 'react';\nimport type { WorkletFunction } from '../commonTypes';\nimport { startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { useSharedValue } from './useSharedValue';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\n/**\n * Lets you to respond to changes in a [shared value](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value). It's especially useful when comparing values previously stored in the shared value with the current one.\n *\n * @param prepare - A function that should return a value to which you'd like to react.\n * @param react - A function that reacts to changes in the value returned by the `prepare` function.\n * @param dependencies - an optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useAnimatedReaction\n */\n// @ts-expect-error This overload is required by our API.\nexport function useAnimatedReaction<PreparedResult>(\n  prepare: () => PreparedResult,\n  react: (prepared: PreparedResult, previous: PreparedResult | null) => void,\n  dependencies?: DependencyList\n): void;\n\nexport function useAnimatedReaction<PreparedResult>(\n  prepare: WorkletFunction<[], PreparedResult>,\n  react: WorkletFunction<\n    [prepare: PreparedResult, previous: PreparedResult | null],\n    void\n  >,\n  dependencies?: DependencyList\n) {\n  const previous = useSharedValue<PreparedResult | null>(null, true);\n\n  let inputs = Object.values(prepare.__closure ?? {});\n\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Reanimated Babel plugin\n      inputs = dependencies;\n    }\n  }\n\n  if (dependencies === undefined) {\n    dependencies = [\n      ...Object.values(prepare.__closure ?? {}),\n      ...Object.values(react.__closure ?? {}),\n      prepare.__workletHash,\n      react.__workletHash,\n    ];\n  } else {\n    dependencies.push(prepare.__workletHash, react.__workletHash);\n  }\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      const input = prepare();\n      react(input, previous.value);\n      previous.value = input;\n    };\n    const mapperId = startMapper(fun, inputs, []);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n}\n"]},"metadata":{},"sourceType":"module"}