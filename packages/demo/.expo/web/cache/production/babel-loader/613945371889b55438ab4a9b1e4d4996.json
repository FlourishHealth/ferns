{"ast":null,"code":"'use strict';import{hsvToColor,RGBtoHSV,rgbaColor,processColor,red,green,blue,opacity}from'./Colors';import{makeMutable}from'./core';import{Extrapolation,interpolate}from'./interpolation';import{useSharedValue}from'./hook/useSharedValue';export var Extrapolate=Extrapolation;var _worklet_14693378975429_init_data={code:\"function anonymous(value,inputRange,colors,options){const{interpolate,Extrapolation,hsvToColor}=this.__closure;let h=0;const{useCorrectedHSVInterpolation=true}=options;if(useCorrectedHSVInterpolation){const correctedInputRange=[inputRange[0]];const originalH=colors.h;const correctedH=[originalH[0]];for(let i=1;i<originalH.length;++i){const d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolation.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolation.CLAMP);}const s=interpolate(value,inputRange,colors.s,Extrapolation.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);return hsvToColor(h,s,v,a);}\"};var interpolateColorsHSV=function(){var anonymous=function anonymous(value,inputRange,colors,options){var h=0;var _options$useCorrected=options.useCorrectedHSVInterpolation,useCorrectedHSVInterpolation=_options$useCorrected===void 0?true:_options$useCorrected;if(useCorrectedHSVInterpolation){var correctedInputRange=[inputRange[0]];var originalH=colors.h;var correctedH=[originalH[0]];for(var i=1;i<originalH.length;++i){var d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolation.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolation.CLAMP);}var s=interpolate(value,inputRange,colors.s,Extrapolation.CLAMP);var v=interpolate(value,inputRange,colors.v,Extrapolation.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);return hsvToColor(h,s,v,a);};anonymous.__closure={interpolate:interpolate,Extrapolation:Extrapolation,hsvToColor:hsvToColor};anonymous.__workletHash=14693378975429;anonymous.__initData=_worklet_14693378975429_init_data;return anonymous;}();var _worklet_9548966570765_init_data={code:\"function anonymous(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});}\"};var toLinearSpace=function(){var anonymous=function anonymous(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});};anonymous.__closure={};anonymous.__workletHash=9548966570765;anonymous.__initData=_worklet_9548966570765_init_data;return anonymous;}();var _worklet_12849438514316_init_data={code:\"function anonymous(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);}\"};var toGammaSpace=function(){var anonymous=function anonymous(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);};anonymous.__closure={};anonymous.__workletHash=12849438514316;anonymous.__initData=_worklet_12849438514316_init_data;return anonymous;}();var _worklet_16236720403479_init_data={code:\"function anonymous(value,inputRange,colors,options){const{toLinearSpace,interpolate,Extrapolation,rgbaColor,toGammaSpace}=this.__closure;const{gamma=2.2}=options;let{r:outputR,g:outputG,b:outputB}=colors;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}const r=interpolate(value,inputRange,outputR,Extrapolation.CLAMP);const g=interpolate(value,inputRange,outputG,Extrapolation.CLAMP);const b=interpolate(value,inputRange,outputB,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);}\"};var interpolateColorsRGB=function(){var anonymous=function anonymous(value,inputRange,colors,options){var _options$gamma=options.gamma,gamma=_options$gamma===void 0?2.2:_options$gamma;var outputR=colors.r,outputG=colors.g,outputB=colors.b;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}var r=interpolate(value,inputRange,outputR,Extrapolation.CLAMP);var g=interpolate(value,inputRange,outputG,Extrapolation.CLAMP);var b=interpolate(value,inputRange,outputB,Extrapolation.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);};anonymous.__closure={toLinearSpace:toLinearSpace,interpolate:interpolate,Extrapolation:Extrapolation,rgbaColor:rgbaColor,toGammaSpace:toGammaSpace};anonymous.__workletHash=16236720403479;anonymous.__initData=_worklet_16236720403479_init_data;return anonymous;}();var _worklet_8695722846819_init_data={code:\"function anonymous(colors){const{processColor,red,green,blue,opacity}=this.__closure;const r=[];const g=[];const b=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};}\"};var getInterpolateRGB=function(){var anonymous=function anonymous(colors){var r=[];var g=[];var b=[];var a=[];for(var i=0;i<colors.length;++i){var color=colors[i];var processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};};anonymous.__closure={processColor:processColor,red:red,green:green,blue:blue,opacity:opacity};anonymous.__workletHash=8695722846819;anonymous.__initData=_worklet_8695722846819_init_data;return anonymous;}();var _worklet_14757969761783_init_data={code:\"function anonymous(colors){const{processColor,RGBtoHSV,red,green,blue,opacity}=this.__closure;const h=[];const s=[];const v=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(typeof processedColor==='number'){const processedHSVColor=RGBtoHSV(red(processedColor),green(processedColor),blue(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push(opacity(processedColor));}}return{h:h,s:s,v:v,a:a};}\"};var getInterpolateHSV=function(){var anonymous=function anonymous(colors){var h=[];var s=[];var v=[];var a=[];for(var i=0;i<colors.length;++i){var color=colors[i];var processedColor=processColor(color);if(typeof processedColor==='number'){var processedHSVColor=RGBtoHSV(red(processedColor),green(processedColor),blue(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push(opacity(processedColor));}}return{h:h,s:s,v:v,a:a};};anonymous.__closure={processColor:processColor,RGBtoHSV:RGBtoHSV,red:red,green:green,blue:blue,opacity:opacity};anonymous.__workletHash=14757969761783;anonymous.__initData=_worklet_14757969761783_init_data;return anonymous;}();var _worklet_3691367513248_init_data={code:\"function interpolateColor(value,inputRange,outputRange){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB}=this.__closure;let colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';let options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new Error(\\\"[Reanimated] Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV'].\\\");}\"};export var interpolateColor=function(){var interpolateColor=function interpolateColor(value,inputRange,outputRange){var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';var options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new Error(`[Reanimated] Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV'].`);};interpolateColor.__closure={interpolateColorsHSV:interpolateColorsHSV,getInterpolateHSV:getInterpolateHSV,interpolateColorsRGB:interpolateColorsRGB,getInterpolateRGB:getInterpolateRGB};interpolateColor.__workletHash=3691367513248;interpolateColor.__initData=_worklet_3691367513248_init_data;return interpolateColor;}();export var ColorSpace=function(ColorSpace){ColorSpace[ColorSpace[\"RGB\"]=0]=\"RGB\";ColorSpace[ColorSpace[\"HSV\"]=1]=\"HSV\";return ColorSpace;}({});export function useInterpolateConfig(inputRange,outputRange){var colorSpace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ColorSpace.RGB;var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};return useSharedValue({inputRange:inputRange,outputRange:outputRange,colorSpace:colorSpace,cache:makeMutable(null),options:options});}","map":{"version":3,"sources":["interpolateColor.ts"],"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","Extrapolation","interpolate","useSharedValue","Extrapolate","interpolateColorsHSV","value","inputRange","colors","options","h","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","CLAMP","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","r","outputR","g","outputG","b","outputB","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache"],"mappings":"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","sourcesContent":["'use strict';\nimport {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { Extrapolation, interpolate } from './interpolation';\nimport type { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\n/**\n * @deprecated Please use Extrapolation instead\n */\nexport const Extrapolate = Extrapolation;\n\n/**\n * Options for color interpolation.\n *\n * @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.\n * @param useCorrectedHSVInterpolation - Whether to reduce the number of colors the interpolation has to go through. Defaults to `true`.\n */\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(\n        value,\n        correctedInputRange,\n        correctedH,\n        Extrapolation.CLAMP\n      ) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\nexport interface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\nexport interface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\n/**\n * Lets you map a value from a range of numbers to a range of colors using linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to the color in the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the interpolation.\n * @param outputRange - An array of output colors values (eg. \"red\", \"#00FFCC\", \"rgba(255, 0, 0, 0.5)\").\n * @param colorSpace - The color space to use for interpolation. Defaults to 'RGB'.\n * @param options - Additional options for interpolation - {@link InterpolationOptions}.\n * @returns The color after interpolation from within the output range in rgba(r, g, b, a) format.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor\n */\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly string[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): string;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): number;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `[Reanimated] Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV'].`\n  );\n}\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}