{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import*as Font from'expo-font';import React from'react';import Text from\"react-native-web/dist/exports/Text\";import createIconSet from'./vendor/react-native-vector-icons/lib/create-icon-set';import createIconButtonComponent from'./vendor/react-native-vector-icons/lib/icon-button';export{DEFAULT_ICON_COLOR,DEFAULT_ICON_SIZE}from'./vendor/react-native-vector-icons/lib/create-icon-set';export default function(glyphMap,fontName,expoAssetId,fontStyle){var _class;var font=_defineProperty({},fontName,expoAssetId);var RNVIconComponent=createIconSet(glyphMap,fontName,null,fontStyle);return _class=function(_React$Component){_inherits(Icon,_React$Component);var _super=_createSuper(Icon);function Icon(){var _this;_classCallCheck(this,Icon);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this._mounted=false;_this.state={fontIsLoaded:Font.isLoaded(fontName)};return _this;}_createClass(Icon,[{key:\"componentDidMount\",value:function(){var _componentDidMount=_asyncToGenerator(function*(){this._mounted=true;if(!this.state.fontIsLoaded){yield Font.loadAsync(font);this._mounted&&this.setState({fontIsLoaded:true});}});function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._mounted=false;}},{key:\"setNativeProps\",value:function setNativeProps(props){if(this._icon){this._icon.setNativeProps(props);}}},{key:\"render\",value:function render(){var _this2=this;if(false&&this.props.name&&!(this.props.name in glyphMap)){console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);}if(!this.state.fontIsLoaded){return React.createElement(Text,null);}return React.createElement(RNVIconComponent,_objectSpread({ref:function ref(view){_this2._icon=view;}},this.props));}}]);return Icon;}(React.Component),_class.defaultProps=RNVIconComponent.defaultProps,_class.Button=createIconButtonComponent(_class),_class.glyphMap=glyphMap,_class.getRawGlyphMap=function(){return glyphMap;},_class.getFontFamily=function(){return fontName;},_class.loadFont=function(){return Font.loadAsync(font);},_class.font=font,_class;}","map":{"version":3,"sources":["../src/createIconSet.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as Font from 'expo-font';\nimport React, { ComponentClass } from 'react';\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from './vendor/react-native-vector-icons/lib/create-icon-set';\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        /* eslint-disable react/no-did-mount-set-state */\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}