{"ast":null,"code":"'use strict';import{useHandler}from'./useHandler';import{useEvent}from'./useEvent';var _worklet_17515480971732_init_data={code:\"function anonymous(event){const{scrollHandlers,context}=this.__closure;const{onScroll:onScroll,onBeginDrag:onBeginDrag,onEndDrag:onEndDrag,onMomentumBegin:onMomentumBegin,onMomentumEnd:onMomentumEnd}=scrollHandlers;if(onScroll&&event.eventName.endsWith('onScroll')){onScroll(event,context);}else if(onBeginDrag&&event.eventName.endsWith('onScrollBeginDrag')){onBeginDrag(event,context);}else if(onEndDrag&&event.eventName.endsWith('onScrollEndDrag')){onEndDrag(event,context);}else if(onMomentumBegin&&event.eventName.endsWith('onMomentumScrollBegin')){onMomentumBegin(event,context);}else if(onMomentumEnd&&event.eventName.endsWith('onMomentumScrollEnd')){onMomentumEnd(event,context);}}\"};export function useAnimatedScrollHandler(handlers,dependencies){var scrollHandlers=typeof handlers==='function'?{onScroll:handlers}:handlers;var _useHandler=useHandler(scrollHandlers,dependencies),context=_useHandler.context,doDependenciesDiffer=_useHandler.doDependenciesDiffer;var subscribeForEvents=['onScroll'];if(scrollHandlers.onBeginDrag!==undefined){subscribeForEvents.push('onScrollBeginDrag');}if(scrollHandlers.onEndDrag!==undefined){subscribeForEvents.push('onScrollEndDrag');}if(scrollHandlers.onMomentumBegin!==undefined){subscribeForEvents.push('onMomentumScrollBegin');}if(scrollHandlers.onMomentumEnd!==undefined){subscribeForEvents.push('onMomentumScrollEnd');}return useEvent(function(){var anonymous=function anonymous(event){var onScroll=scrollHandlers.onScroll,onBeginDrag=scrollHandlers.onBeginDrag,onEndDrag=scrollHandlers.onEndDrag,onMomentumBegin=scrollHandlers.onMomentumBegin,onMomentumEnd=scrollHandlers.onMomentumEnd;if(onScroll&&event.eventName.endsWith('onScroll')){onScroll(event,context);}else if(onBeginDrag&&event.eventName.endsWith('onScrollBeginDrag')){onBeginDrag(event,context);}else if(onEndDrag&&event.eventName.endsWith('onScrollEndDrag')){onEndDrag(event,context);}else if(onMomentumBegin&&event.eventName.endsWith('onMomentumScrollBegin')){onMomentumBegin(event,context);}else if(onMomentumEnd&&event.eventName.endsWith('onMomentumScrollEnd')){onMomentumEnd(event,context);}};anonymous.__closure={scrollHandlers:scrollHandlers,context:context};anonymous.__workletHash=17515480971732;anonymous.__initData=_worklet_17515480971732_init_data;return anonymous;}(),subscribeForEvents,doDependenciesDiffer);}","map":{"version":3,"sources":["useAnimatedScrollHandler.ts"],"names":["useHandler","useEvent","useAnimatedScrollHandler","handlers","dependencies","scrollHandlers","onScroll","context","doDependenciesDiffer","subscribeForEvents","onBeginDrag","undefined","push","onEndDrag","onMomentumBegin","onMomentumEnd","event","eventName","endsWith"],"mappings":"AAAA,YAAY,CAMZ,OAASA,UAAU,KAAQ,cAAc,CAEzC,OAASC,QAAQ,KAAQ,YAAY,CAAA,IAAA,iCAAA,EAAA,IAAA,qrBAqCrC,MAAO,SAASC,CAAAA,wBAAwBA,CAGtCC,QAA0D,CAC1DC,YAA6B,CAC7B,CAEA,GAAMC,CAAAA,cAAuC,CAC3C,MAAOF,CAAAA,QAAQ,GAAK,UAAU,CAAG,CAAEG,QAAQ,CAAEH,QAAS,CAAC,CAAGA,QAAQ,CACpE,IAAA,WAAA,CAA0CH,UAAU,CAGlDK,cAAc,CAA4CD,YAAY,CAAC,CAHjEG,OAAO,CAAA,WAAA,CAAPA,OAAO,CAAEC,oBAAAA,CAAAA,WAAAA,CAAAA,oBAAAA,CAMjB,GAAMC,CAAAA,kBAAkB,CAAG,CAAC,UAAU,CAAC,CACvC,GAAIJ,cAAc,CAACK,WAAW,GAAKC,SAAS,CAAE,CAC5CF,kBAAkB,CAACG,IAAI,CAAC,mBAAmB,CAAC,CAC9C,CACA,GAAIP,cAAc,CAACQ,SAAS,GAAKF,SAAS,CAAE,CAC1CF,kBAAkB,CAACG,IAAI,CAAC,iBAAiB,CAAC,CAC5C,CACA,GAAIP,cAAc,CAACS,eAAe,GAAKH,SAAS,CAAE,CAChDF,kBAAkB,CAACG,IAAI,CAAC,uBAAuB,CAAC,CAClD,CACA,GAAIP,cAAc,CAACU,aAAa,GAAKJ,SAAS,CAAE,CAC9CF,kBAAkB,CAACG,IAAI,CAAC,qBAAqB,CAAC,CAChD,CAEA,MAAOX,CAAAA,QAAQ,CACZe,eAAAA,SAAAA,UAAAA,UAAAA,KAA4B,CAAK,CAEhC,GACEV,CAAAA,QAAQ,CAKND,cAAc,CALhBC,QAAQ,CACRI,WAAW,CAITL,cAAc,CAJhBK,WAAW,CACXG,SAAS,CAGPR,cAAc,CAHhBQ,SAAS,CACTC,eAAe,CAEbT,cAAc,CAFhBS,eAAe,CACfC,aAAAA,CACEV,cAAc,CADhBU,aAAAA,CAEF,GAAIT,QAAQ,EAAIU,KAAK,CAACC,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAAE,CACpDZ,QAAQ,CAACU,KAAK,CAAET,OAAO,CAAC,CAC1B,CAAC,IAAM,IAAIG,WAAW,EAAIM,KAAK,CAACC,SAAS,CAACC,QAAQ,CAAC,mBAAmB,CAAC,CAAE,CACvER,WAAW,CAACM,KAAK,CAAET,OAAO,CAAC,CAC7B,CAAC,IAAM,IAAIM,SAAS,EAAIG,KAAK,CAACC,SAAS,CAACC,QAAQ,CAAC,iBAAiB,CAAC,CAAE,CACnEL,SAAS,CAACG,KAAK,CAAET,OAAO,CAAC,CAC3B,CAAC,IAAM,IACLO,eAAe,EACfE,KAAK,CAACC,SAAS,CAACC,QAAQ,CAAC,uBAAuB,CAAC,CACjD,CACAJ,eAAe,CAACE,KAAK,CAAET,OAAO,CAAC,CACjC,CAAC,IAAM,IACLQ,aAAa,EACbC,KAAK,CAACC,SAAS,CAACC,QAAQ,CAAC,qBAAqB,CAAC,CAC/C,CACAH,aAAa,CAACC,KAAK,CAAET,OAAO,CAAC,CAC/B,CACF,CAAC,CAAA,SAAA,CAAA,SAAA,EAAA,cAAA,CAlBKF,cAAc,CAAA,OAAA,CAEAE,OAAO,EAAA,SAAA,CAAA,aAAA,gBAAA,SAAA,CAAA,UAAA,CAAA,iCAAA,QAAA,SAAA,EAV1BS,GA2BDP,kBAAkB,CAClBD,oBAEA,CACD,CACH","sourcesContent":["'use strict';\nimport type {\n  DependencyList,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\nimport { useHandler } from './useHandler';\nimport type { EventHandlerInternal, EventHandlerProcessed } from './useEvent';\nimport { useEvent } from './useEvent';\n\nexport type ScrollHandler<\n  Context extends Record<string, unknown> = Record<string, unknown>\n> = (event: ReanimatedScrollEvent, context: Context) => void;\nexport interface ScrollHandlers<Context extends Record<string, unknown>> {\n  onScroll?: ScrollHandler<Context>;\n  onBeginDrag?: ScrollHandler<Context>;\n  onEndDrag?: ScrollHandler<Context>;\n  onMomentumBegin?: ScrollHandler<Context>;\n  onMomentumEnd?: ScrollHandler<Context>;\n}\n\nexport type ScrollHandlerProcessed<\n  Context extends Record<string, unknown> = Record<string, unknown>\n> = EventHandlerProcessed<RNNativeScrollEvent, Context>;\n\nexport type ScrollHandlerInternal = EventHandlerInternal<RNNativeScrollEvent>;\n\n/**\n * Lets you run callbacks on ScrollView events. Supports `onScroll`, `onBeginDrag`, `onEndDrag`, `onMomentumBegin`, and `onMomentumEnd` events.\n *\n * These callbacks are automatically workletized and ran on the UI thread.\n *\n * @param handlers - An object containing event handlers.\n * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.\n * @returns An object you need to pass to `onScroll` prop on the `Animated.ScrollView` component.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useAnimatedScrollHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useAnimatedScrollHandler<\n  Context extends Record<string, unknown>\n>(\n  handlers: ScrollHandler<Context> | ScrollHandlers<Context>,\n  dependencies?: DependencyList\n): ScrollHandlerProcessed<Context>;\n\nexport function useAnimatedScrollHandler<\n  Context extends Record<string, unknown>\n>(\n  handlers: ScrollHandlers<Context> | ScrollHandler<Context>,\n  dependencies?: DependencyList\n) {\n  // case when handlers is a function\n  const scrollHandlers: ScrollHandlers<Context> =\n    typeof handlers === 'function' ? { onScroll: handlers } : handlers;\n  const { context, doDependenciesDiffer } = useHandler<\n    RNNativeScrollEvent,\n    Context\n  >(scrollHandlers as Record<string, ScrollHandler<Context>>, dependencies);\n\n  // build event subscription array\n  const subscribeForEvents = ['onScroll'];\n  if (scrollHandlers.onBeginDrag !== undefined) {\n    subscribeForEvents.push('onScrollBeginDrag');\n  }\n  if (scrollHandlers.onEndDrag !== undefined) {\n    subscribeForEvents.push('onScrollEndDrag');\n  }\n  if (scrollHandlers.onMomentumBegin !== undefined) {\n    subscribeForEvents.push('onMomentumScrollBegin');\n  }\n  if (scrollHandlers.onMomentumEnd !== undefined) {\n    subscribeForEvents.push('onMomentumScrollEnd');\n  }\n\n  return useEvent<RNNativeScrollEvent, Context>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      const {\n        onScroll,\n        onBeginDrag,\n        onEndDrag,\n        onMomentumBegin,\n        onMomentumEnd,\n      } = scrollHandlers;\n      if (onScroll && event.eventName.endsWith('onScroll')) {\n        onScroll(event, context);\n      } else if (onBeginDrag && event.eventName.endsWith('onScrollBeginDrag')) {\n        onBeginDrag(event, context);\n      } else if (onEndDrag && event.eventName.endsWith('onScrollEndDrag')) {\n        onEndDrag(event, context);\n      } else if (\n        onMomentumBegin &&\n        event.eventName.endsWith('onMomentumScrollBegin')\n      ) {\n        onMomentumBegin(event, context);\n      } else if (\n        onMomentumEnd &&\n        event.eventName.endsWith('onMomentumScrollEnd')\n      ) {\n        onMomentumEnd(event, context);\n      }\n    },\n    subscribeForEvents,\n    doDependenciesDiffer\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as ScrollHandlerInternal;\n}\n"]},"metadata":{},"sourceType":"module"}