{"ast":null,"code":"export function getFilename(url) {\n  var _URL = new URL(url, 'https://e'),\n    pathname = _URL.pathname,\n    searchParams = _URL.searchParams;\n  if (__DEV__) {\n    if (searchParams.has('unstable_path')) {\n      var encodedFilePath = decodeURIComponent(searchParams.get('unstable_path'));\n      return getBasename(encodedFilePath);\n    }\n  }\n  return getBasename(pathname);\n}\nfunction getBasename(pathname) {\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\nexport function getFileExtension(url) {\n  var filename = getFilename(url);\n  var dotIndex = filename.lastIndexOf('.');\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\nexport function getManifestBaseUrl(manifestUrl) {\n  var urlObject = new URL(manifestUrl);\n  var nextProtocol = urlObject.protocol;\n  if (nextProtocol === 'exp:') {\n    nextProtocol = 'http:';\n  } else if (nextProtocol === 'exps:') {\n    nextProtocol = 'https:';\n  }\n  urlObject.protocol = nextProtocol;\n  var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.pathname = directory;\n  urlObject.search = '';\n  urlObject.hash = '';\n  return urlObject.protocol !== nextProtocol ? urlObject.href.replace(urlObject.protocol, nextProtocol) : urlObject.href;\n}","map":{"version":3,"sources":["../src/AssetUris.ts"],"names":[],"mappings":"AAAA,OAAM,SAAU,WAAW,CAAC,GAAW,EAAA;EACrC,IAAA,IAAA,GAAmC,IAAI,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC;IAApD,QAAQ,GAAA,IAAA,CAAR,QAAQ;IAAE,YAAY,GAAA,IAAA,CAAZ,YAAY;EAM9B,IAAI,OAAO,EAAE;IACX,IAAI,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;MACrC,IAAM,eAAe,GAAG,kBAAkB,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAE,CAAC;MAC9E,OAAO,WAAW,CAAC,eAAe,CAAC;IACpC;EACF;EAED,OAAO,WAAW,CAAC,QAAQ,CAAC;AAC9B;AAEA,SAAS,WAAW,CAAC,QAAgB,EAAA;EACnC,OAAO,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1D;AAEA,OAAM,SAAU,gBAAgB,CAAC,GAAW,EAAA;EAC1C,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC;EACjC,IAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC;EAE1C,OAAO,QAAQ,GAAG,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;AACzD;AAaA,OAAM,SAAU,kBAAkB,CAAC,WAAmB,EAAA;EACpD,IAAM,SAAS,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC;EAEtC,IAAI,YAAY,GAAG,SAAS,CAAC,QAAQ;EAErC,IAAI,YAAY,KAAK,MAAM,EAAE;IAC3B,YAAY,GAAG,OAAO;GACvB,MAAM,IAAI,YAAY,KAAK,OAAO,EAAE;IACnC,YAAY,GAAG,QAAQ;EACxB;EACD,SAAS,CAAC,QAAQ,GAAG,YAAY;EAGjC,IAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1F,SAAS,CAAC,QAAQ,GAAG,SAAS;EAC9B,SAAS,CAAC,MAAM,GAAG,EAAE;EACrB,SAAS,CAAC,IAAI,GAAG,EAAE;EAInB,OAAO,SAAS,CAAC,QAAQ,KAAK,YAAY,GACtC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,GACxD,SAAS,CAAC,IAAI;AACpB","sourcesContent":["export function getFilename(url: string): string {\n  const { pathname, searchParams } = new URL(url, 'https://e');\n\n  // When attached to a dev server, we use `unstable_path` to represent the file path. This ensures\n  // the file name is not canonicalized by the browser.\n  // NOTE(EvanBacon): This is technically not tied to `__DEV__` as it's possible to use this while bundling in production\n  // mode.\n  if (__DEV__) {\n    if (searchParams.has('unstable_path')) {\n      const encodedFilePath = decodeURIComponent(searchParams.get('unstable_path')!);\n      return getBasename(encodedFilePath);\n    }\n  }\n\n  return getBasename(pathname);\n}\n\nfunction getBasename(pathname: string): string {\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\n\nexport function getFileExtension(url: string): string {\n  const filename = getFilename(url);\n  const dotIndex = filename.lastIndexOf('.');\n  // Ignore leading dots for hidden files\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the\n * base URL would be https://exp.host/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\nexport function getManifestBaseUrl(manifestUrl: string): string {\n  const urlObject = new URL(manifestUrl);\n\n  let nextProtocol = urlObject.protocol;\n  // Change the scheme to http(s) if it is exp(s)\n  if (nextProtocol === 'exp:') {\n    nextProtocol = 'http:';\n  } else if (nextProtocol === 'exps:') {\n    nextProtocol = 'https:';\n  }\n  urlObject.protocol = nextProtocol;\n\n  // Trim filename, query parameters, and fragment, if any\n  const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.pathname = directory;\n  urlObject.search = '';\n  urlObject.hash = '';\n\n  // The URL spec doesn't allow for changing the protocol to `http` or `https`\n  // without a port set so instead, we'll just swap the protocol manually.\n  return urlObject.protocol !== nextProtocol\n    ? urlObject.href.replace(urlObject.protocol, nextProtocol)\n    : urlObject.href;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}