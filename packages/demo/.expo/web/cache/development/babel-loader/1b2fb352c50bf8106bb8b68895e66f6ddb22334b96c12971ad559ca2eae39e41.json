{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/josh/src/ui/packages/demo/src/demoConfig.tsx\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { Avatar } from \"ferns-ui\";\nimport React from \"react\";\nimport { AvatarDemo, AvatarInitials, AvatarOutlines, AvatarSizes } from \"./Avatar.stories\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar PropsJSON = require(\"./common.json\");\nvar Config = [{\n  name: \"Avatar\",\n  related: [\"Profile Picture\"],\n  description: \"Avatars are used to represent a user visually.\",\n  category: [\"Some Category\"],\n  component: Avatar,\n  status: {\n    documentation: \"planned\",\n    figma: \"planned\",\n    ios: \"ready\",\n    android: \"ready\",\n    web: \"ready\"\n  },\n  usage: {\n    do: [\"Use it\"],\n    doNot: [\"Not use it\"]\n  },\n  interfaceName: \"AvatarProps\",\n  demo: AvatarDemo,\n  demoOptions: {\n    size: \"md\",\n    controls: {\n      backgroundColor: {\n        type: \"select\",\n        options: [{\n          label: \"Primary\",\n          value: \"primary\"\n        }, {\n          label: \"Secondary\",\n          value: \"secondary\"\n        }]\n      }\n    }\n  },\n  stories: {\n    Initials: {\n      description: \"If there isn't a url provided or it doesn't load, Avatar defaults to the user's initials\",\n      render: function render() {\n        return _jsxDEV(AvatarInitials, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 23\n        }, _this);\n      }\n    },\n    Sizes: {\n      render: function render() {\n        return _jsxDEV(AvatarSizes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, _this);\n      }\n    },\n    Outlines: {\n      render: function render() {\n        return _jsxDEV(AvatarOutlines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 32\n        }, _this);\n      }\n    }\n  },\n  testMatrix: {\n    name: [\"Tony Stark\"],\n    outline: [true, false],\n    size: [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n    src: [undefined, \"https://i.ibb.co/ZfCZrY8/keerthi.jpg\"]\n  }\n}];\nexport var DemoConfig = Config.map(function (c) {\n  return _objectSpread(_objectSpread({}, c), {}, {\n    props: PropsJSON.children.find(function (json) {\n      return json.name === c.interfaceName;\n    })\n  });\n});","map":{"version":3,"names":["Avatar","React","AvatarDemo","AvatarInitials","AvatarOutlines","AvatarSizes","jsxDEV","_jsxDEV","PropsJSON","require","Config","name","related","description","category","component","status","documentation","figma","ios","android","web","usage","do","doNot","interfaceName","demo","demoOptions","size","controls","backgroundColor","type","options","label","value","stories","Initials","render","fileName","_jsxFileName","lineNumber","columnNumber","_this","Sizes","Outlines","testMatrix","outline","src","undefined","DemoConfig","map","c","_objectSpread","props","children","find","json"],"sources":["/Users/josh/src/ui/packages/demo/src/demoConfig.tsx"],"sourcesContent":["import {Avatar, FieldProps} from \"ferns-ui\";\nimport React from \"react\";\n\nimport {AvatarDemo, AvatarInitials, AvatarOutlines, AvatarSizes} from \"./Avatar.stories\";\n\ntype DemoConfigStatus = \"planned\" | \"inProgress\" | \"ready\" | \"notSupported\";\n\nconst PropsJSON = require(\"./common.json\");\n\ninterface DemoConfigurationBase {\n  name: string;\n  component: any; // TODO: make this typing better\n  related: string[];\n  description: string;\n  category: string[];\n  status: {\n    documentation: DemoConfigStatus;\n    figma: DemoConfigStatus;\n    ios: DemoConfigStatus;\n    android: DemoConfigStatus;\n    web: DemoConfigStatus;\n  };\n  // Should match one of the interface names in common.json (children.[0].name)\n  interfaceName: string;\n  usage: {\n    do: string[];\n    doNot: string[];\n  };\n  // Demo is the top component that will show up in the index page and at the top of the page.\n  demo: () => React.ReactElement | null;\n  demoOptions: {\n    // On large screens, \"md\" will either generate a smaller box with controls to the right\n    // or just a small box. On small screens, it will be full width with controls below.\n    // On small and large screens, \"lg\" will generate a full width box with controls below (if any).\n    // \"md\" is the default.\n    size?: \"md\" | \"lg\";\n    controls?: {\n      [prop: string]: FieldProps;\n    };\n  };\n  // Stories represent different states of the component and different examples of using it.\n  stories: {\n    [name: string]: {\n      description?: string;\n      render: () => React.ReactElement | null;\n    };\n  };\n  // List all the props and values you want matrixed together. One component will be rendered per\n  // combination.\n  testMatrix?: {[prop: string]: any[]};\n  // Default props applied to every test matrix component. Useful for required props.\n  testMatrixDefaultProps?: {[prop: string]: any};\n}\n\nexport interface DemoConfigurationProp {\n  comment: {\n    summary: {\n      kind: string;\n      text: string;\n    }[];\n  };\n  flags: {\n    isOptional: boolean;\n  };\n  name: string;\n  type: {\n    name: string;\n    type: string;\n  };\n}\n\nexport interface DemoConfiguration extends DemoConfigurationBase {\n  props: {children: DemoConfigurationProp[]};\n}\n\nconst Config: DemoConfigurationBase[] = [\n  {\n    name: \"Avatar\",\n    related: [\"Profile Picture\"],\n    description: \"Avatars are used to represent a user visually.\",\n    category: [\"Some Category\"],\n    component: Avatar,\n    status: {\n      documentation: \"planned\",\n      figma: \"planned\",\n      ios: \"ready\",\n      android: \"ready\",\n      web: \"ready\",\n    },\n    usage: {\n      do: [\"Use it\"],\n      doNot: [\"Not use it\"],\n    },\n    interfaceName: \"AvatarProps\",\n    demo: AvatarDemo,\n    demoOptions: {\n      size: \"md\",\n      controls: {\n        backgroundColor: {\n          type: \"select\",\n          options: [\n            {label: \"Primary\", value: \"primary\"},\n            {label: \"Secondary\", value: \"secondary\"},\n          ],\n        },\n      },\n    },\n    stories: {\n      Initials: {\n        description:\n          \"If there isn't a url provided or it doesn't load, Avatar defaults to the user's initials\",\n        render: () => <AvatarInitials />,\n      },\n      Sizes: {render: () => <AvatarSizes />},\n      Outlines: {render: () => <AvatarOutlines />},\n    },\n    testMatrix: {\n      name: [\"Tony Stark\"],\n      outline: [true, false],\n      size: [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n      src: [undefined, \"https://i.ibb.co/ZfCZrY8/keerthi.jpg\"],\n    },\n  },\n];\n\nexport const DemoConfig = Config.map((c) => ({\n  ...c,\n  props: PropsJSON.children.find((json: any) => json.name === c.interfaceName),\n}));\n"],"mappings":";;;;;AAAA,SAAQA,MAAM,QAAmB,UAAU;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAAQC,UAAU,EAAEC,cAAc,EAAEC,cAAc,EAAEC,WAAW,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIzF,IAAMC,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAoE1C,IAAMC,MAA+B,GAAG,CACtC;EACEC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE,CAAC,iBAAiB,CAAC;EAC5BC,WAAW,EAAE,gDAAgD;EAC7DC,QAAQ,EAAE,CAAC,eAAe,CAAC;EAC3BC,SAAS,EAAEf,MAAM;EACjBgB,MAAM,EAAE;IACNC,aAAa,EAAE,SAAS;IACxBC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE,OAAO;IACZC,OAAO,EAAE,OAAO;IAChBC,GAAG,EAAE;EACP,CAAC;EACDC,KAAK,EAAE;IACLC,EAAE,EAAE,CAAC,QAAQ,CAAC;IACdC,KAAK,EAAE,CAAC,YAAY;EACtB,CAAC;EACDC,aAAa,EAAE,aAAa;EAC5BC,IAAI,EAAExB,UAAU;EAChByB,WAAW,EAAE;IACXC,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE;MACRC,eAAe,EAAE;QACfC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,CACP;UAACC,KAAK,EAAE,SAAS;UAAEC,KAAK,EAAE;QAAS,CAAC,EACpC;UAACD,KAAK,EAAE,WAAW;UAAEC,KAAK,EAAE;QAAW,CAAC;MAE5C;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQ,EAAE;MACRvB,WAAW,EACT,0FAA0F;MAC5FwB,MAAM,EAAE,SAAAA,OAAA;QAAA,OAAM9B,OAAA,CAACJ,cAAc;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAE,CAAC;MAAA;IAClC,CAAC;IACDC,KAAK,EAAE;MAACN,MAAM,EAAE,SAAAA,OAAA;QAAA,OAAM9B,OAAA,CAACF,WAAW;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAE,CAAC;MAAA;IAAA,CAAC;IACtCE,QAAQ,EAAE;MAACP,MAAM,EAAE,SAAAA,OAAA;QAAA,OAAM9B,OAAA,CAACH,cAAc;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAE,CAAC;MAAA;IAAA;EAC7C,CAAC;EACDG,UAAU,EAAE;IACVlC,IAAI,EAAE,CAAC,YAAY,CAAC;IACpBmC,OAAO,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;IACtBlB,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACpCmB,GAAG,EAAE,CAACC,SAAS,EAAE,sCAAsC;EACzD;AACF,CAAC,CACF;AAED,OAAO,IAAMC,UAAU,GAAGvC,MAAM,CAACwC,GAAG,CAAC,UAACC,CAAC;EAAA,OAAAC,aAAA,CAAAA,aAAA,KAClCD,CAAC;IACJE,KAAK,EAAE7C,SAAS,CAAC8C,QAAQ,CAACC,IAAI,CAAC,UAACC,IAAS;MAAA,OAAKA,IAAI,CAAC7C,IAAI,KAAKwC,CAAC,CAAC1B,aAAa;IAAA;EAAC;AAAA,CAC5E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}