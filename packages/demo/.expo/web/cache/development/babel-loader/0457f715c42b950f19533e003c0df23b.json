{"ast":null,"code":"'use strict';\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function isJest() {\n  return !!process.env.JEST_WORKER_ID;\n}\nexport function isChromeDebugger() {\n  return !global.nativeCallSyncHook || !!global.__REMOTEDEV__;\n}\nexport function isWeb() {\n  return Platform.OS === 'web';\n}\nexport function isAndroid() {\n  return Platform.OS === 'android';\n}\nfunction isWindows() {\n  return Platform.OS === 'windows';\n}\nexport function shouldBeUseWeb() {\n  return isJest() || isChromeDebugger() || isWeb() || isWindows();\n}\nexport function nativeShouldBeMock() {\n  return isJest() || isChromeDebugger() || isWindows();\n}\nexport function isFabric() {\n  return !!global._IS_FABRIC;\n}\nexport function isWindowAvailable() {\n  return typeof window !== 'undefined';\n}\nexport function isReducedMotion() {\n  return isWeb() ? isWindowAvailable() ? !window.matchMedia('(prefers-reduced-motion: no-preference)').matches : false : !!global._REANIMATED_IS_REDUCED_MOTION;\n}","map":{"version":3,"sources":["PlatformChecker.ts"],"names":["isJest","process","env","JEST_WORKER_ID","isChromeDebugger","global","nativeCallSyncHook","__REMOTEDEV__","isWeb","Platform","OS","isAndroid","isWindows","shouldBeUseWeb","nativeShouldBeMock","isFabric","_IS_FABRIC","isWindowAvailable","window","isReducedMotion","matchMedia","matches","_REANIMATED_IS_REDUCED_MOTION"],"mappings":"AAAA,YAAY;;AAAA,OAAA,QAAA;AAOZ,OAAO,SAASA,MAAMA,CAAAA,EAAY;EAChC,OAAO,CAAC,CAACC,OAAO,CAACC,GAAG,CAACC,cAAc;AACrC;AAGA,OAAO,SAASC,gBAAgBA,CAAAA,EAAY;EAC1C,OACE,CAAEC,MAAM,CAAiBC,kBAAkB,IAC3C,CAAC,CAAED,MAAM,CAAiBE,aAAa;AAE3C;AAEA,OAAO,SAASC,KAAKA,CAAAA,EAAY;EAC/B,OAAOC,QAAQ,CAACC,EAAE,KAAK,KAAK;AAC9B;AAEA,OAAO,SAASC,SAASA,CAAAA,EAAY;EACnC,OAAOF,QAAQ,CAACC,EAAE,KAAK,SAAS;AAClC;AAEA,SAASE,SAASA,CAAAA,EAAY;EAC5B,OAAOH,QAAQ,CAACC,EAAE,KAAK,SAAS;AAClC;AAEA,OAAO,SAASG,cAAcA,CAAAA,EAAG;EAC/B,OAAOb,MAAM,CAAA,CAAE,IAAII,gBAAgB,CAAA,CAAE,IAAII,KAAK,CAAA,CAAE,IAAII,SAAS,CAAA,CAAE;AACjE;AAEA,OAAO,SAASE,kBAAkBA,CAAAA,EAAG;EACnC,OAAOd,MAAM,CAAA,CAAE,IAAII,gBAAgB,CAAA,CAAE,IAAIQ,SAAS,CAAA,CAAE;AACtD;AAEA,OAAO,SAASG,QAAQA,CAAAA,EAAG;EACzB,OAAO,CAAC,CAAEV,MAAM,CAAiBW,UAAU;AAC7C;AAEA,OAAO,SAASC,iBAAiBA,CAAAA,EAAG;EAKlC,OAAO,OAAOC,MAAM,KAAK,WAAW;AACtC;AAEA,OAAO,SAASC,eAAeA,CAAAA,EAAG;EAChC,OAAOX,KAAK,CAAA,CAAE,GACVS,iBAAiB,CAAA,CAAE,GAEjB,CAACC,MAAM,CAACE,UAAU,CAAC,yCAAyC,CAAC,CAACC,OAAO,GACrE,KAAK,GACP,CAAC,CAAEhB,MAAM,CAAiBiB,6BAA6B;AAC7D","sourcesContent":["'use strict';\nimport { Platform } from 'react-native';\n\n// This type is necessary since some libraries tend to do a lib check\n// and this file causes type errors on `global` access.\ntype localGlobal = typeof global & Record<string, unknown>;\n\nexport function isJest(): boolean {\n  return !!process.env.JEST_WORKER_ID;\n}\n\n// `isChromeDebugger` also returns true in Jest environment, so `isJest()` check should always be performed first\nexport function isChromeDebugger(): boolean {\n  return (\n    !(global as localGlobal).nativeCallSyncHook ||\n    !!(global as localGlobal).__REMOTEDEV__\n  );\n}\n\nexport function isWeb(): boolean {\n  return Platform.OS === 'web';\n}\n\nexport function isAndroid(): boolean {\n  return Platform.OS === 'android';\n}\n\nfunction isWindows(): boolean {\n  return Platform.OS === 'windows';\n}\n\nexport function shouldBeUseWeb() {\n  return isJest() || isChromeDebugger() || isWeb() || isWindows();\n}\n\nexport function nativeShouldBeMock() {\n  return isJest() || isChromeDebugger() || isWindows();\n}\n\nexport function isFabric() {\n  return !!(global as localGlobal)._IS_FABRIC;\n}\n\nexport function isWindowAvailable() {\n  // the window object is unavailable when building the server portion of a site that uses SSG\n  // this function shouldn't be used to conditionally render components\n  // https://www.joshwcomeau.com/react/the-perils-of-rehydration/\n  // @ts-ignore Fallback if `window` is undefined.\n  return typeof window !== 'undefined';\n}\n\nexport function isReducedMotion() {\n  return isWeb()\n    ? isWindowAvailable()\n      ? // @ts-ignore Fallback if `window` is undefined.\n        !window.matchMedia('(prefers-reduced-motion: no-preference)').matches\n      : false\n    : !!(global as localGlobal)._REANIMATED_IS_REDUCED_MOTION;\n}\n"]},"metadata":{},"sourceType":"module"}