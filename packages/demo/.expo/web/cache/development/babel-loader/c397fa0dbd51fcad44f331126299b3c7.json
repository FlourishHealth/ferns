{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useRef, useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useDimensions } from \"./utils/useDimensions\";\nvar Toast = function Toast(props) {\n  var id = props.id,\n    onDestroy = props.onDestroy,\n    icon = props.icon,\n    _props$type = props.type,\n    type = _props$type === void 0 ? \"normal\" : _props$type,\n    message = props.message,\n    _props$duration = props.duration,\n    duration = _props$duration === void 0 ? 5000 : _props$duration,\n    style = props.style,\n    textStyle = props.textStyle,\n    _props$animationDurat = props.animationDuration,\n    animationDuration = _props$animationDurat === void 0 ? 250 : _props$animationDurat,\n    _props$animationType = props.animationType,\n    animationType = _props$animationType === void 0 ? \"slide-in\" : _props$animationType,\n    successIcon = props.successIcon,\n    dangerIcon = props.dangerIcon,\n    warningIcon = props.warningIcon,\n    successColor = props.successColor,\n    dangerColor = props.dangerColor,\n    warningColor = props.warningColor,\n    normalColor = props.normalColor,\n    placement = props.placement,\n    swipeEnabled = props.swipeEnabled,\n    _onPress = props.onPress;\n  var containerRef = useRef(null);\n  var _useState = useState(new Animated.Value(0)),\n    _useState2 = _slicedToArray(_useState, 1),\n    animation = _useState2[0];\n  var panResponderRef = useRef();\n  var panResponderAnimRef = useRef();\n  var closeTimeoutRef = useRef(null);\n  var dims = useDimensions();\n  useEffect(function () {\n    Animated.timing(animation, {\n      toValue: 1,\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: animationDuration\n    }).start();\n    if (duration !== 0 && typeof duration === \"number\") {\n      closeTimeoutRef.current = setTimeout(function () {\n        handleClose();\n      }, duration);\n    }\n    return function () {\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n    };\n  }, [duration]);\n  useEffect(function () {\n    if (!props.open) {\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n      handleClose();\n    }\n  }, [props.open]);\n  var handleClose = function handleClose() {\n    Animated.timing(animation, {\n      toValue: 0,\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: animationDuration\n    }).start(function () {\n      return onDestroy();\n    });\n  };\n  var panReleaseToLeft = function panReleaseToLeft(gestureState) {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: {\n        x: -dims.width / 10 * 9,\n        y: gestureState.dy\n      },\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: 250\n    }).start(function () {\n      return onDestroy();\n    });\n  };\n  var panReleaseToRight = function panReleaseToRight(gestureState) {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: {\n        x: dims.width / 10 * 9,\n        y: gestureState.dy\n      },\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: 250\n    }).start(function () {\n      return onDestroy();\n    });\n  };\n  var getPanResponder = function getPanResponder() {\n    if (panResponderRef.current) return panResponderRef.current;\n    var swipeThreshold = Platform.OS === \"android\" ? 10 : 0;\n    panResponderRef.current = PanResponder.create({\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(_, gestureState) {\n        return Math.abs(gestureState.dx) > swipeThreshold || Math.abs(gestureState.dy) > swipeThreshold;\n      },\n      onPanResponderMove: function onPanResponderMove(_, gestureState) {\n        var _getPanResponderAnim;\n        (_getPanResponderAnim = getPanResponderAnim()) === null || _getPanResponderAnim === void 0 ? void 0 : _getPanResponderAnim.setValue({\n          x: gestureState.dx,\n          y: gestureState.dy\n        });\n      },\n      onPanResponderRelease: function onPanResponderRelease(_, gestureState) {\n        if (gestureState.dx > 50) {\n          panReleaseToRight(gestureState);\n        } else if (gestureState.dx < -50) {\n          panReleaseToLeft(gestureState);\n        } else {\n          Animated.spring(getPanResponderAnim(), {\n            toValue: {\n              x: 0,\n              y: 0\n            },\n            useNativeDriver: Platform.OS !== \"web\"\n          }).start();\n        }\n      }\n    });\n    return panResponderRef.current;\n  };\n  var getPanResponderAnim = function getPanResponderAnim() {\n    if (panResponderAnimRef.current) return panResponderAnimRef.current;\n    panResponderAnimRef.current = new Animated.ValueXY({\n      x: 0,\n      y: 0\n    });\n    return panResponderAnimRef.current;\n  };\n  if (icon === undefined) {\n    switch (type) {\n      case \"success\":\n        {\n          if (successIcon) {\n            icon = successIcon;\n          }\n          break;\n        }\n      case \"danger\":\n        {\n          if (dangerIcon) {\n            icon = dangerIcon;\n          }\n          break;\n        }\n      case \"warning\":\n        {\n          if (warningIcon) {\n            icon = warningIcon;\n          }\n          break;\n        }\n    }\n  }\n  var backgroundColor = \"\";\n  switch (type) {\n    case \"success\":\n      backgroundColor = successColor || \"rgb(46, 125, 50)\";\n      break;\n    case \"danger\":\n      backgroundColor = dangerColor || \"rgb(211, 47, 47)\";\n      break;\n    case \"warning\":\n      backgroundColor = warningColor || \"rgb(237, 108, 2)\";\n      break;\n    default:\n      backgroundColor = normalColor || \"#333\";\n  }\n  var animationStyle = {\n    opacity: animation,\n    transform: [{\n      translateY: animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: placement === \"bottom\" ? [20, 0] : [-20, 0]\n      })\n    }]\n  };\n  if (swipeEnabled) {\n    var _animationStyle$trans;\n    (_animationStyle$trans = animationStyle.transform) === null || _animationStyle$trans === void 0 ? void 0 : _animationStyle$trans.push(getPanResponderAnim().getTranslateTransform()[0]);\n  }\n  if (animationType === \"zoom-in\") {\n    var _animationStyle$trans2;\n    (_animationStyle$trans2 = animationStyle.transform) === null || _animationStyle$trans2 === void 0 ? void 0 : _animationStyle$trans2.push({\n      scale: animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0.7, 1]\n      })\n    });\n  }\n  return React.createElement(Animated.View, _extends({\n    pointerEvents: \"box-none\",\n    ref: containerRef\n  }, swipeEnabled ? getPanResponder().panHandlers : null, {\n    style: [styles.container, animationStyle]\n  }), props.renderType && props.renderType[type] ? props.renderType[type](props) : props.renderToast ? props.renderToast(props) : React.createElement(TouchableWithoutFeedback, {\n    disabled: !_onPress,\n    onPress: function onPress() {\n      return _onPress && _onPress(id);\n    }\n  }, React.createElement(View, {\n    style: [styles.toastContainer, {\n      maxWidth: dims.width / 10 * 9,\n      backgroundColor: backgroundColor\n    }, style]\n  }, icon ? React.createElement(View, {\n    style: styles.iconContainer\n  }, icon) : null, React.isValidElement(message) ? message : React.createElement(Text, {\n    style: [styles.message, textStyle]\n  }, message))));\n};\nvar styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    alignItems: \"center\"\n  },\n  toastContainer: {\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    borderRadius: 5,\n    marginVertical: 5,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    overflow: \"hidden\"\n  },\n  message: {\n    color: \"#fff\",\n    fontWeight: \"500\"\n  },\n  iconContainer: {\n    marginRight: 5\n  }\n});\nexport default Toast;","map":{"version":3,"sources":["toast.tsx"],"names":["React","useRef","useEffect","useState","useDimensions","Toast","props","id","onDestroy","icon","type","message","duration","style","textStyle","animationDuration","animationType","successIcon","dangerIcon","warningIcon","successColor","dangerColor","warningColor","normalColor","placement","swipeEnabled","onPress","containerRef","animation","Animated","Value","panResponderRef","panResponderAnimRef","closeTimeoutRef","dims","timing","toValue","useNativeDriver","Platform","OS","start","current","setTimeout","handleClose","clearTimeout","open","panReleaseToLeft","gestureState","getPanResponderAnim","x","width","y","dy","panReleaseToRight","getPanResponder","swipeThreshold","create","onMoveShouldSetPanResponder","_","Math","abs","dx","onPanResponderMove","setValue","onPanResponderRelease","spring","ValueXY","undefined","backgroundColor","animationStyle","opacity","transform","translateY","interpolate","inputRange","outputRange","push","getTranslateTransform","scale","panHandlers","styles","container","renderType","renderToast","toastContainer","maxWidth","iconContainer","isValidElement","alignItems","paddingHorizontal","paddingVertical","borderRadius","marginVertical","flexDirection","overflow","color","fontWeight","marginRight"],"mappings":"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","sourcesContent":["import React, { FC, useRef, useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Animated,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  Text,\r\n  TouchableWithoutFeedback,\r\n  PanResponder,\r\n  PanResponderInstance,\r\n  PanResponderGestureState,\r\n  Platform,\r\n} from \"react-native\";\r\nimport { useDimensions } from \"./utils/useDimensions\";\r\n\r\nexport interface ToastOptions {\r\n  /**\r\n   * Id is optional, you may provide an id only if you want to update toast later using toast.update()\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * Customize toast icon\r\n   */\r\n  icon?: JSX.Element;\r\n\r\n  /**\r\n   * Toast types, You can implement your custom types with JSX using renderType method on ToastContainer.\r\n   */\r\n  type?: \"normal\" | \"success\" | \"danger\" | \"warning\" | string;\r\n\r\n  /**\r\n   * In ms, How long toast will stay before it go away\r\n   */\r\n  duration?: number;\r\n\r\n  /**\r\n   * Customize when toast should be placed\r\n   */\r\n  placement?: \"top\" | \"bottom\" | \"center\";\r\n\r\n  /**\r\n   * Customize style of toast\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n\r\n  /**\r\n   * Customize style of toast text\r\n   */\r\n  textStyle?: StyleProp<TextStyle>;\r\n\r\n  /**\r\n   * Customize how fast toast will show and hide\r\n   */\r\n  animationDuration?: number;\r\n\r\n  /**\r\n   * Customize how toast is animated when added or removed\r\n   */\r\n  animationType?: \"slide-in\" | \"zoom-in\";\r\n\r\n  /**\r\n   * Customize success type icon\r\n   */\r\n  successIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize danger type icon\r\n   */\r\n  dangerIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize warning type icon\r\n   */\r\n  warningIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize success type color. changes toast background color\r\n   */\r\n  successColor?: string;\r\n\r\n  /**\r\n   * Customize danger type color. changes toast background color\r\n   */\r\n  dangerColor?: string;\r\n\r\n  /**\r\n   * Customize warning type color. changes toast background color\r\n   */\r\n  warningColor?: string;\r\n\r\n  /**\r\n   * Customize normal type color. changes toast background color\r\n   */\r\n  normalColor?: string;\r\n\r\n  /**\r\n   * Register event for when toast is pressed. If you're using a custom toast you have to pass this to a Touchable.\r\n   */\r\n  onPress?(id: string): void;\r\n\r\n  /**\r\n   * Execute event after toast is closed\r\n   */\r\n  onClose?(): void;\r\n\r\n  /**\r\n   * Payload data for custom toasts. You can pass whatever you want\r\n   */\r\n  data?: any;\r\n\r\n  swipeEnabled?: boolean;\r\n}\r\n\r\nexport interface ToastProps extends ToastOptions {\r\n  id: string;\r\n  onDestroy(): void;\r\n  message: string | JSX.Element;\r\n  open: boolean;\r\n  renderToast?(toast: ToastProps): JSX.Element;\r\n  renderType?: { [type: string]: (toast: ToastProps) => JSX.Element };\r\n  onHide(): void;\r\n}\r\n\r\nconst Toast: FC<ToastProps> = (props) => {\r\n  let {\r\n    id,\r\n    onDestroy,\r\n    icon,\r\n    type = \"normal\",\r\n    message,\r\n    duration = 5000,\r\n    style,\r\n    textStyle,\r\n    animationDuration = 250,\r\n    animationType = \"slide-in\",\r\n    successIcon,\r\n    dangerIcon,\r\n    warningIcon,\r\n    successColor,\r\n    dangerColor,\r\n    warningColor,\r\n    normalColor,\r\n    placement,\r\n    swipeEnabled,\r\n    onPress,\r\n  } = props;\r\n\r\n  const containerRef = useRef<View>(null);\r\n  const [animation] = useState(new Animated.Value(0));\r\n  const panResponderRef = useRef<PanResponderInstance>();\r\n  const panResponderAnimRef = useRef<Animated.ValueXY>();\r\n  const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const dims = useDimensions();\r\n\r\n  useEffect(() => {\r\n    Animated.timing(animation, {\r\n      toValue: 1,\r\n      useNativeDriver: Platform.OS !== \"web\",\r\n      duration: animationDuration,\r\n    }).start();\r\n    if (duration !== 0 && typeof duration === \"number\") {\r\n      closeTimeoutRef.current = setTimeout(() => {\r\n        handleClose();\r\n      }, duration);\r\n    }\r\n\r\n    return () => {\r\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\r\n    };\r\n  }, [duration]);\r\n\r\n  // Handles hide & hideAll\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      // Unregister close timeout\r\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\r\n\r\n      // Close animation them remove from stack.\r\n      handleClose();\r\n    }\r\n  }, [props.open]);\r\n\r\n  const handleClose = () => {\r\n    Animated.timing(animation, {\r\n      toValue: 0,\r\n      useNativeDriver: Platform.OS !== \"web\",\r\n      duration: animationDuration,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const panReleaseToLeft = (gestureState: PanResponderGestureState) => {\r\n    Animated.timing(getPanResponderAnim(), {\r\n      toValue: { x: (-dims.width / 10) * 9, y: gestureState.dy },\r\n      useNativeDriver: Platform.OS !== \"web\",\r\n      duration: 250,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const panReleaseToRight = (gestureState: PanResponderGestureState) => {\r\n    Animated.timing(getPanResponderAnim(), {\r\n      toValue: { x: (dims.width / 10) * 9, y: gestureState.dy },\r\n      useNativeDriver: Platform.OS !== \"web\",\r\n      duration: 250,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const getPanResponder = () => {\r\n    if (panResponderRef.current) return panResponderRef.current;\r\n    const swipeThreshold = Platform.OS === \"android\" ? 10 : 0;\r\n    panResponderRef.current = PanResponder.create({\r\n      onMoveShouldSetPanResponder: (_, gestureState) => {\r\n        //return true if user is swiping, return false if it's a single click\r\n        return (\r\n          Math.abs(gestureState.dx) > swipeThreshold ||\r\n          Math.abs(gestureState.dy) > swipeThreshold\r\n        );\r\n      },\r\n      onPanResponderMove: (_, gestureState) => {\r\n        getPanResponderAnim()?.setValue({\r\n          x: gestureState.dx,\r\n          y: gestureState.dy,\r\n        });\r\n      },\r\n      onPanResponderRelease: (_, gestureState) => {\r\n        if (gestureState.dx > 50) {\r\n          panReleaseToRight(gestureState);\r\n        } else if (gestureState.dx < -50) {\r\n          panReleaseToLeft(gestureState);\r\n        } else {\r\n          Animated.spring(getPanResponderAnim(), {\r\n            toValue: { x: 0, y: 0 },\r\n            useNativeDriver: Platform.OS !== \"web\",\r\n          }).start();\r\n        }\r\n      },\r\n    });\r\n    return panResponderRef.current;\r\n  };\r\n\r\n  const getPanResponderAnim = () => {\r\n    if (panResponderAnimRef.current) return panResponderAnimRef.current;\r\n    panResponderAnimRef.current = new Animated.ValueXY({ x: 0, y: 0 });\r\n    return panResponderAnimRef.current;\r\n  };\r\n\r\n  if (icon === undefined) {\r\n    switch (type) {\r\n      case \"success\": {\r\n        if (successIcon) {\r\n          icon = successIcon;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case \"danger\": {\r\n        if (dangerIcon) {\r\n          icon = dangerIcon;\r\n        }\r\n        break;\r\n      }\r\n      case \"warning\": {\r\n        if (warningIcon) {\r\n          icon = warningIcon;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let backgroundColor = \"\";\r\n  switch (type) {\r\n    case \"success\":\r\n      backgroundColor = successColor || \"rgb(46, 125, 50)\";\r\n      break;\r\n    case \"danger\":\r\n      backgroundColor = dangerColor || \"rgb(211, 47, 47)\";\r\n      break;\r\n    case \"warning\":\r\n      backgroundColor = warningColor || \"rgb(237, 108, 2)\";\r\n      break;\r\n    default:\r\n      backgroundColor = normalColor || \"#333\";\r\n  }\r\n\r\n  const animationStyle: Animated.WithAnimatedObject<ViewStyle> = {\r\n    opacity: animation,\r\n    transform: [\r\n      {\r\n        translateY: animation.interpolate({\r\n          inputRange: [0, 1],\r\n          outputRange: placement === \"bottom\" ? [20, 0] : [-20, 0], // 0 : 150, 0.5 : 75, 1 : 0\r\n        }),\r\n      },\r\n    ],\r\n  };\r\n\r\n  if (swipeEnabled) {\r\n    animationStyle.transform?.push(\r\n      getPanResponderAnim().getTranslateTransform()[0]\r\n    );\r\n  }\r\n\r\n  if (animationType === \"zoom-in\") {\r\n    animationStyle.transform?.push({\r\n      scale: animation.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [0.7, 1],\r\n      }),\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Animated.View\r\n      pointerEvents={\"box-none\"}\r\n      ref={containerRef}\r\n      {...(swipeEnabled ? getPanResponder().panHandlers : null)}\r\n      style={[styles.container, animationStyle]}\r\n    >\r\n      {props.renderType && props.renderType[type] ? (\r\n        props.renderType[type](props)\r\n      ) : props.renderToast ? (\r\n        props.renderToast(props)\r\n      ) : (\r\n        <TouchableWithoutFeedback\r\n          disabled={!onPress}\r\n          onPress={() => onPress && onPress(id)}\r\n        >\r\n          <View\r\n            style={[\r\n              styles.toastContainer,\r\n              { maxWidth: (dims.width / 10) * 9, backgroundColor },\r\n              style,\r\n            ]}\r\n          >\r\n            {icon ? <View style={styles.iconContainer}>{icon}</View> : null}\r\n            {React.isValidElement(message) ? (\r\n              message\r\n            ) : (\r\n              <Text style={[styles.message, textStyle]}>{message}</Text>\r\n            )}\r\n          </View>\r\n        </TouchableWithoutFeedback>\r\n      )}\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { width: \"100%\", alignItems: \"center\" },\r\n  toastContainer: {\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 12,\r\n    borderRadius: 5,\r\n    marginVertical: 5,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\",\r\n  },\r\n  message: {\r\n    color: \"#fff\",\r\n    fontWeight: \"500\",\r\n  },\r\n  iconContainer: {\r\n    marginRight: 5,\r\n  },\r\n});\r\n\r\nexport default Toast;\r\n"]},"metadata":{},"sourceType":"module"}