{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport { DEFAULT_DRAWER_WIDTH, SWIPE_MIN_DISTANCE, SWIPE_MIN_OFFSET, SWIPE_MIN_VELOCITY } from \"../../constants\";\nimport { DrawerProgressContext } from \"../../utils/DrawerProgressContext\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport { Overlay } from \"./Overlay\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\nexport var Drawer = function (_React$Component) {\n  _inherits(Drawer, _React$Component);\n  var _super = _createSuper(Drawer);\n  function Drawer() {\n    var _this$props$swipeMinD, _this$props$swipeMinV;\n    var _this;\n    _classCallCheck(this, Drawer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n    _this.getDrawerWidth = function () {\n      var _this$props6 = _this.props,\n        drawerStyle = _this$props6.drawerStyle,\n        layout = _this$props6.layout;\n      var _ref4 = StyleSheet.flatten(drawerStyle) || {},\n        _ref4$width = _ref4.width,\n        width = _ref4$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref4$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return layout.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    };\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.initialDrawerWidth = _this.getDrawerWidth();\n    _this.gestureState = new Value(GestureState.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n    _this.containerWidth = new Value(_this.props.layout.width);\n    _this.drawerWidth = new Value(_this.initialDrawerWidth);\n    _this.drawerOpacity = new Value(_this.props.drawerType === 'permanent' ? 1 : 0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value((_this$props$swipeMinD = _this.props.swipeMinDistance) != null ? _this$props$swipeMinD : SWIPE_MIN_DISTANCE);\n    _this.swipeVelocityThreshold = new Value((_this$props$swipeMinV = _this.props.swipeMinVelocity) != null ? _this$props$swipeMinV : SWIPE_MIN_VELOCITY);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), onChange(state.finished, cond(state.finished, call([_this.isOpen], function (open) {\n        var _this$props$onTransit, _this$props;\n        return (_this$props$onTransit = (_this$props = _this.props).onTransitionEnd) === null || _this$props$onTransit === void 0 ? void 0 : _this$props$onTransit.call(_this$props, !open);\n      }), call([_this.isOpen], function (open) {\n        var _this$props$onTransit2, _this$props2;\n        return (_this$props$onTransit2 = (_this$props2 = _this.props).onTransitionStart) === null || _this$props$onTransit2 === void 0 ? void 0 : _this$props$onTransit2.call(_this$props2, !open);\n      }))), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref5 = _slicedToArray(_ref, 1),\n          value = _ref5[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {\n      var _ref6 = _slicedToArray(_ref2, 1),\n        value = _ref6[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref3) {\n      var _ref7 = _slicedToArray(_ref3, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.END), [call([], function () {\n      var _this$props$onGesture, _this$props3;\n      return (_this$props$onGesture = (_this$props3 = _this.props).onGestureEnd) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props3);\n    })])), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.CANCELLED), [call([], function () {\n      var _this$props$onGesture2, _this$props4;\n      return (_this$props$onGesture2 = (_this$props4 = _this.props).onGestureCancel) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props4);\n    })])), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position), call([], function () {\n      var _this$props$onGesture3, _this$props5;\n      return (_this$props$onGesture3 = (_this$props5 = _this.props).onGestureStart) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props5);\n    })]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_MIN_OFFSET), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    };\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    };\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props7 = _this.props,\n        hideStatusBar = _this$props7.hideStatusBarOnOpen,\n        statusBarAnimation = _this$props7.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    };\n    return _this;\n  }\n  _createClass(Drawer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props8 = this.props,\n        open = _this$props8.open,\n        drawerPosition = _this$props8.drawerPosition,\n        drawerType = _this$props8.drawerType,\n        swipeMinDistance = _this$props8.swipeMinDistance,\n        swipeMinVelocity = _this$props8.swipeMinVelocity,\n        hideStatusBarOnOpen = _this$props8.hideStatusBarOnOpen;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBarOnOpen) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeMinDistance !== swipeMinDistance) {\n        this.swipeDistanceThreshold.setValue(swipeMinDistance != null ? swipeMinDistance : SWIPE_MIN_DISTANCE);\n      }\n      if (prevProps.swipeMinVelocity !== swipeMinVelocity) {\n        this.swipeVelocityThreshold.setValue(swipeMinVelocity != null ? swipeMinVelocity : SWIPE_MIN_VELOCITY);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props9 = this.props,\n        open = _this$props9.open,\n        swipeEnabled = _this$props9.swipeEnabled,\n        drawerPosition = _this$props9.drawerPosition,\n        drawerType = _this$props9.drawerType,\n        swipeEdgeWidth = _this$props9.swipeEdgeWidth,\n        drawerStyle = _this$props9.drawerStyle,\n        overlayStyle = _this$props9.overlayStyle,\n        renderDrawerContent = _this$props9.renderDrawerContent,\n        children = _this$props9.children,\n        gestureHandlerProps = _this$props9.gestureHandlerProps,\n        overlayAccessibilityLabel = _this$props9.overlayAccessibilityLabel;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: progress\n      }, React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_MIN_OFFSET, SWIPE_MIN_OFFSET],\n        failOffsetY: [-SWIPE_MIN_OFFSET, SWIPE_MIN_OFFSET],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: contentTranslateX\n          }]\n        }]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, children), drawerType === 'permanent' ? null : React.createElement(Overlay, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        accessibilityLabel: overlayAccessibilityLabel,\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return Drawer;\n}(React.Component);\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["views/legacy/Drawer.tsx"],"names":["React","Animated","DEFAULT_DRAWER_WIDTH","SWIPE_MIN_DISTANCE","SWIPE_MIN_OFFSET","SWIPE_MIN_VELOCITY","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","Drawer","Component","componentDidUpdate","prevProps","open","drawerPosition","drawerType","swipeMinDistance","swipeMinVelocity","hideStatusBarOnOpen","props","pendingOpenValue","toggleDrawer","undefined","toggleStatusBar","setValue","isDrawerTypeFront","swipeDistanceThreshold","swipeVelocityThreshold","componentWillUnmount","handleEndInteraction","interactionHandle","InteractionManager","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","drawerStyle","layout","width","StyleSheet","flatten","endsWith","percentage","Number","replace","isFinite","clock","isOpen","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","onTransitionEnd","onTransitionStart","value","Boolean","dragX","onOpen","onClose","forceUpdate","keyboardDismissMode","Keyboard","dismiss","ACTIVE","END","onGestureEnd","CANCELLED","onGestureCancel","onGestureStart","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleContainerLayout","e","handleDrawerLayout","requestAnimationFrame","hidden","hideStatusBar","statusBarAnimation","StatusBar","setHidden","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","children","gestureHandlerProps","overlayAccessibilityLabel","isRight","contentTranslateX","drawerTranslateX","I18nManager","getConstants","isRTL","offset","hitSlop","right","left","styles","main","flexDirection","content","transform","Platform","OS","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"mappings":"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","sourceRoot":"../../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { I18nManager, InteractionManager, Keyboard, Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { DEFAULT_DRAWER_WIDTH, SWIPE_MIN_DISTANCE, SWIPE_MIN_OFFSET, SWIPE_MIN_VELOCITY } from '../../constants';\nimport { DrawerProgressContext } from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport { Overlay } from './Overlay';\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub\n} = Animated;\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\nexport class Drawer extends React.Component {\n  componentDidUpdate(prevProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeMinDistance,\n      swipeMinVelocity,\n      hideStatusBarOnOpen\n    } = this.props;\n    if (\n    // If we're not in the middle of a transition, sync the drawer's open state\n    typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n      this.toggleDrawer(open);\n    }\n    this.pendingOpenValue = undefined;\n    if (open !== prevProps.open && hideStatusBarOnOpen) {\n      this.toggleStatusBar(open);\n    }\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    }\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n    if (prevProps.swipeMinDistance !== swipeMinDistance) {\n      this.swipeDistanceThreshold.setValue(swipeMinDistance ?? SWIPE_MIN_DISTANCE);\n    }\n    if (prevProps.swipeMinVelocity !== swipeMinVelocity) {\n      this.swipeVelocityThreshold.setValue(swipeMinVelocity ?? SWIPE_MIN_VELOCITY);\n    }\n  }\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n  handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n  handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n  getDrawerWidth = () => {\n    const {\n      drawerStyle,\n      layout\n    } = this.props;\n    const {\n      width = DEFAULT_DRAWER_WIDTH\n    } = StyleSheet.flatten(drawerStyle) || {};\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n      if (Number.isFinite(percentage)) {\n        return layout.width * (percentage / 100);\n      }\n    }\n    return typeof width === 'number' ? width : 0;\n  };\n  clock = new Clock();\n  isDrawerTypeFront = new Value(this.props.drawerType === 'front' ? TRUE : FALSE);\n  isOpen = new Value(this.props.open ? TRUE : FALSE);\n  nextIsOpen = new Value(UNSET);\n  isSwiping = new Value(FALSE);\n  initialDrawerWidth = this.getDrawerWidth();\n  gestureState = new Value(GestureState.UNDETERMINED);\n  touchX = new Value(0);\n  velocityX = new Value(0);\n  gestureX = new Value(0);\n  offsetX = new Value(0);\n  position = new Value(this.props.open ? this.initialDrawerWidth * (this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n  containerWidth = new Value(this.props.layout.width);\n  drawerWidth = new Value(this.initialDrawerWidth);\n  drawerOpacity = new Value(this.props.drawerType === 'permanent' ? 1 : 0);\n  drawerPosition = new Value(this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  touchDistanceFromDrawer = cond(this.isDrawerTypeFront, cond(eq(this.drawerPosition, DIRECTION_LEFT), max(\n  // Distance of touch start from left screen edge - Drawer width\n  sub(sub(this.touchX, this.gestureX), this.drawerWidth), 0), min(multiply(\n  // Distance of drawer from left screen edge - Touch start point\n  sub(sub(this.containerWidth, this.drawerWidth), sub(this.touchX, this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n  swipeDistanceThreshold = new Value(this.props.swipeMinDistance ?? SWIPE_MIN_DISTANCE);\n  swipeVelocityThreshold = new Value(this.props.swipeMinVelocity ?? SWIPE_MIN_VELOCITY);\n  currentOpenValue = this.props.open;\n  isStatusBarHidden = false;\n  manuallyTriggerSpring = new Value(FALSE);\n  transitionTo = isOpen => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0)\n    };\n    return block([cond(clockRunning(this.clock), NOOP, [\n    // Animation wasn't running before\n    // Set the initial values and start the clock\n    set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, this.velocityX), set(this.isOpen, isOpen), startClock(this.clock), call([], this.handleStartInteraction), set(this.manuallyTriggerSpring, FALSE)]), spring(this.clock, state, {\n      ...SPRING_CONFIG,\n      toValue\n    }), onChange(state.finished, cond(state.finished, call([this.isOpen], open => {\n      var _this$props$onTransit, _this$props;\n      return (_this$props$onTransit = (_this$props = this.props).onTransitionEnd) === null || _this$props$onTransit === void 0 ? void 0 : _this$props$onTransit.call(_this$props, !open);\n    }), call([this.isOpen], open => {\n      var _this$props$onTransit2, _this$props2;\n      return (_this$props$onTransit2 = (_this$props2 = this.props).onTransitionStart) === null || _this$props$onTransit2 === void 0 ? void 0 : _this$props$onTransit2.call(_this$props2, !open);\n    }))), cond(state.finished, [\n    // Reset gesture and velocity from previous gesture\n    set(this.touchX, 0), set(this.gestureX, 0), set(this.velocityX, 0), set(this.offsetX, 0),\n    // When the animation finishes, stop the clock\n    stopClock(this.clock), call([this.isOpen], _ref => {\n      let [value] = _ref;\n      const open = Boolean(value);\n      this.handleEndInteraction();\n      if (open !== this.props.open) {\n        // Sync drawer's state after animation finished\n        // This shouldn't be necessary, but there seems to be an issue on iOS\n        this.toggleDrawer(this.props.open);\n      }\n    })])]);\n  };\n  dragX = block([onChange(this.isOpen, call([this.isOpen], _ref2 => {\n    let [value] = _ref2;\n    const open = Boolean(value);\n    this.currentOpenValue = open;\n\n    // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n    if (open !== this.props.open) {\n      // If the mode changed, update state\n      if (open) {\n        this.props.onOpen();\n      } else {\n        this.props.onClose();\n      }\n      this.pendingOpenValue = open;\n\n      // Force componentDidUpdate to fire, whether user does a setState or not\n      // This allows us to detect when the user drops the update and revert back\n      // It's necessary to make sure that the state stays in sync\n      this.forceUpdate();\n    }\n  })), onChange(this.nextIsOpen, cond(neq(this.nextIsOpen, UNSET), [\n  // Stop any running animations\n  cond(clockRunning(this.clock), stopClock(this.clock)),\n  // Update the open value to trigger the transition\n  set(this.isOpen, this.nextIsOpen), set(this.gestureX, 0), set(this.nextIsOpen, UNSET)])),\n  // This block must be after the this.isOpen listener since we check for current value\n  onChange(this.isSwiping,\n  // Listen to updates for this value only when it changes\n  // Without `onChange`, this will fire even if the value didn't change\n  // We don't want to call the listeners if the value didn't change\n  call([this.isSwiping], _ref3 => {\n    let [value] = _ref3;\n    const {\n      keyboardDismissMode\n    } = this.props;\n    if (value === TRUE) {\n      if (keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      this.toggleStatusBar(true);\n    } else {\n      this.toggleStatusBar(this.currentOpenValue);\n    }\n  })), onChange(this.gestureState, cond(eq(this.gestureState, GestureState.ACTIVE), call([], this.handleStartInteraction))), onChange(this.gestureState, cond(eq(this.gestureState, GestureState.END), [call([], () => {\n    var _this$props$onGesture, _this$props3;\n    return (_this$props$onGesture = (_this$props3 = this.props).onGestureEnd) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props3);\n  })])), onChange(this.gestureState, cond(eq(this.gestureState, GestureState.CANCELLED), [call([], () => {\n    var _this$props$onGesture2, _this$props4;\n    return (_this$props$onGesture2 = (_this$props4 = this.props).onGestureCancel) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props4);\n  })])), cond(eq(this.gestureState, GestureState.ACTIVE), [cond(this.isSwiping, NOOP, [\n  // We weren't dragging before, set it to true\n  set(this.isSwiping, TRUE),\n  // Also update the drag offset to the last position\n  set(this.offsetX, this.position), call([], () => {\n    var _this$props$onGesture3, _this$props5;\n    return (_this$props$onGesture3 = (_this$props5 = this.props).onGestureStart) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props5);\n  })]),\n  // Update position with previous offset + gesture distance\n  set(this.position, add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)),\n  // Stop animations while we're dragging\n  stopClock(this.clock)], [set(this.isSwiping, FALSE), set(this.touchX, 0), this.transitionTo(cond(this.manuallyTriggerSpring, this.isOpen, cond(or(and(greaterThan(abs(this.gestureX), SWIPE_MIN_OFFSET), greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)), greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)), cond(eq(this.drawerPosition, DIRECTION_LEFT),\n  // If swiped to right, open the drawer, otherwise close it\n  greaterThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0),\n  // If swiped to left, open the drawer, otherwise close it\n  lessThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0)), this.isOpen)))]), this.position]);\n  translateX = cond(eq(this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(this.drawerWidth, -1), this.dragX), 0), max(min(this.drawerWidth, this.dragX), 0));\n  progress = cond(\n  // Check if the drawer width is available to avoid division by zero\n  eq(this.drawerWidth, 0), 0, abs(divide(this.translateX, this.drawerWidth)));\n  handleGestureEvent = event([{\n    nativeEvent: {\n      x: this.touchX,\n      translationX: this.gestureX,\n      velocityX: this.velocityX\n    }\n  }]);\n  handleGestureStateChange = event([{\n    nativeEvent: {\n      state: s => set(this.gestureState, s)\n    }\n  }]);\n  handleContainerLayout = e => this.containerWidth.setValue(e.nativeEvent.layout.width);\n  handleDrawerLayout = e => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() => requestAnimationFrame(() => this.drawerOpacity.setValue(1)));\n  };\n  toggleDrawer = open => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n  toggleStatusBar = hidden => {\n    const {\n      hideStatusBarOnOpen: hideStatusBar,\n      statusBarAnimation\n    } = this.props;\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      children,\n      gestureHandlerProps,\n      overlayAccessibilityLabel\n    } = this.props;\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n    const contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n    const drawerTranslateX = drawerType === 'back' ? I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n    const offset = drawerType === 'back' ? 0 : I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight ?\n    // Extend hitSlop to the side of the screen when drawer is closed\n    // This lets the user drag the drawer from the side of the screen\n    {\n      right: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    } : {\n      left: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    };\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n    return /*#__PURE__*/React.createElement(DrawerProgressContext.Provider, {\n      value: progress\n    }, /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n      activeOffsetX: [-SWIPE_MIN_OFFSET, SWIPE_MIN_OFFSET],\n      failOffsetY: [-SWIPE_MIN_OFFSET, SWIPE_MIN_OFFSET],\n      onGestureEvent: this.handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange,\n      hitSlop: hitSlop,\n      enabled: drawerType !== 'permanent' && swipeEnabled\n    }, gestureHandlerProps), /*#__PURE__*/React.createElement(Animated.View, {\n      onLayout: this.handleContainerLayout,\n      style: [styles.main, {\n        flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n      }]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.content, {\n        transform: drawerType === 'permanent' ?\n        // Reanimated needs the property to be present, but it results in Browser bug\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n        [] : [{\n          translateX: contentTranslateX\n        }]\n      }]\n    }, /*#__PURE__*/React.createElement(View, {\n      accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n      importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n      style: styles.content\n    }, children),\n    // Disable overlay if sidebar is permanent\n    drawerType === 'permanent' ? null : /*#__PURE__*/React.createElement(Overlay, {\n      progress: progress,\n      onPress: () => this.toggleDrawer(false),\n      accessibilityLabel: overlayAccessibilityLabel,\n      style: overlayStyle,\n      accessibilityElementsHidden: !isOpen,\n      importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n    })), /*#__PURE__*/React.createElement(Animated.Code, {\n      // This is needed to make sure that container width updates with `setValue`\n      // Without this, it won't update when not used in styles\n      exec: this.containerWidth\n    }), drawerType === 'permanent' ? null : /*#__PURE__*/React.createElement(Animated.Code, {\n      exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], () => this.currentOpenValue = false)])])])\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      removeClippedSubviews: Platform.OS !== 'ios',\n      onLayout: this.handleDrawerLayout,\n      style: [styles.container, {\n        transform: drawerType === 'permanent' ?\n        // Reanimated needs the property to be present, but it results in Browser bug\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n        [] : [{\n          translateX: drawerTranslateX\n        }],\n        opacity: this.drawerOpacity\n      }, drawerType === 'permanent' ?\n      // Without this, the `left`/`right` values don't get reset\n      isRight ? {\n        right: 0\n      } : {\n        left: 0\n      } : [styles.nonPermanent, isRight ? {\n        right: offset\n      } : {\n        left: offset\n      }, {\n        zIndex: drawerType === 'back' ? -1 : 0\n      }], drawerStyle]\n    }, renderDrawerContent()))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: {\n        overflow: 'hidden'\n      }\n    })\n  }\n});\n//# sourceMappingURL=Drawer.js.map"]},"metadata":{},"sourceType":"module"}