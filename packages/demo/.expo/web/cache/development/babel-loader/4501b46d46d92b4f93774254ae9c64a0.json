{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"useLegacyImplementation\", \"layout\", \"drawerType\", \"drawerPosition\", \"drawerStyle\", \"swipeEnabled\", \"swipeEdgeWidth\", \"swipeMinDistance\", \"swipeMinVelocity\", \"keyboardDismissMode\", \"hideStatusBarOnOpen\", \"statusBarAnimation\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { SWIPE_MIN_DISTANCE, SWIPE_MIN_VELOCITY } from '../constants';\nimport { GestureHandlerRootView } from './GestureHandler';\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nexport function Drawer(_ref2) {\n  var _Reanimated$isConfigu;\n  var _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem,\n    customLayout = _ref2.layout,\n    _ref2$drawerType = _ref2.drawerType,\n    drawerType = _ref2$drawerType === void 0 ? Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _ref2$drawerType,\n    _ref2$drawerPosition = _ref2.drawerPosition,\n    drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.getConstants().isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n    drawerStyle = _ref2.drawerStyle,\n    _ref2$swipeEnabled = _ref2.swipeEnabled,\n    swipeEnabled = _ref2$swipeEnabled === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _ref2$swipeEnabled,\n    _ref2$swipeEdgeWidth = _ref2.swipeEdgeWidth,\n    swipeEdgeWidth = _ref2$swipeEdgeWidth === void 0 ? 32 : _ref2$swipeEdgeWidth,\n    _ref2$swipeMinDistanc = _ref2.swipeMinDistance,\n    swipeMinDistance = _ref2$swipeMinDistanc === void 0 ? SWIPE_MIN_DISTANCE : _ref2$swipeMinDistanc,\n    _ref2$swipeMinVelocit = _ref2.swipeMinVelocity,\n    swipeMinVelocity = _ref2$swipeMinVelocit === void 0 ? SWIPE_MIN_VELOCITY : _ref2$swipeMinVelocit,\n    _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n    keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n    _ref2$hideStatusBarOn = _ref2.hideStatusBarOnOpen,\n    hideStatusBarOnOpen = _ref2$hideStatusBarOn === void 0 ? false : _ref2$hideStatusBarOn,\n    _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n    statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n    style = _ref2.style,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  var Drawer = useLegacyImplementation ? require('./legacy/Drawer').Drawer : require('./modern/Drawer').Drawer;\n  var windowDimensions = useWindowDimensions();\n  var layout = customLayout != null ? customLayout : windowDimensions;\n  return React.createElement(GestureHandlerRootView, {\n    style: [styles.container, style]\n  }, React.createElement(Drawer, _extends({}, rest, {\n    layout: layout,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(layout)\n    }, styles.drawer, drawerStyle],\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeMinDistance: swipeMinDistance,\n    swipeMinVelocity: swipeMinVelocity,\n    keyboardDismissMode: keyboardDismissMode,\n    hideStatusBarOnOpen: hideStatusBarOnOpen,\n    statusBarAnimation: statusBarAnimation\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  drawer: {\n    backgroundColor: 'white'\n  }\n});","map":{"version":3,"sources":["views/Drawer.tsx"],"names":["React","Reanimated","SWIPE_MIN_DISTANCE","SWIPE_MIN_VELOCITY","GestureHandlerRootView","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","Drawer","useLegacyImplementation","isConfigured","layout","customLayout","drawerType","select","ios","default","drawerPosition","I18nManager","getConstants","isRTL","drawerStyle","swipeEnabled","swipeEdgeWidth","swipeMinDistance","swipeMinVelocity","keyboardDismissMode","hideStatusBarOnOpen","statusBarAnimation","style","rest","legacyImplemenationNotAvailable","require","abs","undefined","Error","windowDimensions","useWindowDimensions","styles","container","drawer","StyleSheet","create","flex","backgroundColor"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { I18nManager, Platform, StyleSheet, useWindowDimensions } from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { SWIPE_MIN_DISTANCE, SWIPE_MIN_VELOCITY } from '../constants';\nimport { GestureHandlerRootView } from './GestureHandler';\nconst getDefaultDrawerWidth = _ref => {\n  let {\n    height,\n    width\n  } = _ref;\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  const maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nexport function Drawer(_ref2) {\n  var _Reanimated$isConfigu;\n  let {\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    useLegacyImplementation = !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)),\n    layout: customLayout,\n    drawerType = Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }),\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStyle,\n    swipeEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n    swipeEdgeWidth = 32,\n    swipeMinDistance = SWIPE_MIN_DISTANCE,\n    swipeMinVelocity = SWIPE_MIN_VELOCITY,\n    keyboardDismissMode = 'on-drag',\n    hideStatusBarOnOpen = false,\n    statusBarAnimation = 'slide',\n    style,\n    ...rest\n  } = _ref2;\n  // Reanimated v3 dropped legacy v1 API\n  const legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  const Drawer = useLegacyImplementation ? require('./legacy/Drawer').Drawer : require('./modern/Drawer').Drawer;\n  const windowDimensions = useWindowDimensions();\n  const layout = customLayout ?? windowDimensions;\n  return /*#__PURE__*/React.createElement(GestureHandlerRootView, {\n    style: [styles.container, style]\n  }, /*#__PURE__*/React.createElement(Drawer, _extends({}, rest, {\n    layout: layout,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(layout)\n    }, styles.drawer, drawerStyle],\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeMinDistance: swipeMinDistance,\n    swipeMinVelocity: swipeMinVelocity,\n    keyboardDismissMode: keyboardDismissMode,\n    hideStatusBarOnOpen: hideStatusBarOnOpen,\n    statusBarAnimation: statusBarAnimation\n  })));\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  drawer: {\n    backgroundColor: 'white'\n  }\n});\n//# sourceMappingURL=Drawer.js.map"]},"metadata":{},"sourceType":"module"}