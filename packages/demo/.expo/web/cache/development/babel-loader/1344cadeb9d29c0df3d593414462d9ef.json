{"ast":null,"code":"'use strict';\n\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport WorkletEventHandler from '../reanimated2/WorkletEventHandler';\nimport '../reanimated2/layoutReanimation/animationsManager';\nimport invariant from 'invariant';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport { RNRenderer } from '../reanimated2/platform-specific/RNRenderer';\nimport { configureLayoutAnimations, enableLayoutAnimations } from '../reanimated2/core';\nimport { SharedTransition, LayoutAnimationType } from '../reanimated2/layoutReanimation';\nimport { getShadowNodeWrapperFromRef } from '../reanimated2/fabricUtils';\nimport { removeFromPropsRegistry } from '../reanimated2/PropsRegistry';\nimport { getReduceMotionFromConfig } from '../reanimated2/animation/util';\nimport { maybeBuild } from '../animationBuilder';\nimport { SkipEnteringContext } from '../reanimated2/component/LayoutAnimationConfig';\nimport JSPropsUpdater from './JSPropsUpdater';\nimport { has, flattenArray } from './utils';\nimport setAndForwardRef from './setAndForwardRef';\nimport { isFabric, isJest, isWeb, shouldBeUseWeb } from '../reanimated2/PlatformChecker';\nimport { InlinePropManager } from './InlinePropManager';\nimport { PropsFilter } from './PropsFilter';\nimport { startWebLayoutAnimation, tryActivateLayoutTransition, configureWebLayoutAnimations, getReducedMotionFromConfig } from '../reanimated2/layoutReanimation/web';\nvar IS_WEB = isWeb();\nvar IS_FABRIC = isFabric();\nfunction onlyAnimatedStyles(styles) {\n  return styles.filter(function (style) {\n    return style === null || style === void 0 ? void 0 : style.viewDescriptors;\n  });\n}\nfunction isSameAnimatedStyle(style1, style2) {\n  return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);\n}\nvar isSameAnimatedProps = isSameAnimatedStyle;\nexport function createAnimatedComponent(Component, options) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`);\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n    var _super = _createSuper(AnimatedComponent);\n    function AnimatedComponent(props) {\n      var _this;\n      _classCallCheck(this, AnimatedComponent);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"_styles\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_animatedProps\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"_viewTag\", -1);\n      _defineProperty(_assertThisInitialized(_this), \"_isFirstRender\", true);\n      _defineProperty(_assertThisInitialized(_this), \"animatedStyle\", {\n        value: {}\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_component\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_sharedElementTransition\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_jsPropsUpdater\", new JSPropsUpdater());\n      _defineProperty(_assertThisInitialized(_this), \"_InlinePropManager\", new InlinePropManager());\n      _defineProperty(_assertThisInitialized(_this), \"_PropsFilter\", new PropsFilter());\n      _defineProperty(_assertThisInitialized(_this), \"_viewInfo\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"context\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"_setComponentRef\", setAndForwardRef({\n        getForwardedRef: function getForwardedRef() {\n          return _this.props.forwardedRef;\n        },\n        setLocalRef: function setLocalRef(ref) {\n          var tag = IS_WEB ? ref : findNodeHandle(ref);\n          var _this$props3 = _this.props,\n            layout = _this$props3.layout,\n            entering = _this$props3.entering,\n            exiting = _this$props3.exiting,\n            sharedTransitionTag = _this$props3.sharedTransitionTag;\n          if ((layout || entering || exiting || sharedTransitionTag) && tag != null) {\n            var _this$context;\n            if (!shouldBeUseWeb()) {\n              enableLayoutAnimations(true, false);\n            }\n            if (layout) {\n              configureLayoutAnimations(tag, LayoutAnimationType.LAYOUT, maybeBuild(layout, undefined, AnimatedComponent.displayName));\n            }\n            var skipEntering = (_this$context = _this.context) === null || _this$context === void 0 ? void 0 : _this$context.current;\n            if (entering && !skipEntering) {\n              var _this$props;\n              configureLayoutAnimations(tag, LayoutAnimationType.ENTERING, maybeBuild(entering, (_this$props = _this.props) === null || _this$props === void 0 ? void 0 : _this$props.style, AnimatedComponent.displayName));\n            }\n            if (exiting) {\n              var reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n              if (!reduceMotionInExiting) {\n                var _this$props2;\n                configureLayoutAnimations(tag, LayoutAnimationType.EXITING, maybeBuild(exiting, (_this$props2 = _this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.style, AnimatedComponent.displayName));\n              }\n            }\n            if (sharedTransitionTag && !IS_WEB) {\n              var _this$props$sharedTra;\n              var sharedElementTransition = (_this$props$sharedTra = _this.props.sharedTransitionStyle) != null ? _this$props$sharedTra : new SharedTransition();\n              var reduceMotionInTransition = getReduceMotionFromConfig(sharedElementTransition.getReduceMotion());\n              if (!reduceMotionInTransition) {\n                sharedElementTransition.registerTransition(tag, sharedTransitionTag);\n                _this._sharedElementTransition = sharedElementTransition;\n              }\n            }\n          }\n          if (ref !== _this._component) {\n            _this._component = ref;\n          }\n        }\n      }));\n      if (isJest()) {\n        _this.animatedStyle = {\n          value: {}\n        };\n      }\n      return _this;\n    }\n    _createClass(AnimatedComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this._attachNativeEvents();\n        this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n        this._attachAnimatedStyles();\n        this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n        if (IS_WEB) {\n          configureWebLayoutAnimations();\n          if (!this.props.entering) {\n            this._isFirstRender = false;\n            return;\n          }\n          if (getReducedMotionFromConfig(this.props.entering)) {\n            this._isFirstRender = false;\n            return;\n          }\n          startWebLayoutAnimation(this.props, this._component, LayoutAnimationType.ENTERING);\n        }\n        this._isFirstRender = false;\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$_sharedElementT;\n        this._detachNativeEvents();\n        this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n        this._detachStyles();\n        this._InlinePropManager.detachInlineProps();\n        (_this$_sharedElementT = this._sharedElementTransition) === null || _this$_sharedElementT === void 0 ? void 0 : _this$_sharedElementT.unregisterTransition(this._viewTag);\n        if (IS_WEB && this.props.exiting && !getReducedMotionFromConfig(this.props.exiting)) {\n          startWebLayoutAnimation(this.props, this._component, LayoutAnimationType.EXITING);\n        }\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        var _this$_component, _getScrollableNode, _ref;\n        return (_this$_component = this._component) !== null && _this$_component !== void 0 && _this$_component.getScrollableNode ? (_getScrollableNode = (_ref = this._component).getScrollableNode) === null || _getScrollableNode === void 0 ? void 0 : _getScrollableNode.call(_ref) : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n        var viewTag = null;\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler) {\n            if (viewTag === null) {\n              viewTag = findNodeHandle(options !== null && options !== void 0 && options.setNativeProps ? this : node);\n            }\n            prop.current.registerForEvents(viewTag, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n      }\n    }, {\n      key: \"_detachStyles\",\n      value: function _detachStyles() {\n        if (IS_WEB && this._styles !== null) {\n          for (var style of this._styles) {\n            if (style !== null && style !== void 0 && style.viewsRef) {\n              style.viewsRef.remove(this);\n            }\n          }\n        } else if (this._viewTag !== -1 && this._styles !== null) {\n          var _this$props$animatedP;\n          for (var _style of this._styles) {\n            _style.viewDescriptors.remove(this._viewTag);\n          }\n          if ((_this$props$animatedP = this.props.animatedProps) !== null && _this$props$animatedP !== void 0 && _this$props$animatedP.viewDescriptors) {\n            this.props.animatedProps.viewDescriptors.remove(this._viewTag);\n          }\n          if (IS_FABRIC) {\n            removeFromPropsRegistry(this._viewTag);\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        for (var key in prevProps) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler && prop.current.reattachNeeded) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n        var viewTag = null;\n        for (var _key in this.props) {\n          var _prop = this.props[_key];\n          if (has('current', _prop) && _prop.current instanceof WorkletEventHandler && _prop.current.reattachNeeded) {\n            if (viewTag === null) {\n              var node = this._getEventViewRef();\n              viewTag = findNodeHandle(options !== null && options !== void 0 && options.setNativeProps ? this : node);\n            }\n            _prop.current.registerForEvents(viewTag, _key);\n            _prop.current.reattachNeeded = false;\n          }\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        if (options !== null && options !== void 0 && options.setNativeProps) {\n          options.setNativeProps(this._component, props);\n        } else {\n          var _this$_component2, _this$_component2$set;\n          (_this$_component2 = this._component) === null || _this$_component2 === void 0 ? void 0 : (_this$_component2$set = _this$_component2.setNativeProps) === null || _this$_component2$set === void 0 ? void 0 : _this$_component2$set.call(_this$_component2, props);\n        }\n      }\n    }, {\n      key: \"_getViewInfo\",\n      value: function _getViewInfo() {\n        var _this$_component3, _getAnimatableRef, _ref2;\n        if (this._viewInfo !== undefined) {\n          return this._viewInfo;\n        }\n        var viewTag;\n        var viewName;\n        var shadowNodeWrapper = null;\n        var viewConfig;\n        var component = (_this$_component3 = this._component) !== null && _this$_component3 !== void 0 && _this$_component3.getAnimatableRef ? (_getAnimatableRef = (_ref2 = this._component).getAnimatableRef) === null || _getAnimatableRef === void 0 ? void 0 : _getAnimatableRef.call(_ref2) : this;\n        if (IS_WEB) {\n          viewTag = this._component;\n          viewName = null;\n          shadowNodeWrapper = null;\n          viewConfig = null;\n        } else {\n          var _hostInstance$viewCon;\n          var hostInstance = RNRenderer.findHostInstance_DEPRECATED(component);\n          if (!hostInstance) {\n            throw new Error('[Reanimated] Cannot find host instance for this component. Maybe it renders nothing?');\n          }\n          viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;\n          viewName = hostInstance === null || hostInstance === void 0 ? void 0 : (_hostInstance$viewCon = hostInstance.viewConfig) === null || _hostInstance$viewCon === void 0 ? void 0 : _hostInstance$viewCon.uiViewClassName;\n          viewConfig = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig;\n          if (IS_FABRIC) {\n            shadowNodeWrapper = getShadowNodeWrapperFromRef(this);\n          }\n        }\n        this._viewInfo = {\n          viewTag: viewTag,\n          viewName: viewName,\n          shadowNodeWrapper: shadowNodeWrapper,\n          viewConfig: viewConfig\n        };\n        return this._viewInfo;\n      }\n    }, {\n      key: \"_attachAnimatedStyles\",\n      value: function _attachAnimatedStyles() {\n        var _this2 = this;\n        var _this$props$animatedP2, _this$props$animatedP3;\n        var styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];\n        var prevStyles = this._styles;\n        this._styles = styles;\n        var prevAnimatedProps = this._animatedProps;\n        this._animatedProps = this.props.animatedProps;\n        var _this$_getViewInfo = this._getViewInfo(),\n          viewTag = _this$_getViewInfo.viewTag,\n          viewName = _this$_getViewInfo.viewName,\n          shadowNodeWrapper = _this$_getViewInfo.shadowNodeWrapper,\n          viewConfig = _this$_getViewInfo.viewConfig;\n        var hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) === null || _this$props$animatedP2 === void 0 ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;\n        if (hasReanimated2Props && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n        this._viewTag = viewTag;\n        if (prevStyles) {\n          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && isSameAnimatedStyle(styles[0], prevStyles[0]);\n          if (!hasOneSameStyle) {\n            var _loop = function _loop(prevStyle) {\n              var isPresent = styles.some(function (style) {\n                return isSameAnimatedStyle(style, prevStyle);\n              });\n              if (!isPresent) {\n                prevStyle.viewDescriptors.remove(viewTag);\n              }\n            };\n            for (var prevStyle of prevStyles) {\n              _loop(prevStyle);\n            }\n          }\n        }\n        styles.forEach(function (style) {\n          style.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n          if (isJest()) {\n            _this2.animatedStyle.value = _objectSpread(_objectSpread({}, _this2.animatedStyle.value), style.initial.value);\n            style.animatedStyle.current = _this2.animatedStyle;\n          }\n        });\n        if (prevAnimatedProps && !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {\n          prevAnimatedProps.viewDescriptors.remove(viewTag);\n        }\n        if ((_this$props$animatedP3 = this.props.animatedProps) !== null && _this$props$animatedP3 !== void 0 && _this$props$animatedP3.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps, _prevState, snapshot) {\n        this._reattachNativeEvents(prevProps);\n        this._attachAnimatedStyles();\n        this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n        if (IS_WEB && snapshot !== null && this.props.layout && !getReducedMotionFromConfig(this.props.layout)) {\n          tryActivateLayoutTransition(this.props, this._component, snapshot);\n        }\n      }\n    }, {\n      key: \"getSnapshotBeforeUpdate\",\n      value: function getSnapshotBeforeUpdate() {\n        if (this._component.getBoundingClientRect !== undefined) {\n          return this._component.getBoundingClientRect();\n        }\n        return null;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._PropsFilter.filterNonAnimatedProps(this);\n        if (isJest()) {\n          props.animatedStyle = this.animatedStyle;\n        }\n        if (this._isFirstRender && IS_WEB && props.entering && !getReducedMotionFromConfig(props.entering)) {\n          var _props$style;\n          props.style = _objectSpread(_objectSpread({}, (_props$style = props.style) != null ? _props$style : {}), {}, {\n            visibility: 'hidden'\n          });\n        }\n        var platformProps = Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n        return React.createElement(Component, _extends({}, props, {\n          ref: this._setComponentRef\n        }, platformProps));\n      }\n    }]);\n    return AnimatedComponent;\n  }(React.Component);\n  _defineProperty(AnimatedComponent, \"displayName\", void 0);\n  _defineProperty(AnimatedComponent, \"contextType\", SkipEnteringContext);\n  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;\n  return React.forwardRef(function (props, ref) {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"sources":["createAnimatedComponent.tsx"],"names":["React","WorkletEventHandler","invariant","adaptViewConfig","RNRenderer","configureLayoutAnimations","enableLayoutAnimations","SharedTransition","LayoutAnimationType","getShadowNodeWrapperFromRef","removeFromPropsRegistry","getReduceMotionFromConfig","maybeBuild","SkipEnteringContext","JSPropsUpdater","has","flattenArray","setAndForwardRef","isFabric","isJest","isWeb","shouldBeUseWeb","InlinePropManager","PropsFilter","startWebLayoutAnimation","tryActivateLayoutTransition","configureWebLayoutAnimations","getReducedMotionFromConfig","IS_WEB","IS_FABRIC","onlyAnimatedStyles","styles","filter","style","viewDescriptors","isSameAnimatedStyle","style1","style2","viewsRef","isSameAnimatedProps","createAnimatedComponent","Component","options","prototype","isReactComponent","name","AnimatedComponent","_defineProperty","value","constructor","props","animatedStyle","componentDidMount","_attachNativeEvents","_jsPropsUpdater","addOnJSPropsChangeListener","_attachAnimatedStyles","_InlinePropManager","attachInlineProps","_getViewInfo","entering","_isFirstRender","_component","ENTERING","componentWillUnmount","_detachNativeEvents","removeOnJSPropsChangeListener","_detachStyles","detachInlineProps","_sharedElementTransition","unregisterTransition","_viewTag","exiting","EXITING","_getEventViewRef","getScrollableNode","node","viewTag","key","prop","current","findNodeHandle","setNativeProps","registerForEvents","unregisterFromEvents","_styles","remove","animatedProps","_reattachNativeEvents","prevProps","reattachNeeded","_updateFromNative","_viewInfo","undefined","viewName","shadowNodeWrapper","viewConfig","component","getAnimatableRef","hostInstance","findHostInstance_DEPRECATED","Error","_nativeTag","uiViewClassName","prevStyles","prevAnimatedProps","_animatedProps","hasReanimated2Props","length","hasOneSameStyle","prevStyle","isPresent","some","forEach","add","tag","initial","componentDidUpdate","_prevState","snapshot","layout","getForwardedRef","forwardedRef","setLocalRef","ref","sharedTransitionTag","LAYOUT","displayName","skipEntering","context","reduceMotionInExiting","getReduceMotion","sharedElementTransition","sharedTransitionStyle","reduceMotionInTransition","registerTransition","getSnapshotBeforeUpdate","getBoundingClientRect","render","_PropsFilter","filterNonAnimatedProps","visibility","platformProps","Platform","select","web","default","collapsable","_setComponentRef","forwardRef"],"mappings":"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","sourcesContent":["'use strict';\nimport type {\n  Component,\n  ComponentClass,\n  ComponentType,\n  FunctionComponent,\n  MutableRefObject,\n} from 'react';\nimport React from 'react';\nimport { findNodeHandle, Platform } from 'react-native';\nimport WorkletEventHandler from '../reanimated2/WorkletEventHandler';\nimport '../reanimated2/layoutReanimation/animationsManager';\nimport invariant from 'invariant';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport { RNRenderer } from '../reanimated2/platform-specific/RNRenderer';\nimport {\n  configureLayoutAnimations,\n  enableLayoutAnimations,\n} from '../reanimated2/core';\nimport {\n  SharedTransition,\n  LayoutAnimationType,\n} from '../reanimated2/layoutReanimation';\nimport type { StyleProps, ShadowNodeWrapper } from '../reanimated2/commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../reanimated2/fabricUtils';\nimport { removeFromPropsRegistry } from '../reanimated2/PropsRegistry';\nimport { getReduceMotionFromConfig } from '../reanimated2/animation/util';\nimport { maybeBuild } from '../animationBuilder';\nimport { SkipEnteringContext } from '../reanimated2/component/LayoutAnimationConfig';\nimport type { AnimateProps } from '../reanimated2';\nimport JSPropsUpdater from './JSPropsUpdater';\nimport type {\n  AnimatedComponentProps,\n  AnimatedProps,\n  InitialComponentProps,\n  AnimatedComponentRef,\n  IAnimatedComponentInternal,\n  ViewInfo,\n} from './commonTypes';\nimport { has, flattenArray } from './utils';\nimport setAndForwardRef from './setAndForwardRef';\nimport {\n  isFabric,\n  isJest,\n  isWeb,\n  shouldBeUseWeb,\n} from '../reanimated2/PlatformChecker';\nimport { InlinePropManager } from './InlinePropManager';\nimport { PropsFilter } from './PropsFilter';\nimport {\n  startWebLayoutAnimation,\n  tryActivateLayoutTransition,\n  configureWebLayoutAnimations,\n  getReducedMotionFromConfig,\n} from '../reanimated2/layoutReanimation/web';\nimport type { CustomConfig } from '../reanimated2/layoutReanimation/web/config';\nimport type { FlatList, FlatListProps } from 'react-native';\n\nconst IS_WEB = isWeb();\nconst IS_FABRIC = isFabric();\n\nfunction onlyAnimatedStyles(styles: StyleProps[]): StyleProps[] {\n  return styles.filter((style) => style?.viewDescriptors);\n}\n\nfunction isSameAnimatedStyle(\n  style1?: StyleProps,\n  style2?: StyleProps\n): boolean {\n  // We cannot use equality check to compare useAnimatedStyle outputs directly.\n  // Instead, we can compare its viewsRefs.\n  return style1?.viewsRef === style2?.viewsRef;\n}\n\nconst isSameAnimatedProps = isSameAnimatedStyle;\n\ntype Options<P> = {\n  setNativeProps: (ref: AnimatedComponentRef, props: P) => void;\n};\n\n/**\n * Lets you create an Animated version of any React Native component.\n *\n * @param component - The component you want to make animatable.\n * @returns A component that Reanimated is capable of animating.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/createAnimatedComponent\n */\n\n/**\n * @deprecated Please use `Animated.FlatList` component instead of calling `Animated.createAnimatedComponent(FlatList)` manually.\n */\n// @ts-ignore This is required to create this overload, since type of createAnimatedComponent is incorrect and doesn't include typeof FlatList\nexport function createAnimatedComponent(\n  component: typeof FlatList<unknown>,\n  options?: Options<any>\n): ComponentClass<AnimateProps<FlatListProps<unknown>>>;\n\nexport function createAnimatedComponent<P extends object>(\n  component: FunctionComponent<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>>;\n\nexport function createAnimatedComponent<P extends object>(\n  component: ComponentClass<P>,\n  options?: Options<P>\n): ComponentClass<AnimateProps<P>>;\n\nexport function createAnimatedComponent(\n  Component: ComponentType<InitialComponentProps>,\n  options?: Options<InitialComponentProps>\n): any {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`\n  );\n\n  class AnimatedComponent\n    extends React.Component<AnimatedComponentProps<InitialComponentProps>>\n    implements IAnimatedComponentInternal\n  {\n    _styles: StyleProps[] | null = null;\n    _animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;\n    _viewTag = -1;\n    _isFirstRender = true;\n    animatedStyle: { value: StyleProps } = { value: {} };\n    _component: AnimatedComponentRef | HTMLElement | null = null;\n    _sharedElementTransition: SharedTransition | null = null;\n    _jsPropsUpdater = new JSPropsUpdater();\n    _InlinePropManager = new InlinePropManager();\n    _PropsFilter = new PropsFilter();\n    _viewInfo?: ViewInfo;\n    static displayName: string;\n    static contextType = SkipEnteringContext;\n    context!: React.ContextType<typeof SkipEnteringContext>;\n\n    constructor(props: AnimatedComponentProps<InitialComponentProps>) {\n      super(props);\n      if (isJest()) {\n        this.animatedStyle = { value: {} };\n      }\n    }\n\n    componentDidMount() {\n      this._attachNativeEvents();\n      this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      if (IS_WEB) {\n        configureWebLayoutAnimations();\n\n        if (!this.props.entering) {\n          this._isFirstRender = false;\n          return;\n        }\n\n        if (getReducedMotionFromConfig(this.props.entering as CustomConfig)) {\n          this._isFirstRender = false;\n          return;\n        }\n\n        startWebLayoutAnimation(\n          this.props,\n          this._component as HTMLElement,\n          LayoutAnimationType.ENTERING\n        );\n      }\n\n      this._isFirstRender = false;\n    }\n\n    componentWillUnmount() {\n      this._detachNativeEvents();\n      this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._InlinePropManager.detachInlineProps();\n      this._sharedElementTransition?.unregisterTransition(this._viewTag);\n\n      if (\n        IS_WEB &&\n        this.props.exiting &&\n        !getReducedMotionFromConfig(this.props.exiting as CustomConfig)\n      ) {\n        startWebLayoutAnimation(\n          this.props,\n          this._component as HTMLElement,\n          LayoutAnimationType.EXITING\n        );\n      }\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return (this._component as AnimatedComponentRef)?.getScrollableNode\n        ? (this._component as AnimatedComponentRef).getScrollableNode?.()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef() as AnimatedComponentRef;\n      let viewTag = null; // We set it only if needed\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          if (viewTag === null) {\n            viewTag = findNodeHandle(options?.setNativeProps ? this : node);\n          }\n          prop.current.registerForEvents(viewTag as number, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n    }\n\n    _detachStyles() {\n      if (IS_WEB && this._styles !== null) {\n        for (const style of this._styles) {\n          if (style?.viewsRef) {\n            style.viewsRef.remove(this);\n          }\n        }\n      } else if (this._viewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(this._viewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(this._viewTag);\n        }\n        if (IS_FABRIC) {\n          removeFromPropsRegistry(this._viewTag);\n        }\n      }\n    }\n\n    _reattachNativeEvents(\n      prevProps: AnimatedComponentProps<InitialComponentProps>\n    ) {\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n\n      let viewTag = null;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          if (viewTag === null) {\n            const node = this._getEventViewRef() as AnimatedComponentRef;\n            viewTag = findNodeHandle(options?.setNativeProps ? this : node);\n          }\n          prop.current.registerForEvents(viewTag as number, key);\n          prop.current.reattachNeeded = false;\n        }\n      }\n    }\n\n    _updateFromNative(props: StyleProps) {\n      if (options?.setNativeProps) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.setNativeProps(this._component as AnimatedComponentRef, props);\n      } else {\n        // eslint-disable-next-line no-unused-expressions\n        (this._component as AnimatedComponentRef)?.setNativeProps?.(props);\n      }\n    }\n\n    _getViewInfo(): ViewInfo {\n      if (this._viewInfo !== undefined) {\n        return this._viewInfo;\n      }\n\n      let viewTag: number | HTMLElement | null;\n      let viewName: string | null;\n      let shadowNodeWrapper: ShadowNodeWrapper | null = null;\n      let viewConfig;\n      // Component can specify ref which should be animated when animated version of the component is created.\n      // Otherwise, we animate the component itself.\n      const component = (this._component as AnimatedComponentRef)\n        ?.getAnimatableRef\n        ? (this._component as AnimatedComponentRef).getAnimatableRef?.()\n        : this;\n\n      if (IS_WEB) {\n        // At this point I assume that `_setComponentRef` was already called and `_component` is set.\n        // `this._component` on web represents HTMLElement of our component, that's why we use casting\n        viewTag = this._component as HTMLElement;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(component);\n        if (!hostInstance) {\n          throw new Error(\n            '[Reanimated] Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n        // we can access view tag in the same way it's accessed here https://github.com/facebook/react/blob/e3f4eb7272d4ca0ee49f27577156b57eeb07cf73/packages/react-native-renderer/src/ReactFabric.js#L146\n        viewTag = hostInstance?._nativeTag;\n        /**\n         * RN uses viewConfig for components for storing different properties of the component(example: https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent.js#L24).\n         * The name we're looking for is in the field named uiViewClassName.\n         */\n        viewName = hostInstance?.viewConfig?.uiViewClassName;\n\n        viewConfig = hostInstance?.viewConfig;\n\n        if (IS_FABRIC) {\n          shadowNodeWrapper = getShadowNodeWrapperFromRef(this);\n        }\n      }\n      this._viewInfo = { viewTag, viewName, shadowNodeWrapper, viewConfig };\n      return this._viewInfo;\n    }\n\n    _attachAnimatedStyles() {\n      const styles = this.props.style\n        ? onlyAnimatedStyles(flattenArray<StyleProps>(this.props.style))\n        : [];\n      const prevStyles = this._styles;\n      this._styles = styles;\n\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = this.props.animatedProps;\n\n      const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n        this._getViewInfo();\n\n      // update UI props whitelist for this view\n      const hasReanimated2Props =\n        this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n\n      this._viewTag = viewTag as number;\n\n      // remove old styles\n      if (prevStyles) {\n        // in most of the cases, views have only a single animated style and it remains unchanged\n        const hasOneSameStyle =\n          styles.length === 1 &&\n          prevStyles.length === 1 &&\n          isSameAnimatedStyle(styles[0], prevStyles[0]);\n\n        if (!hasOneSameStyle) {\n          // otherwise, remove each style that is not present in new styles\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some((style) =>\n              isSameAnimatedStyle(style, prevStyle)\n            );\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n\n      styles.forEach((style) => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper,\n        });\n        if (isJest()) {\n          /**\n           * We need to connect Jest's TestObject instance whose contains just props object\n           * with the updateProps() function where we update the properties of the component.\n           * We can't update props object directly because TestObject contains a copy of props - look at render function:\n           * const props = this._filterNonAnimatedProps(this.props);\n           */\n          this.animatedStyle.value = {\n            ...this.animatedStyle.value,\n            ...style.initial.value,\n          };\n          style.animatedStyle.current = this.animatedStyle;\n        }\n      });\n\n      // detach old animatedProps\n      if (\n        prevAnimatedProps &&\n        !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)\n      ) {\n        prevAnimatedProps.viewDescriptors!.remove(viewTag as number);\n      }\n\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          tag: viewTag as number,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          name: viewName!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n    }\n\n    componentDidUpdate(\n      prevProps: AnimatedComponentProps<InitialComponentProps>,\n      _prevState: Readonly<unknown>,\n      // This type comes straight from React\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      snapshot: DOMRect | null\n    ) {\n      this._reattachNativeEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      // Snapshot won't be undefined because it comes from getSnapshotBeforeUpdate method\n      if (\n        IS_WEB &&\n        snapshot !== null &&\n        this.props.layout &&\n        !getReducedMotionFromConfig(this.props.layout as CustomConfig)\n      ) {\n        tryActivateLayoutTransition(\n          this.props,\n          this._component as HTMLElement,\n          snapshot\n        );\n      }\n    }\n\n    _setComponentRef = setAndForwardRef<Component | HTMLElement>({\n      getForwardedRef: () =>\n        this.props.forwardedRef as MutableRefObject<\n          Component<Record<string, unknown>, Record<string, unknown>, unknown>\n        >,\n      setLocalRef: (ref) => {\n        // TODO update config\n\n        const tag = IS_WEB\n          ? (ref as HTMLElement)\n          : findNodeHandle(ref as Component);\n\n        const { layout, entering, exiting, sharedTransitionTag } = this.props;\n        if (\n          (layout || entering || exiting || sharedTransitionTag) &&\n          tag != null\n        ) {\n          if (!shouldBeUseWeb()) {\n            enableLayoutAnimations(true, false);\n          }\n          if (layout) {\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.LAYOUT,\n              maybeBuild(\n                layout,\n                undefined /* We don't have to warn user if style has common properties with animation for LAYOUT */,\n                AnimatedComponent.displayName\n              )\n            );\n          }\n          const skipEntering = this.context?.current;\n          if (entering && !skipEntering) {\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.ENTERING,\n              maybeBuild(\n                entering,\n                this.props?.style,\n                AnimatedComponent.displayName\n              )\n            );\n          }\n          if (exiting) {\n            const reduceMotionInExiting =\n              'getReduceMotion' in exiting &&\n              typeof exiting.getReduceMotion === 'function'\n                ? getReduceMotionFromConfig(exiting.getReduceMotion())\n                : getReduceMotionFromConfig();\n            if (!reduceMotionInExiting) {\n              configureLayoutAnimations(\n                tag,\n                LayoutAnimationType.EXITING,\n                maybeBuild(\n                  exiting,\n                  this.props?.style,\n                  AnimatedComponent.displayName\n                )\n              );\n            }\n          }\n          if (sharedTransitionTag && !IS_WEB) {\n            const sharedElementTransition =\n              this.props.sharedTransitionStyle ?? new SharedTransition();\n            const reduceMotionInTransition = getReduceMotionFromConfig(\n              sharedElementTransition.getReduceMotion()\n            );\n            if (!reduceMotionInTransition) {\n              sharedElementTransition.registerTransition(\n                tag as number,\n                sharedTransitionTag\n              );\n              this._sharedElementTransition = sharedElementTransition;\n            }\n          }\n        }\n\n        if (ref !== this._component) {\n          this._component = ref;\n        }\n      },\n    });\n\n    // This is a component lifecycle method from React, therefore we are not calling it directly.\n    // It is called before the component gets rerendered. This way we can access components' position before it changed\n    // and later on, in componentDidUpdate, calculate translation for layout transition.\n    getSnapshotBeforeUpdate() {\n      if (\n        (this._component as HTMLElement).getBoundingClientRect !== undefined\n      ) {\n        return (this._component as HTMLElement).getBoundingClientRect();\n      }\n\n      return null;\n    }\n\n    render() {\n      const props = this._PropsFilter.filterNonAnimatedProps(this);\n\n      if (isJest()) {\n        props.animatedStyle = this.animatedStyle;\n      }\n\n      // Layout animations on web are set inside `componentDidMount` method, which is called after first render.\n      // Because of that we can encounter a situation in which component is visible for a short amount of time, and later on animation triggers.\n      // I've tested that on various browsers and devices and it did not happen to me. To be sure that it won't happen to someone else,\n      // I've decided to hide component at first render. Its visibility is reset in `componentDidMount`.\n      if (\n        this._isFirstRender &&\n        IS_WEB &&\n        props.entering &&\n        !getReducedMotionFromConfig(props.entering as CustomConfig)\n      ) {\n        props.style = {\n          ...(props.style ?? {}),\n          visibility: 'hidden', // Hide component until `componentDidMount` triggers\n        };\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n\n      return (\n        <Component\n          {...props}\n          // Casting is used here, because ref can be null - in that case it cannot be assigned to HTMLElement.\n          // After spending some time trying to figure out what to do with this problem, we decided to leave it this way\n          ref={this._setComponentRef as (ref: Component) => void}\n          {...platformProps}\n        />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  return React.forwardRef<Component>((props, ref) => {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref === null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}