{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { State } from '../../State';\nimport { PointerType, TouchEventType, EventTypes } from '../interfaces';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerTracker from '../tools/PointerTracker';\nvar GestureHandler = function () {\n  function GestureHandler(delegate) {\n    var _this = this;\n    _classCallCheck(this, GestureHandler);\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"currentState\", State.UNDETERMINED);\n    _defineProperty(this, \"shouldCancellWhenOutside\", false);\n    _defineProperty(this, \"hasCustomActivationCriteria\", false);\n    _defineProperty(this, \"enabled\", false);\n    _defineProperty(this, \"viewRef\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"config\", {\n      enabled: false\n    });\n    _defineProperty(this, \"tracker\", new PointerTracker());\n    _defineProperty(this, \"activationIndex\", 0);\n    _defineProperty(this, \"awaiting\", false);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"shouldResetProgress\", false);\n    _defineProperty(this, \"pointerType\", PointerType.NONE);\n    _defineProperty(this, \"delegate\", void 0);\n    _defineProperty(this, \"sendEvent\", function (newState, oldState) {\n      var _this$propsRef$curren = _this.propsRef.current,\n        onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n        onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n      var resultEvent = _this.transformEventData(newState, oldState);\n      if (_this.lastSentState !== newState) {\n        _this.lastSentState = newState;\n        invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n      }\n      if (_this.currentState === State.ACTIVE) {\n        resultEvent.nativeEvent.oldState = undefined;\n        invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n      }\n    });\n    this.delegate = delegate;\n  }\n  _createClass(GestureHandler, [{\n    key: \"init\",\n    value: function init(viewRef, propsRef) {\n      this.propsRef = propsRef;\n      this.viewRef = viewRef;\n      this.currentState = State.UNDETERMINED;\n      this.delegate.init(viewRef, this);\n    }\n  }, {\n    key: \"attachEventManager\",\n    value: function attachEventManager(manager) {\n      manager.setOnPointerDown(this.onPointerDown.bind(this));\n      manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n      manager.setOnPointerUp(this.onPointerUp.bind(this));\n      manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n      manager.setOnPointerMove(this.onPointerMove.bind(this));\n      manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n      manager.setOnPointerLeave(this.onPointerLeave.bind(this));\n      manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n      manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n      manager.setOnPointerMoveOver(this.onPointerMoveOver.bind(this));\n      manager.setOnPointerMoveOut(this.onPointerMoveOut.bind(this));\n      manager.setListeners();\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {}\n  }, {\n    key: \"onReset\",\n    value: function onReset() {}\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {}\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.tracker.resetTracker();\n      this.onReset();\n      this.resetProgress();\n      this.delegate.reset();\n      this.currentState = State.UNDETERMINED;\n    }\n  }, {\n    key: \"moveToState\",\n    value: function moveToState(newState, sendIfDisabled) {\n      if (this.currentState === newState) {\n        return;\n      }\n      var oldState = this.currentState;\n      this.currentState = newState;\n      if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && this.isFinished()) {\n        this.cancelTouches();\n      }\n      GestureHandlerOrchestrator.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n      this.onStateChange(newState, oldState);\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(_newState, _oldState) {}\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      if (!this.checkHitSlop()) {\n        return;\n      }\n      if (this.currentState === State.UNDETERMINED) {\n        this.moveToState(State.BEGAN);\n      }\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.BEGAN) {\n        this.delegate.onFail();\n        this.moveToState(State.FAILED, sendIfDisabled);\n      }\n      this.resetProgress();\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.onCancel();\n        this.delegate.onCancel();\n        this.moveToState(State.CANCELLED, sendIfDisabled);\n      }\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      var _force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.delegate.onActivate();\n        this.moveToState(State.ACTIVE);\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this.currentState === State.BEGAN || this.currentState === State.ACTIVE) {\n        this.delegate.onEnd();\n        this.moveToState(State.END);\n      }\n      this.resetProgress();\n    }\n  }, {\n    key: \"isAwaiting\",\n    value: function isAwaiting() {\n      return this.awaiting;\n    }\n  }, {\n    key: \"setAwaiting\",\n    value: function setAwaiting(value) {\n      this.awaiting = value;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(value) {\n      this.active = value;\n    }\n  }, {\n    key: \"getShouldResetProgress\",\n    value: function getShouldResetProgress() {\n      return this.shouldResetProgress;\n    }\n  }, {\n    key: \"setShouldResetProgress\",\n    value: function setShouldResetProgress(value) {\n      this.shouldResetProgress = value;\n    }\n  }, {\n    key: \"getActivationIndex\",\n    value: function getActivationIndex() {\n      return this.activationIndex;\n    }\n  }, {\n    key: \"setActivationIndex\",\n    value: function setActivationIndex(value) {\n      this.activationIndex = value;\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldWaitForHandlerFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRequireToWaitForFailure\",\n    value: function shouldRequireToWaitForFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler) {\n      if (handler === this) {\n        return true;\n      }\n      return InteractionManager.getInstance().shouldRecognizeSimultaneously(this, handler);\n    }\n  }, {\n    key: \"shouldBeCancelledByOther\",\n    value: function shouldBeCancelledByOther(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldHandlerBeCancelledBy(this, handler);\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n      this.pointerType = event.pointerType;\n      if (this.pointerType === PointerType.TOUCH) {\n        GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n      }\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.tryToSendMoveEvent(false);\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerLeave\",\n    value: function onPointerLeave(event) {\n      if (this.shouldCancellWhenOutside) {\n        switch (this.currentState) {\n          case State.ACTIVE:\n            this.cancel();\n            break;\n          case State.BEGAN:\n            this.fail();\n            break;\n        }\n        return;\n      }\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n      this.cancel();\n      this.reset();\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.tryToSendMoveEvent(true);\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerMoveOver\",\n    value: function onPointerMoveOver(_event) {}\n  }, {\n    key: \"onPointerMoveOut\",\n    value: function onPointerMoveOut(_event) {}\n  }, {\n    key: \"tryToSendMoveEvent\",\n    value: function tryToSendMoveEvent(out) {\n      if (this.enabled && this.active && (!out || out && !this.shouldCancellWhenOutside)) {\n        this.sendEvent(this.currentState, this.currentState);\n      }\n    }\n  }, {\n    key: \"sendTouchEvent\",\n    value: function sendTouchEvent(event) {\n      if (!this.enabled) {\n        return;\n      }\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      var touchEvent = this.transformTouchEvent(event);\n      if (touchEvent) {\n        invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n      }\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(newState, oldState) {\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: this.tracker.getTrackedPointersCount(),\n          state: newState,\n          pointerInside: this.delegate.isPointerInBounds({\n            x: this.tracker.getLastAvgX(),\n            y: this.tracker.getLastAvgY()\n          })\n        }, this.transformNativeEvent()), {}, {\n          handlerTag: this.handlerTag,\n          target: this.viewRef,\n          oldState: newState !== oldState ? oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformTouchEvent\",\n    value: function transformTouchEvent(event) {\n      var _this2 = this;\n      var _event$touchEventType;\n      var rect = this.delegate.measureView();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n      if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n        return;\n      }\n      trackerData.forEach(function (element, key) {\n        var id = _this2.tracker.getMappedTouchEventId(key);\n        all.push({\n          id: id,\n          x: element.lastX - rect.pageX,\n          y: element.lastY - rect.pageY,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n      if (event.eventType !== EventTypes.CANCEL) {\n        changed.push({\n          id: this.tracker.getMappedTouchEventId(event.pointerId),\n          x: event.x - rect.pageX,\n          y: event.y - rect.pageY,\n          absoluteX: event.x,\n          absoluteY: event.y\n        });\n      } else {\n        trackerData.forEach(function (element, key) {\n          var id = _this2.tracker.getMappedTouchEventId(key);\n          changed.push({\n            id: id,\n            x: element.lastX - rect.pageX,\n            y: element.lastY - rect.pageY,\n            absoluteX: element.lastX,\n            absoluteY: element.lastY\n          });\n        });\n      }\n      var eventType = TouchEventType.UNDETERMINED;\n      switch (event.eventType) {\n        case EventTypes.DOWN:\n        case EventTypes.ADDITIONAL_POINTER_DOWN:\n          eventType = TouchEventType.DOWN;\n          break;\n        case EventTypes.UP:\n        case EventTypes.ADDITIONAL_POINTER_UP:\n          eventType = TouchEventType.UP;\n          break;\n        case EventTypes.MOVE:\n          eventType = TouchEventType.MOVE;\n          break;\n        case EventTypes.CANCEL:\n          eventType = TouchEventType.CANCELLED;\n          break;\n      }\n      var numberOfTouches = all.length;\n      if (event.eventType === EventTypes.UP || event.eventType === EventTypes.ADDITIONAL_POINTER_UP) {\n        --numberOfTouches;\n      }\n      return {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: numberOfTouches\n        },\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"cancelTouches\",\n    value: function cancelTouches() {\n      var _this3 = this;\n      var rect = this.delegate.measureView();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n      if (trackerData.size === 0) {\n        return;\n      }\n      trackerData.forEach(function (element, key) {\n        var id = _this3.tracker.getMappedTouchEventId(key);\n        all.push({\n          id: id,\n          x: element.lastX - rect.pageX,\n          y: element.lastY - rect.pageY,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n        changed.push({\n          id: id,\n          x: element.lastX - rect.pageX,\n          y: element.lastY - rect.pageY,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n      var cancelEvent = {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: TouchEventType.CANCELLED,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: all.length\n        },\n        timeStamp: Date.now()\n      };\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent() {\n      var rect = this.delegate.measureView();\n      return {\n        x: this.tracker.getLastAvgX() - rect.pageX,\n        y: this.tracker.getLastAvgY() - rect.pageY,\n        absoluteX: this.tracker.getLastAvgX(),\n        absoluteY: this.tracker.getLastAvgY()\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n        enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n        props = _objectWithoutProperties(_ref, _excluded);\n      this.config = _objectSpread({\n        enabled: enabled\n      }, props);\n      this.enabled = enabled;\n      if (this.config.shouldCancelWhenOutside !== undefined) {\n        this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n      }\n      this.validateHitSlops();\n      if (this.enabled) {\n        return;\n      }\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.fail(true);\n          break;\n        case State.UNDETERMINED:\n          GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(this);\n          break;\n        default:\n          this.cancel(true);\n          break;\n      }\n    }\n  }, {\n    key: \"checkCustomActivationCriteria\",\n    value: function checkCustomActivationCriteria(criterias) {\n      for (var key in this.config) {\n        if (criterias.indexOf(key) >= 0) {\n          this.hasCustomActivationCriteria = true;\n        }\n      }\n    }\n  }, {\n    key: \"validateHitSlops\",\n    value: function validateHitSlops() {\n      if (!this.config.hitSlop) {\n        return;\n      }\n      if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n        throw new Error('HitSlop Error: Cannot define left, right and width at the same time');\n      }\n      if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n        throw new Error('HitSlop Error: When width is defined, either left or right has to be defined');\n      }\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n        throw new Error('HitSlop Error: Cannot define top, bottom and height at the same time');\n      }\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n        throw new Error('HitSlop Error: When height is defined, either top or bottom has to be defined');\n      }\n    }\n  }, {\n    key: \"checkHitSlop\",\n    value: function checkHitSlop() {\n      if (!this.config.hitSlop) {\n        return true;\n      }\n      var _this$delegate$measur = this.delegate.measureView(),\n        width = _this$delegate$measur.width,\n        height = _this$delegate$measur.height;\n      var left = 0;\n      var top = 0;\n      var right = width;\n      var bottom = height;\n      if (this.config.hitSlop.horizontal !== undefined) {\n        left -= this.config.hitSlop.horizontal;\n        right += this.config.hitSlop.horizontal;\n      }\n      if (this.config.hitSlop.vertical !== undefined) {\n        top -= this.config.hitSlop.vertical;\n        bottom += this.config.hitSlop.vertical;\n      }\n      if (this.config.hitSlop.left !== undefined) {\n        left = -this.config.hitSlop.left;\n      }\n      if (this.config.hitSlop.right !== undefined) {\n        right = width + this.config.hitSlop.right;\n      }\n      if (this.config.hitSlop.top !== undefined) {\n        top = -this.config.hitSlop.top;\n      }\n      if (this.config.hitSlop.bottom !== undefined) {\n        bottom = width + this.config.hitSlop.bottom;\n      }\n      if (this.config.hitSlop.width !== undefined) {\n        if (this.config.hitSlop.left !== undefined) {\n          right = left + this.config.hitSlop.width;\n        } else if (this.config.hitSlop.right !== undefined) {\n          left = right - this.config.hitSlop.width;\n        }\n      }\n      if (this.config.hitSlop.height !== undefined) {\n        if (this.config.hitSlop.top !== undefined) {\n          bottom = top + this.config.hitSlop.height;\n        } else if (this.config.hitSlop.bottom !== undefined) {\n          top = bottom - this.config.hitSlop.height;\n        }\n      }\n      var rect = this.delegate.measureView();\n      var offsetX = this.tracker.getLastX() - rect.pageX;\n      var offsetY = this.tracker.getLastY() - rect.pageY;\n      if (offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {}\n  }, {\n    key: \"getTag\",\n    value: function getTag() {\n      return this.handlerTag;\n    }\n  }, {\n    key: \"setTag\",\n    value: function setTag(tag) {\n      this.handlerTag = tag;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"getDelegate\",\n    value: function getDelegate() {\n      return this.delegate;\n    }\n  }, {\n    key: \"getTracker\",\n    value: function getTracker() {\n      return this.tracker;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      return this.tracker.getTrackedPointersID();\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.currentState;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished() {\n      return this.currentState === State.END || this.currentState === State.FAILED || this.currentState === State.CANCELLED;\n    }\n  }, {\n    key: \"setShouldCancelWhenOutside\",\n    value: function setShouldCancelWhenOutside(shouldCancel) {\n      this.shouldCancellWhenOutside = shouldCancel;\n    }\n  }, {\n    key: \"getShouldCancelWhenOutside\",\n    value: function getShouldCancelWhenOutside() {\n      return this.shouldCancellWhenOutside;\n    }\n  }, {\n    key: \"getPointerType\",\n    value: function getPointerType() {\n      return this.pointerType;\n    }\n  }]);\n  return GestureHandler;\n}();\nexport { GestureHandler as default };\nfunction invokeNullableMethod(method, event) {\n  if (!method) {\n    return;\n  }\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    var handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n  var argMapping = method.__nodeConfig.argMapping;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n  for (var _ref2 of argMapping.entries()) {\n    var _ref3 = _slicedToArray(_ref2, 2);\n    var index = _ref3[0];\n    var _ref3$ = _slicedToArray(_ref3[1], 2);\n    var key = _ref3$[0];\n    var value = _ref3$[1];\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n    var nativeValue = event.nativeEvent[key];\n    if (value !== null && value !== void 0 && value.setValue) {\n      value.setValue(nativeValue);\n    } else {\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n  return;\n}","map":{"version":3,"sources":["GestureHandler.ts"],"names":["State","PointerType","TouchEventType","EventTypes","GestureHandlerOrchestrator","InteractionManager","PointerTracker","GestureHandler","UNDETERMINED","enabled","NONE","constructor","delegate","init","viewRef","propsRef","currentState","attachEventManager","manager","setOnPointerDown","onPointerDown","bind","setOnPointerAdd","onPointerAdd","setOnPointerUp","onPointerUp","setOnPointerRemove","onPointerRemove","setOnPointerMove","onPointerMove","setOnPointerEnter","onPointerEnter","setOnPointerLeave","onPointerLeave","setOnPointerCancel","onPointerCancel","setOnPointerOutOfBounds","onPointerOutOfBounds","setOnPointerMoveOver","onPointerMoveOver","setOnPointerMoveOut","onPointerMoveOut","setListeners","onCancel","onReset","resetProgress","reset","tracker","resetTracker","moveToState","newState","sendIfDisabled","oldState","getTrackedPointersCount","config","needsPointerData","isFinished","cancelTouches","getInstance","onHandlerStateChange","onStateChange","_newState","_oldState","begin","checkHitSlop","BEGAN","fail","ACTIVE","onFail","FAILED","cancel","CANCELLED","activate","_force","onActivate","end","onEnd","END","isAwaiting","awaiting","setAwaiting","value","isActive","active","setActive","getShouldResetProgress","shouldResetProgress","setShouldResetProgress","getActivationIndex","activationIndex","setActivationIndex","shouldWaitForHandlerFailure","handler","shouldRequireToWaitForFailure","shouldRequireHandlerToWaitForFailure","shouldRecognizeSimultaneously","shouldBeCancelledByOther","shouldHandlerBeCancelledBy","event","recordHandlerIfNotPresent","pointerType","TOUCH","cancelMouseAndPenGestures","sendTouchEvent","tryToSendMoveEvent","shouldCancellWhenOutside","_event","out","sendEvent","onGestureHandlerEvent","current","touchEvent","transformTouchEvent","invokeNullableMethod","onGestureHandlerStateChange","resultEvent","transformEventData","lastSentState","nativeEvent","undefined","numberOfPointers","state","pointerInside","isPointerInBounds","x","getLastAvgX","y","getLastAvgY","transformNativeEvent","handlerTag","target","timeStamp","Date","now","rect","measureView","all","changed","trackerData","getData","size","has","pointerId","forEach","element","key","id","getMappedTouchEventId","push","lastX","pageX","lastY","pageY","absoluteX","absoluteY","eventType","CANCEL","DOWN","ADDITIONAL_POINTER_DOWN","UP","ADDITIONAL_POINTER_UP","MOVE","numberOfTouches","length","touchEventType","changedTouches","allTouches","cancelEvent","updateGestureConfig","props","shouldCancelWhenOutside","setShouldCancelWhenOutside","validateHitSlops","removeHandlerFromOrchestrator","checkCustomActivationCriteria","criterias","indexOf","hasCustomActivationCriteria","hitSlop","left","right","width","Error","height","top","bottom","horizontal","vertical","offsetX","getLastX","offsetY","getLastY","resetConfig","getTag","setTag","tag","getConfig","getDelegate","getTracker","getTrackedPointersID","getState","isEnabled","shouldCancel","getShouldCancelWhenOutside","getPointerType","method","__getHandler","argMapping","__nodeConfig","Array","isArray","index","entries","nativeValue","setValue"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { State } from '../../State';\nimport {\n  Config,\n  AdaptedEvent,\n  PropsRef,\n  ResultEvent,\n  PointerData,\n  ResultTouchEvent,\n  PointerType,\n  TouchEventType,\n  EventTypes,\n} from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerTracker, { TrackerElement } from '../tools/PointerTracker';\nimport { GestureHandlerDelegate } from '../tools/GestureHandlerDelegate';\n\nexport default abstract class GestureHandler {\n  private lastSentState: State | null = null;\n  protected currentState: State = State.UNDETERMINED;\n\n  protected shouldCancellWhenOutside = false;\n  protected hasCustomActivationCriteria = false;\n  protected enabled = false;\n\n  private viewRef!: number;\n  private propsRef!: React.RefObject<unknown>;\n  private handlerTag!: number;\n  protected config: Config = { enabled: false };\n\n  protected tracker: PointerTracker = new PointerTracker();\n\n  // Orchestrator properties\n  protected activationIndex = 0;\n  protected awaiting = false;\n  protected active = false;\n  protected shouldResetProgress = false;\n  protected pointerType: PointerType = PointerType.NONE;\n\n  protected delegate: GestureHandlerDelegate<unknown>;\n\n  public constructor(delegate: GestureHandlerDelegate<unknown>) {\n    this.delegate = delegate;\n  }\n\n  //\n  // Initializing handler\n  //\n\n  protected init(viewRef: number, propsRef: React.RefObject<unknown>) {\n    this.propsRef = propsRef;\n    this.viewRef = viewRef;\n\n    this.currentState = State.UNDETERMINED;\n\n    this.delegate.init(viewRef, this);\n  }\n\n  public attachEventManager(manager: EventManager<unknown>): void {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerLeave(this.onPointerLeave.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setOnPointerMoveOver(this.onPointerMoveOver.bind(this));\n    manager.setOnPointerMoveOut(this.onPointerMoveOut.bind(this));\n    manager.setListeners();\n  }\n\n  //\n  // Resetting handler\n  //\n\n  protected onCancel(): void {}\n  protected onReset(): void {}\n  protected resetProgress(): void {}\n\n  public reset(): void {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.delegate.reset();\n    this.currentState = State.UNDETERMINED;\n  }\n\n  //\n  // State logic\n  //\n\n  public moveToState(newState: State, sendIfDisabled?: boolean) {\n    if (this.currentState === newState) {\n      return;\n    }\n\n    const oldState = this.currentState;\n    this.currentState = newState;\n\n    if (\n      this.tracker.getTrackedPointersCount() > 0 &&\n      this.config.needsPointerData &&\n      this.isFinished()\n    ) {\n      this.cancelTouches();\n    }\n\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(\n      this,\n      newState,\n      oldState,\n      sendIfDisabled\n    );\n\n    this.onStateChange(newState, oldState);\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {}\n\n  public begin(): void {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */\n  public fail(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.BEGAN\n    ) {\n      // Here the order of calling the delegate and moveToState is important.\n      // At this point we can use currentState as previuos state, because immediately after changing cursor we call moveToState method.\n      this.delegate.onFail();\n\n      this.moveToState(State.FAILED, sendIfDisabled);\n    }\n\n    this.resetProgress();\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */\n  public cancel(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.onCancel();\n\n      // Same as above - order matters\n      this.delegate.onCancel();\n\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n    }\n  }\n\n  public activate(_force = false) {\n    if (\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.delegate.onActivate();\n\n      this.moveToState(State.ACTIVE);\n    }\n  }\n\n  public end() {\n    if (\n      this.currentState === State.BEGAN ||\n      this.currentState === State.ACTIVE\n    ) {\n      // Same as above - order matters\n      this.delegate.onEnd();\n\n      this.moveToState(State.END);\n    }\n\n    this.resetProgress();\n  }\n\n  //\n  // Methods for orchestrator\n  //\n\n  public isAwaiting(): boolean {\n    return this.awaiting;\n  }\n  public setAwaiting(value: boolean): void {\n    this.awaiting = value;\n  }\n\n  public isActive(): boolean {\n    return this.active;\n  }\n  public setActive(value: boolean): void {\n    this.active = value;\n  }\n\n  public getShouldResetProgress(): boolean {\n    return this.shouldResetProgress;\n  }\n  public setShouldResetProgress(value: boolean): void {\n    this.shouldResetProgress = value;\n  }\n\n  public getActivationIndex(): number {\n    return this.activationIndex;\n  }\n  public setActivationIndex(value: number): void {\n    this.activationIndex = value;\n  }\n\n  public shouldWaitForHandlerFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRequireToWaitForFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return true;\n    }\n\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(\n      this,\n      handler\n    );\n  }\n\n  public shouldBeCancelledByOther(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(\n      this,\n      handler\n    );\n  }\n\n  //\n  // Event actions\n  //\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Adding another pointer to existing ones\n  protected onPointerAdd(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerUp(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Removing pointer, when there is more than one pointers\n  protected onPointerRemove(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(false);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerLeave(event: AdaptedEvent): void {\n    if (this.shouldCancellWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerEnter(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerCancel(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n\n    this.cancel();\n    this.reset();\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(true);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerMoveOver(_event: AdaptedEvent): void {\n    // used only by hover gesture handler atm\n  }\n  protected onPointerMoveOut(_event: AdaptedEvent): void {\n    // used only by hover gesture handler atm\n  }\n  private tryToSendMoveEvent(out: boolean): void {\n    if (\n      this.enabled &&\n      this.active &&\n      (!out || (out && !this.shouldCancellWhenOutside))\n    ) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n  }\n\n  public sendTouchEvent(event: AdaptedEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    const touchEvent: ResultTouchEvent | undefined =\n      this.transformTouchEvent(event);\n\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n\n  //\n  // Events Sending\n  //\n\n  public sendEvent = (newState: State, oldState: State): void => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange }: PropsRef =\n      this.propsRef.current as PropsRef;\n\n    const resultEvent: ResultEvent = this.transformEventData(\n      newState,\n      oldState\n    );\n\n    // In the new API oldState field has to be undefined, unless we send event state changed\n    // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n    // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n    // However, this may cause trouble in the future (but for now we don't know that)\n\n    if (this.lastSentState !== newState) {\n      this.lastSentState = newState;\n      invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n    }\n    if (this.currentState === State.ACTIVE) {\n      resultEvent.nativeEvent.oldState = undefined;\n      invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n    }\n  };\n\n  private transformEventData(newState: State, oldState: State): ResultEvent {\n    return {\n      nativeEvent: {\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: this.delegate.isPointerInBounds({\n          x: this.tracker.getLastAvgX(),\n          y: this.tracker.getLastAvgY(),\n        }),\n        ...this.transformNativeEvent(),\n        handlerTag: this.handlerTag,\n        target: this.viewRef,\n        oldState: newState !== oldState ? oldState : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private transformTouchEvent(\n    event: AdaptedEvent\n  ): ResultTouchEvent | undefined {\n    const rect = this.delegate.measureView();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    // This if handles edge case where all pointers have been cancelled\n    // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n    // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n    // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.pageX,\n        y: element.lastY - rect.pageY,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n    // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.pageX,\n        y: event.y - rect.pageY,\n        absoluteX: event.x,\n        absoluteY: event.y,\n      });\n    } else {\n      trackerData.forEach((element: TrackerElement, key: number): void => {\n        const id: number = this.tracker.getMappedTouchEventId(key);\n\n        changed.push({\n          id: id,\n          x: element.lastX - rect.pageX,\n          y: element.lastY - rect.pageY,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY,\n        });\n      });\n    }\n\n    let eventType: TouchEventType = TouchEventType.UNDETERMINED;\n\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n\n    // Here, when we receive up event, we want to decrease number of touches\n    // That's because we want handler to send information that there's one pointer less\n    // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n    let numberOfTouches: number = all.length;\n\n    if (\n      event.eventType === EventTypes.UP ||\n      event.eventType === EventTypes.ADDITIONAL_POINTER_UP\n    ) {\n      --numberOfTouches;\n    }\n\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: event.touchEventType ?? eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private cancelTouches(): void {\n    const rect = this.delegate.measureView();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    if (trackerData.size === 0) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.pageX,\n        y: element.lastY - rect.pageY,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n\n      changed.push({\n        id: id,\n        x: element.lastX - rect.pageX,\n        y: element.lastY - rect.pageY,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    const cancelEvent: ResultTouchEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n      },\n      timeStamp: Date.now(),\n    };\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n\n  protected transformNativeEvent(): Record<string, unknown> {\n    // those properties are shared by most handlers and if not this method will be overriden\n    const rect = this.delegate.measureView();\n\n    return {\n      x: this.tracker.getLastAvgX() - rect.pageX,\n      y: this.tracker.getLastAvgY() - rect.pageY,\n      absoluteX: this.tracker.getLastAvgX(),\n      absoluteY: this.tracker.getLastAvgY(),\n    };\n  }\n\n  //\n  // Handling config\n  //\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    this.config = { enabled: enabled, ...props };\n    this.enabled = enabled;\n\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n\n    this.validateHitSlops();\n\n    if (this.enabled) {\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(\n          this\n        );\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n\n  protected checkCustomActivationCriteria(criterias: string[]): void {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n\n  private validateHitSlops(): void {\n    if (!this.config.hitSlop) {\n      return;\n    }\n\n    if (\n      this.config.hitSlop.left !== undefined &&\n      this.config.hitSlop.right !== undefined &&\n      this.config.hitSlop.width !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define left, right and width at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.width !== undefined &&\n      this.config.hitSlop.left === undefined &&\n      this.config.hitSlop.right === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When width is defined, either left or right has to be defined'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top !== undefined &&\n      this.config.hitSlop.bottom !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define top, bottom and height at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top === undefined &&\n      this.config.hitSlop.bottom === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When height is defined, either top or bottom has to be defined'\n      );\n    }\n  }\n\n  private checkHitSlop(): boolean {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n\n    const { width, height } = this.delegate.measureView();\n\n    let left = 0;\n    let top = 0;\n    let right: number = width;\n    let bottom: number = height;\n\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n\n    const rect = this.delegate.measureView();\n    const offsetX: number = this.tracker.getLastX() - rect.pageX;\n    const offsetY: number = this.tracker.getLastY() - rect.pageY;\n\n    if (\n      offsetX >= left &&\n      offsetX <= right &&\n      offsetY >= top &&\n      offsetY <= bottom\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  protected resetConfig(): void {}\n\n  //\n  // Getters and setters\n  //\n\n  public getTag(): number {\n    return this.handlerTag;\n  }\n\n  public setTag(tag: number): void {\n    this.handlerTag = tag;\n  }\n\n  public getConfig() {\n    return this.config;\n  }\n\n  public getDelegate(): GestureHandlerDelegate<unknown> {\n    return this.delegate;\n  }\n\n  public getTracker(): PointerTracker {\n    return this.tracker;\n  }\n\n  public getTrackedPointersID(): number[] {\n    return this.tracker.getTrackedPointersID();\n  }\n\n  public getState(): State {\n    return this.currentState;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  private isFinished(): boolean {\n    return (\n      this.currentState === State.END ||\n      this.currentState === State.FAILED ||\n      this.currentState === State.CANCELLED\n    );\n  }\n\n  protected setShouldCancelWhenOutside(shouldCancel: boolean) {\n    this.shouldCancellWhenOutside = shouldCancel;\n  }\n\n  protected getShouldCancelWhenOutside(): boolean {\n    return this.shouldCancellWhenOutside;\n  }\n\n  public getPointerType(): PointerType {\n    return this.pointerType;\n  }\n}\n\nfunction invokeNullableMethod(\n  method:\n    | ((event: ResultEvent | ResultTouchEvent) => void)\n    | { __getHandler: () => (event: ResultEvent | ResultTouchEvent) => void }\n    | { __nodeConfig: { argMapping: unknown[] } },\n  event: ResultEvent | ResultTouchEvent\n): void {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  const { argMapping }: { argMapping: unknown } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const nativeValue = event.nativeEvent[key];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (value?.setValue) {\n      //Reanimated API\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      value.setValue(nativeValue);\n    } else {\n      //RN Animated API\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}\n"]},"metadata":{},"sourceType":"module"}