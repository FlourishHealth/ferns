{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Box } from \"./Box\";\nimport { SelectList } from \"./SelectList\";\nimport { TextField } from \"./TextField\";\nexport var CustomSelect = function CustomSelect(_ref) {\n  var value = _ref.value,\n    _onChange = _ref.onChange,\n    placeholder = _ref.placeholder,\n    disabled = _ref.disabled,\n    options = _ref.options;\n  var _useState = useState(value),\n    _useState2 = _slicedToArray(_useState, 2),\n    customValue = _useState2[0],\n    setCustomValue = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showCustomInput = _useState4[0],\n    setShowCustomInput = _useState4[1];\n  var isValueCustom = useMemo(function () {\n    return ![].concat(_toConsumableArray(options), [{\n      value: \"\"\n    }]).map(function (i) {\n      return i.value;\n    }).includes(customValue);\n  }, [options, customValue]);\n  useEffect(function () {\n    setShowCustomInput(isValueCustom);\n    if (!showCustomInput) {\n      setCustomValue(value);\n    }\n  }, [showCustomInput, value, isValueCustom]);\n  var handleCustomSelectListChange = function handleCustomSelectListChange(newValue) {\n    if (newValue === \"custom\") {\n      setShowCustomInput(true);\n      setCustomValue(isValueCustom ? \"custom\" : newValue);\n      _onChange(\"\");\n    } else {\n      if (showCustomInput) {\n        setShowCustomInput(false);\n      }\n      _onChange(newValue);\n    }\n  };\n  return React.createElement(React.Fragment, null, React.createElement(SelectList, {\n    id: \"providedOptions\",\n    options: [].concat(_toConsumableArray(options), [{\n      label: \"Custom\",\n      value: \"custom\"\n    }]),\n    placeholder: placeholder,\n    value: isValueCustom ? \"custom\" : customValue,\n    onChange: handleCustomSelectListChange\n  }), Boolean(showCustomInput) && (React.createElement(Box, {\n    paddingY: 2\n  }, React.createElement(TextField, {\n    disabled: disabled,\n    id: \"customOptions\",\n    placeholder: placeholder,\n    type: \"text\",\n    value: value,\n    onChange: function onChange(result) {\n      return _onChange(result.value);\n    }\n  }))));\n};","map":{"version":3,"sources":["../src/CustomSelect.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,IAAiB,SAAS,EAAE,OAAO,EAAE,QAAQ,QAAO,OAAO;AAEvE,SAAQ,GAAG,QAAO,OAAO;AAEzB,SAAQ,UAAU,QAAO,cAAc;AACvC,SAAQ,SAAS,QAAO,aAAa;AAErC,OAAO,IAAM,YAAY,GAAG,SAAf,YAAY,CAAA,IAAA,EAMoB;EAAA,IAL3C,KAAK,GAAA,IAAA,CAAL,KAAK;IACL,SAAQ,GAAA,IAAA,CAAR,QAAQ;IACR,WAAW,GAAA,IAAA,CAAX,WAAW;IACX,QAAQ,GAAA,IAAA,CAAR,QAAQ;IACR,OAAO,GAAA,IAAA,CAAP,OAAO;EAEP,IAAA,SAAA,GAAsC,QAAQ,CAAC,KAAK,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAA9C,WAAW,GAAA,UAAA;IAAE,cAAc,GAAA,UAAA;EAClC,IAAA,UAAA,GAA8C,QAAQ,CAAC,KAAK,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,UAAA;IAAtD,eAAe,GAAA,UAAA;IAAE,kBAAkB,GAAA,UAAA;EAI1C,IAAM,aAAa,GAAY,OAAO,CAAC,YAAc;IAGnD,OAAO,CAAC,GAAA,MAAA,CAAA,kBAAA,CAAI,OAAO,IAAE;MAAC,KAAK,EAAE;IAAE,CAAC,GAAE,GAAG,CAAC,UAAC,CAAC;MAAA,OAAK,CAAC,CAAC,KAAK;IAAA,EAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;EAC7E,CAAC,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;EAG1B,SAAS,CAAC,YAAK;IACb,kBAAkB,CAAC,aAAa,CAAC;IACjC,IAAI,CAAC,eAAe,EAAE;MACpB,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC,EAAE,CAAC,eAAe,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;EAI3C,IAAM,4BAA4B,GAAG,SAA/B,4BAA4B,CAAI,QAAiB,EAAI;IAGzD,IAAI,QAAQ,KAAK,QAAQ,EAAE;MACzB,kBAAkB,CAAC,IAAI,CAAC;MACxB,cAAc,CAAC,aAAa,GAAG,QAAQ,GAAG,QAAQ,CAAC;MACnD,SAAQ,CAAC,EAAE,CAAC;IACd,CAAC,MAGI;MAEH,IAAI,eAAe,EAAE;QACnB,kBAAkB,CAAC,KAAK,CAAC;MAC3B;MAGA,SAAQ,CAAC,QAAQ,CAAC;IACpB;EACF,CAAC;EAED,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA;IACT,EAAE,EAAC,iBAAiB;IACpB,OAAO,KAAA,MAAA,CAAA,kBAAA,CAAM,OAAO,IAAE;MAAC,KAAK,EAAE,QAAQ;MAAE,KAAK,EAAE;IAAQ,CAAC,EAAC;IACzD,WAAW,EAAE,WAAW;IACxB,KAAK,EAAE,aAAa,GAAG,QAAQ,GAAG,WAAW;IAC7C,QAAQ,EAAE;EAA4B,CAAA,CACtC,EACD,OAAO,CAAC,eAAe,CAAC,KACvB,KAAA,CAAA,aAAA,CAAC,GAAG,EAAA;IAAC,QAAQ,EAAE;EAAC,CAAA,EACd,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IACR,QAAQ,EAAE,QAAQ;IAClB,EAAE,EAAC,eAAe;IAClB,WAAW,EAAE,WAAW;IACxB,IAAI,EAAC,MAAM;IACX,KAAK,EAAE,KAAK;IACZ,QAAQ,EAAE,SAAA,SAAC,MAAM;MAAA,OAAK,SAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;IAAA;EAAA,CAAA,CAC5C,CACE,CACP,CACA;AAEP,CAAC","sourceRoot":"","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { Box } from \"./Box\";\nimport { SelectList } from \"./SelectList\";\nimport { TextField } from \"./TextField\";\nexport const CustomSelect = ({ value, onChange, placeholder, disabled, options, }) => {\n    const [customValue, setCustomValue] = useState(value);\n    const [showCustomInput, setShowCustomInput] = useState(false);\n    // Boolean that checks if customValue is a value from the\n    // options prop or if it is a true custom value\n    const isValueCustom = useMemo(() => {\n        // We add an empty value to protect against an empty string custom value or if the placeholder\n        // value is selected\n        return ![...options, { value: \"\" }].map((i) => i.value).includes(customValue);\n    }, [options, customValue]);\n    // If the value is set to custom, show the custom input\n    useEffect(() => {\n        setShowCustomInput(isValueCustom);\n        if (!showCustomInput) {\n            setCustomValue(value);\n        }\n    }, [showCustomInput, value, isValueCustom]);\n    // Custom select has 3 values - the overall field value, the value of the select menu,\n    // and the value of the custom input\n    const handleCustomSelectListChange = (newValue) => {\n        // If \"custom\" is selected from the dropdown, toggle the custom input open and clear the\n        // previous value\n        if (newValue === \"custom\") {\n            setShowCustomInput(true);\n            setCustomValue(isValueCustom ? \"custom\" : newValue);\n            onChange(\"\");\n        }\n        // If any non-custom value is selected\n        else {\n            // Close the custom input if open and clear the value\n            if (showCustomInput) {\n                setShowCustomInput(false);\n            }\n            // Update the field value and select value\n            onChange(newValue);\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(SelectList, { id: \"providedOptions\", options: [...options, { label: \"Custom\", value: \"custom\" }], placeholder: placeholder, value: isValueCustom ? \"custom\" : customValue, onChange: handleCustomSelectListChange }),\n        Boolean(showCustomInput) && (React.createElement(Box, { paddingY: 2 },\n            React.createElement(TextField, { disabled: disabled, id: \"customOptions\", placeholder: placeholder, type: \"text\", value: value, onChange: (result) => onChange(result.value) })))));\n};\n//# sourceMappingURL=CustomSelect.js.map"]},"metadata":{},"sourceType":"module"}