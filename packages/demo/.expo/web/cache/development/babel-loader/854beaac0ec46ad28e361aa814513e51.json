{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar CircularBuffer = function () {\n  function CircularBuffer(size) {\n    _classCallCheck(this, CircularBuffer);\n    _defineProperty(this, \"bufferSize\", void 0);\n    _defineProperty(this, \"buffer\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"actualSize\", void 0);\n    this.bufferSize = size;\n    this.buffer = new Array(size);\n    this.index = 0;\n    this.actualSize = 0;\n  }\n  _createClass(CircularBuffer, [{\n    key: \"size\",\n    get: function get() {\n      return this.actualSize;\n    }\n  }, {\n    key: \"push\",\n    value: function push(element) {\n      this.buffer[this.index] = element;\n      this.index = (this.index + 1) % this.bufferSize;\n      this.actualSize = Math.min(this.actualSize + 1, this.bufferSize);\n    }\n  }, {\n    key: \"get\",\n    value: function get(at) {\n      if (this.actualSize === this.bufferSize) {\n        var index = (this.index + at) % this.bufferSize;\n        if (index < 0) {\n          index += this.bufferSize;\n        }\n        return this.buffer[index];\n      } else {\n        return this.buffer[at];\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.buffer = new Array(this.bufferSize);\n      this.index = 0;\n      this.actualSize = 0;\n    }\n  }]);\n  return CircularBuffer;\n}();\nexport { CircularBuffer as default };","map":{"version":3,"sources":["CircularBuffer.ts"],"names":["CircularBuffer","constructor","size","bufferSize","buffer","Array","index","actualSize","push","element","Math","min","get","at","clear"],"mappings":";;;;;;;;;;;;;;;IAAqBA,cAAN;EAMbC,SAAAA,eAAYC,IAAD,EAAe;IAAA,eAAA,OAAA,cAAA;IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;IACxB,IAAA,CAAKC,UAAL,GAAkBD,IAAlB;IACA,IAAA,CAAKE,MAAL,GAAc,IAAIC,KAAJ,CAAaH,IAAb,CAAd;IACA,IAAA,CAAKI,KAAL,GAAa,CAAb;IACA,IAAA,CAAKC,UAAL,GAAkB,CAAlB;EACD;EAAA,YAAA,CAAA,cAAA;IAAA,GAAA;IAAA,GAAA,EAEUL,SAAAA,IAAAA,EAAe;MACxB,OAAO,IAAA,CAAKK,UAAZ;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEMC,SAAAA,KAAKC,OAAD,EAAmB;MAC5B,IAAA,CAAKL,MAAL,CAAY,IAAA,CAAKE,KAAjB,CAAA,GAA0BG,OAA1B;MACA,IAAA,CAAKH,KAAL,GAAa,CAAC,IAAA,CAAKA,KAAL,GAAa,CAAd,IAAmB,IAAA,CAAKH,UAArC;MACA,IAAA,CAAKI,UAAL,GAAkBG,IAAI,CAACC,GAALD,CAAS,IAAA,CAAKH,UAAL,GAAkB,CAA3BG,EAA8B,IAAA,CAAKP,UAAnCO,CAAlB;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEME,SAAAA,IAAIC,EAAD,EAAgB;MACxB,IAAI,IAAA,CAAKN,UAAL,KAAoB,IAAA,CAAKJ,UAA7B,EAAyC;QACvC,IAAIG,KAAK,GAAG,CAAC,IAAA,CAAKA,KAAL,GAAaO,EAAd,IAAoB,IAAA,CAAKV,UAArC;QACA,IAAIG,KAAK,GAAG,CAAZ,EAAe;UACbA,KAAK,IAAI,IAAA,CAAKH,UAAdG;QACD;QAED,OAAO,IAAA,CAAKF,MAAL,CAAYE,KAAZ,CAAP;MACD,CAPD,MAOO;QACL,OAAO,IAAA,CAAKF,MAAL,CAAYS,EAAZ,CAAP;MACD;IACF;EAAA;IAAA,GAAA;IAAA,KAAA,EAEMC,SAAAA,MAAAA,EAAc;MACnB,IAAA,CAAKV,MAAL,GAAc,IAAIC,KAAJ,CAAa,IAAA,CAAKF,UAAlB,CAAd;MACA,IAAA,CAAKG,KAAL,GAAa,CAAb;MACA,IAAA,CAAKC,UAAL,GAAkB,CAAlB;IACD;EAAA;EAAA,OAAA,cAAA;AAAA;AAAA,SAxCkBP,cAAN,IAAA,OAAA","sourcesContent":["export default class CircularBuffer<T> {\n  private bufferSize: number;\n  private buffer: T[];\n  private index: number;\n  private actualSize: number;\n\n  constructor(size: number) {\n    this.bufferSize = size;\n    this.buffer = new Array<T>(size);\n    this.index = 0;\n    this.actualSize = 0;\n  }\n\n  public get size(): number {\n    return this.actualSize;\n  }\n\n  public push(element: T): void {\n    this.buffer[this.index] = element;\n    this.index = (this.index + 1) % this.bufferSize;\n    this.actualSize = Math.min(this.actualSize + 1, this.bufferSize);\n  }\n\n  public get(at: number): T {\n    if (this.actualSize === this.bufferSize) {\n      let index = (this.index + at) % this.bufferSize;\n      if (index < 0) {\n        index += this.bufferSize;\n      }\n\n      return this.buffer[index];\n    } else {\n      return this.buffer[at];\n    }\n  }\n\n  public clear(): void {\n    this.buffer = new Array<T>(this.bufferSize);\n    this.index = 0;\n    this.actualSize = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}