{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport function base64toBlob(base64Data, contentType) {\n  contentType = contentType || '';\n  var sliceSize = 1024;\n  var byteCharacters = atob(base64Data);\n  var bytesLength = byteCharacters.length;\n  var slicesCount = Math.ceil(bytesLength / sliceSize);\n  var byteArrays = new Array(slicesCount);\n  for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    var begin = sliceIndex * sliceSize;\n    var end = Math.min(begin + sliceSize, bytesLength);\n    var bytes = new Array(end - begin);\n    for (var offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n  return new Blob(byteArrays, {\n    type: contentType\n  });\n}\nexport function blobToBase64Async(blob) {\n  return new Promise(function (resolve, _) {\n    var reader = new FileReader();\n    reader.onloadend = function () {\n      return resolve(reader.result);\n    };\n    reader.readAsDataURL(blob);\n  });\n}\nexport function htmlToPlainText(html) {\n  var tempDivElement = document.createElement('div');\n  tempDivElement.innerHTML = html;\n  return tempDivElement.textContent || tempDivElement.innerText || '';\n}\nexport function getImageSizeFromBlobAsync(blob) {\n  return new Promise(function (resolve, _) {\n    var blobUrl = URL.createObjectURL(blob);\n    var img = document.createElement('img');\n    img.src = blobUrl;\n    img.onload = function () {\n      resolve({\n        width: img.width,\n        height: img.height\n      });\n    };\n  });\n}\nexport function findImageInClipboardAsync(_x) {\n  return _findImageInClipboardAsync.apply(this, arguments);\n}\nfunction _findImageInClipboardAsync() {\n  _findImageInClipboardAsync = _asyncToGenerator(function* (items) {\n    for (var clipboardItem of items) {\n      if (clipboardItem.types.some(function (type) {\n        return type === 'image/png';\n      })) {\n        return yield clipboardItem.getType('image/png');\n      }\n      if (clipboardItem.types.some(function (type) {\n        return type === 'image/jpeg';\n      })) {\n        return yield clipboardItem.getType('image/jpeg');\n      }\n    }\n    return null;\n  });\n  return _findImageInClipboardAsync.apply(this, arguments);\n}\nexport function findHtmlInClipboardAsync(_x2) {\n  return _findHtmlInClipboardAsync.apply(this, arguments);\n}\nfunction _findHtmlInClipboardAsync() {\n  _findHtmlInClipboardAsync = _asyncToGenerator(function* (items) {\n    for (var clipboardItem of items) {\n      if (clipboardItem.types.some(function (type) {\n        return type === 'text/html';\n      })) {\n        return yield clipboardItem.getType('text/html');\n      }\n    }\n    return null;\n  });\n  return _findHtmlInClipboardAsync.apply(this, arguments);\n}\nexport function isClipboardPermissionDeniedAsync() {\n  return _isClipboardPermissionDeniedAsync.apply(this, arguments);\n}\nfunction _isClipboardPermissionDeniedAsync() {\n  _isClipboardPermissionDeniedAsync = _asyncToGenerator(function* () {\n    var queryOpts = {\n      name: 'clipboard-read'\n    };\n    var permissionStatus = yield navigator.permissions.query(queryOpts);\n    return permissionStatus.state === 'denied';\n  });\n  return _isClipboardPermissionDeniedAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/web/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Converts base64-encoded data to a `Blob` object.\n * @see https://stackoverflow.com/a/20151856\n */\nexport function base64toBlob(base64Data: string, contentType: string): Blob {\n  contentType = contentType || '';\n  const sliceSize = 1024;\n  const byteCharacters = atob(base64Data);\n  const bytesLength = byteCharacters.length;\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\n  const byteArrays = new Array(slicesCount);\n\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * sliceSize;\n    const end = Math.min(begin + sliceSize, bytesLength);\n\n    const bytes = new Array(end - begin);\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n  // I cannot use `@ts-expect-error` here because some environments consider this correct:\n  // expo-module build - OK,\n  // expo-module test - error\n  // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ somehow\n  return new Blob(byteArrays, { type: contentType });\n}\n\n/**\n * Converts blob to base64-encoded string with Data-URL prefix.\n */\nexport function blobToBase64Async(blob: Blob): Promise<string> {\n  return new Promise((resolve, _) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result as string);\n    reader.readAsDataURL(blob);\n  });\n}\n\nexport function htmlToPlainText(html: string) {\n  const tempDivElement = document.createElement('div');\n  tempDivElement.innerHTML = html;\n  return tempDivElement.textContent || tempDivElement.innerText || '';\n}\n\nexport function getImageSizeFromBlobAsync(blob: Blob): Promise<{ width: number; height: number }> {\n  return new Promise((resolve, _) => {\n    const blobUrl = URL.createObjectURL(blob);\n    const img = document.createElement('img');\n    img.src = blobUrl;\n    img.onload = function () {\n      resolve({ width: img.width, height: img.height });\n    };\n  });\n}\n\nexport async function findImageInClipboardAsync(items: ClipboardItems): Promise<Blob | null> {\n  for (const clipboardItem of items) {\n    // first look for png\n    if (clipboardItem.types.some((type) => type === 'image/png')) {\n      return await clipboardItem.getType('image/png');\n    }\n\n    // alternatively, an image might be a jpeg\n    // NOTE: Currently, this is not supported by browsers yet. They only support PNG now\n    if (clipboardItem.types.some((type) => type === 'image/jpeg')) {\n      return await clipboardItem.getType('image/jpeg');\n    }\n  }\n  return null;\n}\n\nexport async function findHtmlInClipboardAsync(items: ClipboardItems): Promise<Blob | null> {\n  for (const clipboardItem of items) {\n    if (clipboardItem.types.some((type) => type === 'text/html')) {\n      return await clipboardItem.getType('text/html');\n    }\n  }\n  return null;\n}\n\nexport async function isClipboardPermissionDeniedAsync(): Promise<boolean> {\n  const queryOpts = { name: 'clipboard-read' as PermissionName };\n  const permissionStatus = await navigator.permissions.query(queryOpts);\n  return permissionStatus.state === 'denied';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}