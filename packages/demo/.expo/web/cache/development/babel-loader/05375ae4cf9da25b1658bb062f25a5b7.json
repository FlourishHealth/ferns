{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Children } from \"react\";\nimport { ScrollView } from \"./ScrollView\";\nimport { TableContextProvider } from \"./tableContext\";\nexport var Table = function Table(_ref) {\n  var children = _ref.children,\n    columns = _ref.columns,\n    borderStyle = _ref.borderStyle,\n    _ref$alternateRowBack = _ref.alternateRowBackground,\n    alternateRowBackground = _ref$alternateRowBack === void 0 ? true : _ref$alternateRowBack,\n    maxHeight = _ref.maxHeight,\n    _ref$stickyHeader = _ref.stickyHeader,\n    stickyHeader = _ref$stickyHeader === void 0 ? true : _ref$stickyHeader;\n  var arrayChildren = Children.toArray(children);\n  var _React$useState = React.useState(undefined),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    sortColumn = _React$useState2[0],\n    setSortColumn = _React$useState2[1];\n  var hasDrawerContents = arrayChildren.some(function (child) {\n    var _a;\n    return (_a = child.props) === null || _a === void 0 ? void 0 : _a.drawerContents;\n  });\n  var width;\n  if (columns.every(function (column) {\n    return typeof column === \"number\";\n  })) {\n    width = columns.reduce(function (acc, curr) {\n      return acc + curr;\n    }, 0);\n    if (hasDrawerContents) {\n      width = width + 30;\n    }\n  } else {\n    width = \"100%\";\n  }\n  return React.createElement(TableContextProvider, {\n    alternateRowBackground: alternateRowBackground,\n    borderStyle: borderStyle,\n    columns: columns,\n    hasDrawerContents: hasDrawerContents,\n    setSortColumn: setSortColumn,\n    sortColumn: sortColumn,\n    stickyHeader: stickyHeader\n  }, React.createElement(ScrollView, {\n    horizontal: true,\n    style: {\n      width: width,\n      maxWidth: \"100%\"\n    }\n  }, React.createElement(ScrollView, {\n    stickyHeaderIndices: stickyHeader ? [0] : undefined,\n    style: {\n      width: width,\n      maxWidth: \"100%\",\n      flex: 1,\n      maxHeight: maxHeight\n    }\n  }, Children.map(children, function (child, index) {\n    return React.cloneElement(child, {\n      color: index % 2 === 1 && alternateRowBackground ? \"lightGray\" : \"white\"\n    });\n  }))));\n};","map":{"version":3,"sources":["../src/Table.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,IAAG,QAAQ,QAAqB,OAAO;AAInD,SAAQ,UAAU,QAAO,cAAc;AACvC,SAA6B,oBAAoB,QAAO,gBAAgB;AAExE,OAAO,IAAM,KAAK,GAAG,SAAR,KAAK,CAAA,IAAA,EAOmB;EAAA,IANnC,QAAQ,GAAA,IAAA,CAAR,QAAQ;IACR,OAAO,GAAA,IAAA,CAAP,OAAO;IACP,WAAW,GAAA,IAAA,CAAX,WAAW;IAAA,qBAAA,GAAA,IAAA,CACX,sBAAsB;IAAtB,sBAAsB,GAAA,qBAAA,cAAG,IAAI,GAAA,qBAAA;IAC7B,SAAS,GAAA,IAAA,CAAT,SAAS;IAAA,iBAAA,GAAA,IAAA,CACT,YAAY;IAAZ,YAAY,GAAA,iBAAA,cAAG,IAAI,GAAA,iBAAA;EAEnB,IAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;EAChD,IAAA,eAAA,GAAoC,KAAK,CAAC,QAAQ,CAAkC,SAAS,CAAC;IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;IAAvF,UAAU,GAAA,gBAAA;IAAE,aAAa,GAAA,gBAAA;EAIhC,IAAM,iBAAiB,GAAG,aAAa,CAAC,IAAI,CAAC,UAAC,KAAK,EAAI;;IACrD,OAAO,CAAA,EAAA,GAAC,KAAsB,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,cAAc;EACtD,CAAC,CAAC;EAIF,IAAI,KAAqB;EACzB,IAAI,OAAO,CAAC,KAAK,CAAC,UAAC,MAAM;IAAA,OAAK,OAAO,MAAM,KAAK,QAAQ;EAAA,EAAC,EAAE;IACzD,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,EAAI;MACnC,OAAQ,GAAc,GAAI,IAAe;IAC3C,CAAC,EAAE,CAAC,CAAW;IACf,IAAI,iBAAiB,EAAE;MACrB,KAAK,GAAI,KAAgB,GAAG,EAAE;IAChC;EACF,CAAC,MAAM;IACL,KAAK,GAAG,MAAM;EAChB;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,oBAAoB,EAAA;IACnB,sBAAsB,EAAE,sBAAsB;IAC9C,WAAW,EAAE,WAAW;IACxB,OAAO,EAAE,OAAO;IAChB,iBAAiB,EAAE,iBAAiB;IACpC,aAAa,EAAE,aAAa;IAC5B,UAAU,EAAE,UAAU;IACtB,YAAY,EAAE;EAAY,CAAA,EAE1B,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA;IAAC,UAAU,EAAA,IAAA;IAAC,KAAK,EAAE;MAAC,KAAK,EAAL,KAAK;MAAE,QAAQ,EAAE;IAAM;EAAC,CAAA,EACrD,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA;IACT,mBAAmB,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC,GAAG,SAAS;IACnD,KAAK,EAAE;MAAC,KAAK,EAAL,KAAK;MAAE,QAAQ,EAAE,MAAM;MAAE,IAAI,EAAE,CAAC;MAAE,SAAS,EAAT;IAAS;EAAC,CAAA,EAEnD,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAC,KAAK,EAAE,KAAK;IAAA,OACnC,KAAK,CAAC,YAAY,CAAC,KAAY,EAAE;MAC/B,KAAK,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,sBAAsB,GAAG,WAAW,GAAG;KAClE,CAAC;EAAA,EACH,CACU,CACF,CACQ;AAE3B,CAAC","sourceRoot":"","sourcesContent":["import React, { Children } from \"react\";\nimport { ScrollView } from \"./ScrollView\";\nimport { TableContextProvider } from \"./tableContext\";\nexport const Table = ({ children, columns, borderStyle, alternateRowBackground = true, maxHeight, stickyHeader = true, }) => {\n    const arrayChildren = Children.toArray(children);\n    const [sortColumn, setSortColumn] = React.useState(undefined);\n    // Check if any of the rows below have a drawerContents prop to see if we need to render space\n    // for the caret.\n    const hasDrawerContents = arrayChildren.some((child) => {\n        var _a;\n        return (_a = child.props) === null || _a === void 0 ? void 0 : _a.drawerContents;\n    });\n    // Calculate the total width of the table. If the table has only number widths, calculate a\n    // width. Otherwise use 100%.\n    let width;\n    if (columns.every((column) => typeof column === \"number\")) {\n        width = columns.reduce((acc, curr) => {\n            return acc + curr;\n        }, 0);\n        if (hasDrawerContents) {\n            width = width + 30;\n        }\n    }\n    else {\n        width = \"100%\";\n    }\n    return (React.createElement(TableContextProvider, { alternateRowBackground: alternateRowBackground, borderStyle: borderStyle, columns: columns, hasDrawerContents: hasDrawerContents, setSortColumn: setSortColumn, sortColumn: sortColumn, stickyHeader: stickyHeader },\n        React.createElement(ScrollView, { horizontal: true, style: { width, maxWidth: \"100%\" } },\n            React.createElement(ScrollView, { stickyHeaderIndices: stickyHeader ? [0] : undefined, style: { width, maxWidth: \"100%\", flex: 1, maxHeight } }, Children.map(children, (child, index) => React.cloneElement(child, {\n                color: index % 2 === 1 && alternateRowBackground ? \"lightGray\" : \"white\",\n            }))))));\n};\n//# sourceMappingURL=Table.js.map"]},"metadata":{},"sourceType":"module"}