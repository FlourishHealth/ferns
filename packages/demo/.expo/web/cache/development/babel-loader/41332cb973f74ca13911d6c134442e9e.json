{"ast":null,"code":"'use strict';\n\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"scrollViewOffset\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { createAnimatedComponent } from '../../createAnimatedComponent';\nimport { useAnimatedRef, useScrollViewOffset } from '../hook';\nvar AnimatedScrollViewComponent = createAnimatedComponent(ScrollView);\nexport var AnimatedScrollView = forwardRef(function (props, ref) {\n  var scrollViewOffset = props.scrollViewOffset,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var animatedRef = ref === null ? useAnimatedRef() : ref;\n  if (scrollViewOffset) {\n    useScrollViewOffset(animatedRef, scrollViewOffset);\n  }\n  if (!('scrollEventThrottle' in restProps)) {\n    restProps.scrollEventThrottle = 1;\n  }\n  return React.createElement(AnimatedScrollViewComponent, _extends({\n    ref: animatedRef\n  }, restProps));\n});","map":{"version":3,"sources":["ScrollView.tsx"],"names":["React","forwardRef","createAnimatedComponent","useAnimatedRef","useScrollViewOffset","AnimatedScrollViewComponent","ScrollView","AnimatedScrollView","props","ref","scrollViewOffset","restProps","animatedRef","scrollEventThrottle"],"mappings":"AAAA,YAAY;;AAAA,OAAA,wBAAA;AAAA,IAAA,SAAA;AAAC,SAAA,QAAA,CAAA,EAAA;EAAA,QAAA,GAAA,MAAA,CAAA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,GAAA,UAAA,MAAA,EAAA;IAAA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;MAAA,IAAA,MAAA,GAAA,SAAA,CAAA,CAAA,CAAA;MAAA,KAAA,IAAA,GAAA,IAAA,MAAA,EAAA;QAAA,IAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,EAAA,GAAA,CAAA,EAAA;UAAA,MAAA,CAAA,GAAA,CAAA,GAAA,MAAA,CAAA,GAAA,CAAA;QAAA;MAAA;IAAA;IAAA,OAAA,MAAA;EAAA,CAAA;EAAA,OAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;AAEb,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAAA,OAAA,UAAA;AAGzC,SAASC,uBAAuB,QAAQ,+BAA+B;AAGvE,SAASC,cAAc,EAAEC,mBAAmB,QAAQ,SAAS;AAc7D,IAAMC,2BAA2B,GAAGH,uBAAuB,CAACI,UAAU,CAAC;AAEvE,OAAO,IAAMC,kBAAkB,GAAGN,UAAU,CAC1C,UAACO,KAA8B,EAAEC,GAAqC,EAAK;EACzE,IAAQC,gBAAgB,GAAmBF,KAAK,CAAxCE,gBAAgB;IAAKC,SAAAA,GAAAA,wBAAAA,CAAcH,KAAK,EAAA,SAAA;EAChD,IAAMI,WAAW,GACfH,GAAG,KAAK,IAAI,GAERN,cAAc,CAAA,CAAc,GAC5BM,GAC8B;EAEpC,IAAIC,gBAAgB,EAAE;IAEpBN,mBAAmB,CAACQ,WAAW,EAAEF,gBAAgB,CAAC;EACpD;EAMA,IAAI,EAAE,qBAAqB,IAAIC,SAAS,CAAC,EAAE;IACzCA,SAAS,CAACE,mBAAmB,GAAG,CAAC;EACnC;EAEA,OAAOb,KAAAA,CAAAA,aAAAA,CAACK,2BAA2B,EAAA,QAAA,CAAA;IAACI,GAAG,EAAEG;EAAY,CAAA,EAAKD,SAAS,CAAA,CAAI;AACzE,CAAC,CACF","sourcesContent":["'use strict';\nimport type { ForwardedRef } from 'react';\nimport React, { forwardRef } from 'react';\nimport type { ScrollViewProps } from 'react-native';\nimport { ScrollView } from 'react-native';\nimport { createAnimatedComponent } from '../../createAnimatedComponent';\nimport type { SharedValue } from '../commonTypes';\nimport type { AnimatedRef } from '../hook';\nimport { useAnimatedRef, useScrollViewOffset } from '../hook';\nimport type { AnimatedProps } from '../helperTypes';\n\nexport interface AnimatedScrollViewProps\n  extends AnimatedProps<ScrollViewProps> {\n  scrollViewOffset?: SharedValue<number>;\n}\n\n// Since createAnimatedComponent return type is ComponentClass that has the props of the argument,\n// but not things like NativeMethods, etc. we need to add them manually by extending the type.\ninterface AnimatedScrollViewComplement extends ScrollView {\n  getNode(): ScrollView;\n}\n\nconst AnimatedScrollViewComponent = createAnimatedComponent(ScrollView);\n\nexport const AnimatedScrollView = forwardRef(\n  (props: AnimatedScrollViewProps, ref: ForwardedRef<AnimatedScrollView>) => {\n    const { scrollViewOffset, ...restProps } = props;\n    const animatedRef = (\n      ref === null\n        ? // eslint-disable-next-line react-hooks/rules-of-hooks\n          useAnimatedRef<ScrollView>()\n        : ref\n    ) as AnimatedRef<AnimatedScrollView>;\n\n    if (scrollViewOffset) {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useScrollViewOffset(animatedRef, scrollViewOffset);\n    }\n\n    // Set default scrollEventThrottle, because user expects\n    // to have continuous scroll events.\n    // We set it to 1 so we have peace until\n    // there are 960 fps screens.\n    if (!('scrollEventThrottle' in restProps)) {\n      restProps.scrollEventThrottle = 1;\n    }\n\n    return <AnimatedScrollViewComponent ref={animatedRef} {...restProps} />;\n  }\n);\n\nexport type AnimatedScrollView = AnimatedScrollViewComplement &\n  typeof AnimatedScrollViewComponent;\n"]},"metadata":{},"sourceType":"module"}