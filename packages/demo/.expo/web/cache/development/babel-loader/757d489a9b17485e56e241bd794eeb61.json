{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport function requestPermissions(_x) {\n  return _requestPermissions.apply(this, arguments);\n}\nfunction _requestPermissions() {\n  _requestPermissions = _asyncToGenerator(function* (kind) {\n    return new Promise(function () {\n      var _ref = _asyncToGenerator(function* (resolve, reject) {\n        return \"denied\";\n      });\n      return function (_x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n  return _requestPermissions.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Permissions.ts"],"names":[],"mappings":";AAMA,gBAAsB,kBAAkB,CAAA,EAAA;EAAA,OAAA,mBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAqCvC,SAAA,oBAAA;EAAA,mBAAA,GAAA,iBAAA,CArCM,WAAkC,IAAoB,EAAA;IAC3D,OAAO,IAAI,OAAO;MAAA,IAAA,IAAA,GAAA,iBAAA,CAAC,WAAO,OAAO,EAAE,MAAM,EAAI;QAC3C,OAAO,QAAQ;MACjB,CAAC;MAAA,iBAAA,GAAA,EAAA,GAAA;QAAA,OAAA,IAAA,CAAA,KAAA,OAAA,SAAA;MAAA;IAAA,IAAC;EAkCJ,CAAC;EAAA,OAAA,mBAAA,CAAA,KAAA,OAAA,SAAA;AAAA","sourceRoot":"","sourcesContent":["export async function requestPermissions(kind) {\n    return new Promise(async (resolve, reject) => {\n        return \"denied\";\n    });\n    // const userPropertyKey = `PermissionsFor${capitalize(kind)}`;\n    //   let k = kind;\n    //   let options: any = undefined;\n    //   if (kind === \"locationAlways\") {\n    //     k = \"location\";\n    //     options = { type: \"always\" };\n    //   }\n    //   if (Platform.OS === \"android\" && k === \"notification\") {\n    //     return;\n    //   }\n    //   // TODO check soft request status.\n    //   const current = await Permissions.check(MAP[k] as any);\n    //   // Tracking.log(`[permissions] ${k} permissions are ${current}`);\n    //   if (current === \"denied\" || current === \"limited\") {\n    //     // Tracking.setUserProperty(userPropertyKey, \"false\");\n    //     return reject(MAP_RESULTS[current]);\n    //   } else if (current === \"granted\") {\n    //     // Tracking.setUserProperty(userPropertyKey, \"true\");\n    //     return resolve(\"authorized\");\n    //   }\n    //   const response = await Permissions.request(MAP[k] as any, options);\n    //   if (response === \"granted\") {\n    //     // Tracking.setUserProperty(userPropertyKey, \"true\");\n    //     return resolve(\"authorized\");\n    //   } else {\n    //     // Tracking.setUserProperty(userPropertyKey, \"false\");\n    //     return reject(MAP_RESULTS[response]);\n    //   }\n    // });\n}\n//# sourceMappingURL=Permissions.js.map"]},"metadata":{},"sourceType":"module"}