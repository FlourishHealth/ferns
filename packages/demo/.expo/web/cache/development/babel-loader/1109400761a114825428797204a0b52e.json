{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { GOOGLE_PLACES_API_RESTRICTIONS } from \"./Constants\";\nimport { TextField } from \"./TextField\";\nimport { processAddressComponents } from \"./Utilities\";\nvar loadGooglePlacesScript = function loadGooglePlacesScript(googleMapsApiKey, callbackName) {\n  return new Promise(function (resolve, reject) {\n    if (window.google && window.google.maps && window.google.maps.places) {\n      resolve();\n      return;\n    }\n    window[callbackName] = function () {\n      return resolve();\n    };\n    var script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&libraries=places&callback=${callbackName}`;\n    script.async = true;\n    script.defer = true;\n    script.onerror = function () {\n      return reject(new Error(\"Google Maps script failed to load\"));\n    };\n    document.head.appendChild(script);\n    return;\n  });\n};\nexport var WebAddressAutocomplete = function WebAddressAutocomplete(_ref) {\n  var disabled = _ref.disabled,\n    googleMapsApiKey = _ref.googleMapsApiKey,\n    includeCounty = _ref.includeCounty,\n    inputValue = _ref.inputValue,\n    handleAddressChange = _ref.handleAddressChange,\n    handleAutoCompleteChange = _ref.handleAutoCompleteChange;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    scriptLoaded = _useState2[0],\n    setScriptLoaded = _useState2[1];\n  var autocompleteInputRef = useRef(null);\n  useEffect(function () {\n    var callbackName = \"initAutocomplete\";\n    if (!googleMapsApiKey) {\n      setScriptLoaded(false);\n      return;\n    }\n    loadGooglePlacesScript(googleMapsApiKey, callbackName).then(function () {\n      var autocomplete = new window.google.maps.places.Autocomplete(autocompleteInputRef.current, {\n        componentRestrictions: {\n          country: GOOGLE_PLACES_API_RESTRICTIONS.components.country\n        },\n        fields: Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields)\n      });\n      autocomplete.addListener(\"place_changed\", function () {\n        var place = autocomplete.getPlace();\n        var addressComponents = place === null || place === void 0 ? void 0 : place.address_components;\n        var formattedAddressObject = processAddressComponents(addressComponents, {\n          includeCounty: includeCounty\n        });\n        handleAutoCompleteChange(formattedAddressObject);\n      });\n    }).catch(function (error) {\n      console.warn(error);\n      setScriptLoaded(false);\n    });\n    return function () {\n      window[callbackName] = null;\n    };\n  }, [googleMapsApiKey, includeCounty, handleAutoCompleteChange]);\n  return React.createElement(TextField, {\n    disabled: disabled,\n    inputRef: scriptLoaded ? function (ref) {\n      return autocompleteInputRef.current = ref;\n    } : undefined,\n    label: \"Street Address\",\n    placeholder: \"Enter an address\",\n    type: \"text\",\n    value: inputValue,\n    onChange: function onChange(_ref2) {\n      var value = _ref2.value;\n      handleAddressChange({\n        value: value\n      });\n    }\n  });\n};","map":{"version":3,"sources":["../src/WebAddressAutocomplete.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { GOOGLE_PLACES_API_RESTRICTIONS } from \"./Constants\";\nimport { TextField } from \"./TextField\";\nimport { processAddressComponents } from \"./Utilities\";\nconst loadGooglePlacesScript = (googleMapsApiKey, callbackName) => {\n    return new Promise((resolve, reject) => {\n        if (window.google && window.google.maps && window.google.maps.places) {\n            resolve();\n            return;\n        }\n        window[callbackName] = () => resolve();\n        const script = document.createElement(\"script\");\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&libraries=places&callback=${callbackName}`;\n        script.async = true;\n        script.defer = true;\n        script.onerror = () => reject(new Error(\"Google Maps script failed to load\"));\n        document.head.appendChild(script);\n        return;\n    });\n};\nexport const WebAddressAutocomplete = ({ disabled, googleMapsApiKey, includeCounty, inputValue, handleAddressChange, handleAutoCompleteChange, }) => {\n    const [scriptLoaded, setScriptLoaded] = useState(true);\n    const autocompleteInputRef = useRef(null);\n    // Load the Google Maps script and initialize the autocomplete.\n    useEffect(() => {\n        const callbackName = \"initAutocomplete\";\n        if (!googleMapsApiKey) {\n            setScriptLoaded(false);\n            return;\n        }\n        loadGooglePlacesScript(googleMapsApiKey, callbackName)\n            .then(() => {\n            const autocomplete = new window.google.maps.places.Autocomplete(autocompleteInputRef.current, {\n                componentRestrictions: { country: GOOGLE_PLACES_API_RESTRICTIONS.components.country },\n                fields: Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields),\n            });\n            autocomplete.addListener(\"place_changed\", () => {\n                const place = autocomplete.getPlace();\n                const addressComponents = place === null || place === void 0 ? void 0 : place.address_components;\n                const formattedAddressObject = processAddressComponents(addressComponents, {\n                    includeCounty,\n                });\n                handleAutoCompleteChange(formattedAddressObject);\n            });\n        })\n            .catch((error) => {\n            console.warn(error);\n            setScriptLoaded(false);\n        });\n        // Cleanup\n        return () => {\n            window[callbackName] = null;\n        };\n    }, [googleMapsApiKey, includeCounty, handleAutoCompleteChange]);\n    return (React.createElement(TextField, { disabled: disabled, inputRef: scriptLoaded ? (ref) => (autocompleteInputRef.current = ref) : undefined, label: \"Street Address\", placeholder: \"Enter an address\", type: \"text\", value: inputValue, onChange: ({ value }) => {\n            handleAddressChange({ value });\n        } }));\n};\n//# sourceMappingURL=WebAddressAutocomplete.js.map"]},"metadata":{},"sourceType":"module"}