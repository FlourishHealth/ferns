{"ast":null,"code":"import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font.types';\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || asset.default || null;\n  } else if (typeof asset === 'number') {\n    return uriFromFontSource(Asset.fromModule(asset));\n  }\n  return null;\n}\nfunction displayFromFontSource(asset) {\n  return asset.display || FontDisplay.AUTO;\n}\nexport function fontFamilyNeedsScoping(name) {\n  return false;\n}\nexport function getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n  return {\n    uri: uri,\n    display: display\n  };\n}\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(`ERR_FONT_SOURCE`, `Expected font asset of type \\`string | FontResource | Asset\\` instead got: ${type}`);\n}\nexport function loadSingleFontAsync(name, input) {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n  try {\n    return ExpoFontLoader.loadAsync(name, input);\n  } catch (_unused) {}\n  return Promise.resolve();\n}\nexport function getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,QAAQ,YAAY;AAClC,SAAS,UAAU,QAAQ,mBAAmB;AAE9C,OAAO,cAAc,MAAM,kBAAkB;AAC7C,SAAmC,WAAW,QAAQ,cAAc;AAEpE,SAAS,iBAAiB,CAAC,KAAU,EAAA;EACnC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,KAAK,IAAI,IAAI;GACrB,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAO,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI;GAC5D,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAO,iBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;EAClD;EACD,OAAO,IAAI;AACb;AAEA,SAAS,qBAAqB,CAAC,KAAU,EAAA;EACvC,OAAO,KAAK,CAAC,OAAO,IAAI,WAAW,CAAC,IAAI;AAC1C;AAEA,OAAM,SAAU,sBAAsB,CAAC,IAAY,EAAA;EACjD,OAAO,KAAK;AACd;AAEA,OAAM,SAAU,iBAAiB,CAAC,MAAkB,EAAA;EAClD,IAAM,GAAG,GAAG,iBAAiB,CAAC,MAAM,CAAC;EACrC,IAAM,OAAO,GAAG,qBAAqB,CAAC,MAAM,CAAC;EAE7C,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;IACnC,uBAAuB,CAAC,GAAG,CAAC;EAC7B;EAED,OAAO;IACL,GAAG,EAAE,GAAI;IACT,OAAO,EAAP;GACD;AACH;AAEA,SAAS,uBAAuB,CAAC,MAAW,EAAA;EAC1C,IAAI,IAAI,GAAW,OAAO,MAAM;EAChC,IAAI,IAAI,KAAK,QAAQ,EAAE,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;EAC7D,MAAM,IAAI,UAAU,CAClB,iBAAiB,EACjB,8EAA8E,IAAI,EAAE,CACrF;AACH;AAGA,OAAM,SAAU,mBAAmB,CAAC,IAAY,EAAE,KAA2B,EAAA;EAC3E,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,CAAC,GAAG,KAAK,QAAQ,IAAK,KAAa,CAAC,aAAa,EAAE;IAC9F,uBAAuB,CAAC,KAAK,CAAC;EAC/B;EAED,IAAI;IACF,OAAO,cAAc,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;GAC7C,CAAC,OAAA,OAAA,EAAM,CAEP;EAED,OAAO,OAAO,CAAC,OAAO,CAAA,CAAE;AAC1B;AAEA,OAAM,SAAU,iBAAiB,CAAC,IAAY,EAAA;EAC5C,OAAO,IAAI;AACb","sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource, FontDisplay } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || asset.default || null;\n  } else if (typeof asset === 'number') {\n    return uriFromFontSource(Asset.fromModule(asset));\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` instead got: ${type}`\n  );\n}\n\n// NOTE(EvanBacon): No async keyword!\nexport function loadSingleFontAsync(name: string, input: Asset | FontResource): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  try {\n    return ExpoFontLoader.loadAsync(name, input);\n  } catch {\n    // No-op.\n  }\n\n  return Promise.resolve();\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}