{"ast":null,"code":"import React from \"react\";\nimport { Box } from \"./Box\";\nimport { IconButton } from \"./IconButton\";\nimport { useTableContext } from \"./tableContext\";\nexport var TableHeaderCell = function TableHeaderCell(_ref) {\n  var children = _ref.children,\n    index = _ref.index,\n    sortable = _ref.sortable,\n    onSortChange = _ref.onSortChange;\n  var _useTableContext = useTableContext(),\n    columns = _useTableContext.columns,\n    setSortColumn = _useTableContext.setSortColumn,\n    sortColumn = _useTableContext.sortColumn;\n  var width = columns[index];\n  if (!width) {\n    console.warn(`No width defined for column ${index} in TableHeaderCell`);\n  }\n  var onClick = function onClick() {\n    var newSort = sort === \"desc\" ? \"asc\" : sort === \"asc\" ? undefined : \"desc\";\n    if (setSortColumn) {\n      setSortColumn(newSort ? {\n        column: index,\n        direction: newSort\n      } : undefined);\n    }\n    onSortChange && onSortChange(newSort);\n  };\n  var sort = (sortColumn === null || sortColumn === void 0 ? void 0 : sortColumn.column) === index ? sortColumn.direction : undefined;\n  if (sortable) {\n    if (!onSortChange) {\n      console.error(\"onSortChange is required when sortable is true\");\n    }\n    return React.createElement(Box, {\n      alignItems: \"center\",\n      direction: \"row\",\n      flex: \"grow\",\n      justifyContent: \"between\",\n      marginBottom: 2,\n      marginTop: 2,\n      maxWidth: width,\n      minHeight: 36,\n      width: width,\n      onClick: onClick\n    }, children, Boolean(sort) && (React.createElement(Box, {\n      paddingX: 2\n    }, React.createElement(IconButton, {\n      accessibilityLabel: \"sort\",\n      bgColor: \"white\",\n      icon: sort === \"asc\" ? \"arrow-down\" : \"arrow-up\",\n      iconColor: \"darkGray\",\n      size: \"sm\",\n      onClick: function onClick() {}\n    }))));\n  } else {\n    return React.createElement(Box, {\n      flex: \"grow\",\n      justifyContent: \"center\",\n      marginBottom: 2,\n      marginTop: 2,\n      width: width\n    }, children);\n  }\n};","map":{"version":3,"sources":["../src/TableHeaderCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAqB,MAAM,OAAO;AAEzC,SAAQ,GAAG,QAAO,OAAO;AAEzB,SAAQ,UAAU,QAAO,cAAc;AACvC,SAAQ,eAAe,QAAO,gBAAgB;AAK9C,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAA,IAAA,EAKa;EAAA,IAJvC,QAAQ,GAAA,IAAA,CAAR,QAAQ;IACR,KAAK,GAAA,IAAA,CAAL,KAAK;IACL,QAAQ,GAAA,IAAA,CAAR,QAAQ;IACR,YAAY,GAAA,IAAA,CAAZ,YAAY;EAEZ,IAAA,gBAAA,GAA6C,eAAe,CAAA,CAAE;IAAvD,OAAO,GAAA,gBAAA,CAAP,OAAO;IAAE,aAAa,GAAA,gBAAA,CAAb,aAAa;IAAE,UAAU,GAAA,gBAAA,CAAV,UAAU;EACzC,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;EAC5B,IAAI,CAAC,KAAK,EAAE;IACV,OAAO,CAAC,IAAI,CAAC,+BAA+B,KAAK,qBAAqB,CAAC;EACzE;EAEA,IAAM,OAAO,GAAG,SAAV,OAAO,CAAA,EAAQ;IAEnB,IAAM,OAAO,GAAG,IAAI,KAAK,MAAM,GAAG,KAAK,GAAG,IAAI,KAAK,KAAK,GAAG,SAAS,GAAG,MAAM;IAC7E,IAAI,aAAa,EAAE;MACjB,aAAa,CAAC,OAAO,GAAG;QAAC,MAAM,EAAE,KAAK;QAAE,SAAS,EAAE;MAAO,CAAC,GAAG,SAAS,CAAC;IAC1E;IACA,YAAY,IAAI,YAAY,CAAC,OAAO,CAAC;EACvC,CAAC;EACD,IAAM,IAAI,GAAG,CAAA,UAAU,KAAA,IAAA,IAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,MAAM,MAAK,KAAK,GAAG,UAAU,CAAC,SAAS,GAAG,SAAS;EAE5E,IAAI,QAAQ,EAAE;IACZ,IAAI,CAAC,YAAY,EAAE;MACjB,OAAO,CAAC,KAAK,CAAC,gDAAgD,CAAC;IACjE;IACA,OACE,KAAA,CAAA,aAAA,CAAC,GAAG,EAAA;MACF,UAAU,EAAC,QAAQ;MACnB,SAAS,EAAC,KAAK;MACf,IAAI,EAAC,MAAM;MACX,cAAc,EAAC,SAAS;MACxB,YAAY,EAAE,CAAC;MACf,SAAS,EAAE,CAAC;MACZ,QAAQ,EAAE,KAAK;MACf,SAAS,EAAE,EAAE;MACb,KAAK,EAAE,KAAK;MACZ,OAAO,EAAE;IAAO,CAAA,EAEf,QAAQ,EACR,OAAO,CAAC,IAAI,CAAC,KACZ,KAAA,CAAA,aAAA,CAAC,GAAG,EAAA;MAAC,QAAQ,EAAE;IAAC,CAAA,EACd,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA;MACT,kBAAkB,EAAC,MAAM;MACzB,OAAO,EAAC,OAAO;MACf,IAAI,EAAE,IAAI,KAAK,KAAK,GAAG,YAAY,GAAG,UAAU;MAChD,SAAS,EAAC,UAAU;MACpB,IAAI,EAAC,IAAI;MACT,OAAO,EAAE,SAAA,QAAA,EAAK,CAAE;IAAC,CAAA,CACjB,CACE,CACP,CACG;EAEV,CAAC,MAAM;IACL,OACE,KAAA,CAAA,aAAA,CAAC,GAAG,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,cAAc,EAAC,QAAQ;MAAC,YAAY,EAAE,CAAC;MAAE,SAAS,EAAE,CAAC;MAAE,KAAK,EAAE;IAAK,CAAA,EACjF,QAAQ,CACL;EAEV;AACF,CAAC","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { Box } from \"./Box\";\nimport { IconButton } from \"./IconButton\";\nimport { useTableContext } from \"./tableContext\";\n/**\n * Use TableHeaderCell to define a header cell in Table.\n */\nexport const TableHeaderCell = ({ children, index, sortable, onSortChange, }) => {\n    const { columns, setSortColumn, sortColumn } = useTableContext();\n    const width = columns[index];\n    if (!width) {\n        console.warn(`No width defined for column ${index} in TableHeaderCell`);\n    }\n    const onClick = () => {\n        // desc => asc => undefined\n        const newSort = sort === \"desc\" ? \"asc\" : sort === \"asc\" ? undefined : \"desc\";\n        if (setSortColumn) {\n            setSortColumn(newSort ? { column: index, direction: newSort } : undefined);\n        }\n        onSortChange && onSortChange(newSort);\n    };\n    const sort = (sortColumn === null || sortColumn === void 0 ? void 0 : sortColumn.column) === index ? sortColumn.direction : undefined;\n    if (sortable) {\n        if (!onSortChange) {\n            console.error(\"onSortChange is required when sortable is true\");\n        }\n        return (React.createElement(Box, { alignItems: \"center\", direction: \"row\", flex: \"grow\", justifyContent: \"between\", marginBottom: 2, marginTop: 2, maxWidth: width, minHeight: 36, width: width, onClick: onClick },\n            children,\n            Boolean(sort) && (React.createElement(Box, { paddingX: 2 },\n                React.createElement(IconButton, { accessibilityLabel: \"sort\", bgColor: \"white\", icon: sort === \"asc\" ? \"arrow-down\" : \"arrow-up\", iconColor: \"darkGray\", size: \"sm\", onClick: () => { } })))));\n    }\n    else {\n        return (React.createElement(Box, { flex: \"grow\", justifyContent: \"center\", marginBottom: 2, marginTop: 2, width: width }, children));\n    }\n};\n//# sourceMappingURL=TableHeaderCell.js.map"]},"metadata":{},"sourceType":"module"}