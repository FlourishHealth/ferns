{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef } from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nvar scrollEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];\nvar _worklet_7096777976604_init_data = {\n  code: \"function anonymous(event){const{offsetRef}=this.__closure;offsetRef.current.value=event.contentOffset.x===0?event.contentOffset.y:event.contentOffset.x;}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"event\\\",\\\"offsetRef\\\",\\\"__closure\\\",\\\"current\\\",\\\"value\\\",\\\"contentOffset\\\",\\\"x\\\",\\\"y\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAmByB,SAAAA,SAASA,CAAAC,KAAA,QAAAC,SAAA,OAAAC,SAAA,CAG9BD,SAAS,CAACE,OAAO,CAACC,KAAK,CAAGJ,KAAK,CAACK,aAAa,CAACC,CAAC,GAAK,CAAC,CAAGN,KAAK,CAACK,aAAa,CAACE,CAAC,CAAGP,KAAK,CAACK,aAAa,CAACC,CAAC,CACvG\\\"}\",\n  version: \"3.6.3\"\n};\nexport function useScrollViewOffset(animatedRef, initialRef) {\n  var offsetRef = useRef(initialRef !== undefined ? initialRef : useSharedValue(0));\n  var event = useEvent(function () {\n    var _e = [new global.Error(), -2, -27];\n    var anonymous = function anonymous(event) {\n      offsetRef.current.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n    };\n    anonymous.__closure = {\n      offsetRef: offsetRef\n    };\n    anonymous.__workletHash = 7096777976604;\n    anonymous.__initData = _worklet_7096777976604_init_data;\n    anonymous.__stackDetails = _e;\n    return anonymous;\n  }(), scrollEventNames);\n  useEffect(function () {\n    var _event$current;\n    var viewTag = findNodeHandle(animatedRef.current);\n    (_event$current = event.current) === null || _event$current === void 0 ? void 0 : _event$current.registerForEvents(viewTag);\n    return function () {\n      var _event$current2;\n      (_event$current2 = event.current) === null || _event$current2 === void 0 ? void 0 : _event$current2.unregisterFromEvents();\n    };\n  }, [animatedRef.current]);\n  return offsetRef.current;\n}","map":{"version":3,"sources":["useScrollViewOffset.ts"],"names":["useEffect","useRef","useEvent","useSharedValue","scrollEventNames","useScrollViewOffset","animatedRef","initialRef","offsetRef","undefined","event","current","value","contentOffset","x","y","viewTag","findNodeHandle","registerForEvents","unregisterFromEvents"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAA,OAAA,cAAA;AAIzC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,cAAc,QAAQ,kBAAkB;AAQjD,IAAMC,gBAAgB,GAAG,CACvB,UAAU,EACV,mBAAmB,EACnB,iBAAiB,EACjB,uBAAuB,EACvB,qBAAqB,CACtB;AAAA,IAAA,gCAAA;EAAA,IAAA;EAAA,QAAA;EAAA,SAAA;EAAA,OAAA;AAAA;AASD,OAAO,SAASC,mBAAmBA,CACjCC,WAA4C,EAC5CC,UAAgC,EACX;EACrB,IAAMC,SAAS,GAAGP,MAAM,CAEtBM,UAAU,KAAKE,SAAS,GAAGF,UAAU,GAAGJ,cAAc,CAAC,CAAC,CAAC,CAC1D;EAED,IAAMO,KAAK,GAAGR,QAAQ,CACnBQ;IAAAA,IAAAA,EAAAA,QAAAA,MAAAA,CAAAA,KAAAA;IAAAA,IAAAA,SAAAA,YAAAA,UAAAA,KAA4B,EAAK;MAEhCF,SAAS,CAACG,OAAO,CAACC,KAAK,GACrBF,KAAK,CAACG,aAAa,CAACC,CAAC,KAAK,CAAC,GACvBJ,KAAK,CAACG,aAAa,CAACE,CAAC,GACrBL,KAAK,CAACG,aAAa,CAACC,CAAC;IAC7B,CAAC;IAAA,SAAA,CAAA,SAAA;MAAA,SAAA,EAJCN;IAAS;IAAA,SAAA,CAAA,aAAA;IAAA,SAAA,CAAA,UAAA,GAAA,gCAAA;IAAA,SAAA,CAAA,cAAA,GAAA,EAAA;IAAA,OAAA,SAAA;EAAA,CAFVE,IAODN,gBAEA,CACyD;EAE3DJ,SAAS,CAAC,YAAM;IAAA,IAAA,cAAA;IACd,IAAMgB,OAAO,GAAGC,cAAc,CAACX,WAAW,CAACK,OAAO,CAAC;IACnD,CAAA,cAAA,GAAA,KAAK,CAACA,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,cAAA,CAAeO,iBAAiB,CAACF,OAAO,CAAW;IAEnD,OAAO,YAAM;MAAA,IAAA,eAAA;MACX,CAAA,eAAA,GAAA,KAAK,CAACL,OAAO,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,eAAA,CAAeQ,oBAAoB,CAAA,CAAE;IACvC,CAAC;EACH,CAAC,EAAE,CAACb,WAAW,CAACK,OAAO,CAAC,CAAC;EAEzB,OAAOH,SAAS,CAACG,OAAO;AAC1B","sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { SharedValue } from '../commonTypes';\nimport { findNodeHandle } from 'react-native';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport type {\n  AnimatedRef,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\n\nconst scrollEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef) attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport function useScrollViewOffset(\n  animatedRef: AnimatedRef<AnimatedScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number> {\n  const offsetRef = useRef(\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    initialRef !== undefined ? initialRef : useSharedValue(0)\n  );\n\n  const event = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offsetRef.current.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    const viewTag = findNodeHandle(animatedRef.current);\n    event.current?.registerForEvents(viewTag as number);\n\n    return () => {\n      event.current?.unregisterFromEvents();\n    };\n  }, [animatedRef.current]);\n\n  return offsetRef.current;\n}\n"]},"metadata":{},"sourceType":"module"}