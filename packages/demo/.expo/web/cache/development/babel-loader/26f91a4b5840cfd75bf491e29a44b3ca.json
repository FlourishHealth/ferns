{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Children, useCallback, useContext, useEffect, useState } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SwiperFlatList } from \"react-native-swiper-flatlist\";\nimport { Box } from \"./Box\";\nimport { FlatList } from \"./FlatList\";\nimport { IconButton } from \"./IconButton\";\nimport { mediaQueryLargerThan } from \"./MediaQuery\";\nimport { SegmentedControl } from \"./SegmentedControl\";\nimport { Spinner } from \"./Spinner\";\nimport { ThemeContext } from \"./Theme\";\nexport var SplitPage = function SplitPage(_ref) {\n  var children = _ref.children,\n    _ref$tabs = _ref.tabs,\n    tabs = _ref$tabs === void 0 ? [] : _ref$tabs,\n    _ref$loading = _ref.loading,\n    loading = _ref$loading === void 0 ? false : _ref$loading,\n    color = _ref.color,\n    keyboardOffset = _ref.keyboardOffset,\n    renderListViewItem = _ref.renderListViewItem,\n    renderListViewHeader = _ref.renderListViewHeader,\n    renderContent = _ref.renderContent,\n    _ref$onSelectionChang = _ref.onSelectionChange,\n    onSelectionChange = _ref$onSelectionChang === void 0 ? function () {} : _ref$onSelectionChang,\n    listViewData = _ref.listViewData,\n    listViewExtraData = _ref.listViewExtraData,\n    listViewWidth = _ref.listViewWidth,\n    bottomNavBarHeight = _ref.bottomNavBarHeight,\n    showItemList = _ref.showItemList,\n    selectLimit = _ref.selectLimit;\n  var _useContext = useContext(ThemeContext),\n    theme = _useContext.theme;\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedId = _useState2[0],\n    setSelectedId = _useState2[1];\n  var _useState3 = useState([0, 1]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    activeTabs = _useState4[0],\n    setActiveTabs = _useState4[1];\n  var _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width;\n  var isMobileDevice = !mediaQueryLargerThan(\"sm\");\n  var elementArray = Children.toArray(children).filter(function (c) {\n    return c !== null;\n  });\n  var onItemSelect = useCallback(function () {\n    var _ref2 = _asyncToGenerator(function* (item) {\n      setSelectedId(item.index);\n      yield onSelectionChange(item);\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [onSelectionChange]);\n  var onItemDeselect = useCallback(_asyncToGenerator(function* () {\n    setSelectedId(undefined);\n    yield onSelectionChange(undefined);\n  }), [onSelectionChange]);\n  useEffect(function () {\n    if (showItemList) {\n      void onItemDeselect();\n    }\n  }, [showItemList, onItemDeselect]);\n  if (!children && !renderContent) {\n    console.warn(\"A child node is required\");\n    return null;\n  }\n  if (elementArray.length > 2 && elementArray.length !== tabs.length) {\n    console.warn(\"There must be a tab for each child\");\n    return null;\n  }\n  var renderItem = function renderItem(itemInfo) {\n    return React.createElement(Box, {\n      onClick: function () {\n        var _onClick = _asyncToGenerator(function* () {\n          yield onItemSelect(itemInfo);\n        });\n        function onClick() {\n          return _onClick.apply(this, arguments);\n        }\n        return onClick;\n      }()\n    }, renderListViewItem(itemInfo));\n  };\n  var renderList = function renderList() {\n    return React.createElement(View, {\n      style: {\n        width: listViewWidth !== null && listViewWidth !== void 0 ? listViewWidth : 300,\n        maxWidth: listViewWidth !== null && listViewWidth !== void 0 ? listViewWidth : 300,\n        flexGrow: 1,\n        flexShrink: 0,\n        display: \"flex\",\n        flexDirection: \"column\"\n      }\n    }, renderListViewHeader && renderListViewHeader(), React.createElement(FlatList, {\n      data: listViewData,\n      extraData: listViewExtraData,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      renderItem: renderItem\n    }));\n  };\n  var renderListContent = function renderListContent() {\n    return React.createElement(Box, {\n      flex: \"grow\",\n      padding: 2\n    }, renderContent && renderContent(selectedId));\n  };\n  var renderChildrenContent = function renderChildrenContent() {\n    if (Array.isArray(children) && elementArray.length > 2) {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          width: \"100%\",\n          height: \"100%\",\n          alignItems: \"center\"\n        }\n      }, React.createElement(Box, {\n        marginBottom: 4,\n        paddingX: 4,\n        width: \"100%\"\n      }, React.createElement(SegmentedControl, {\n        items: tabs,\n        multiselect: true,\n        selectLimit: selectLimit || tabs.length,\n        selectedItemIndexes: activeTabs,\n        onChange: function onChange(index) {\n          setActiveTabs(_toConsumableArray(index.activeIndex));\n        }\n      })), React.createElement(Box, {\n        direction: \"row\",\n        flex: \"grow\",\n        height: \"100%\",\n        paddingX: 4,\n        width: activeTabs.length > 1 ? \"100%\" : \"60%\"\n      }, activeTabs.map(function (tabIndex, i) {\n        return React.createElement(ScrollView, {\n          key: tabIndex,\n          contentContainerStyle: {\n            flex: 1\n          },\n          style: {\n            flex: 1,\n            width: \"60%\",\n            height: \"100%\",\n            paddingRight: i ? 0 : 16,\n            paddingLeft: i ? 16 : 0\n          }\n        }, elementArray[tabIndex]);\n      })));\n    } else {\n      return React.createElement(Box, {\n        alignItems: \"center\",\n        direction: \"row\",\n        flex: \"grow\",\n        justifyContent: \"center\",\n        paddingX: 2\n      }, elementArray.map(function (element, index) {\n        return React.createElement(ScrollView, {\n          key: index,\n          contentContainerStyle: {\n            flex: 1\n          },\n          style: {\n            flex: 1,\n            width: \"60%\",\n            height: \"100%\"\n          }\n        }, element);\n      }));\n    }\n  };\n  var renderMobileList = function renderMobileList() {\n    if (isMobileDevice && selectedId !== undefined) {\n      return null;\n    }\n    return React.createElement(View, {\n      style: {\n        width: \"100%\",\n        maxWidth: \"100%\",\n        height: \"100%\",\n        flexGrow: 1,\n        flexShrink: 0,\n        display: \"flex\",\n        flexDirection: \"column\"\n      }\n    }, renderListViewHeader && renderListViewHeader(), React.createElement(FlatList, {\n      data: listViewData,\n      extraData: listViewExtraData,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      nestedScrollEnabled: true,\n      renderItem: renderItem\n    }));\n  };\n  var renderMobileListContent = function renderMobileListContent() {\n    if (isMobileDevice && selectedId === undefined) {\n      return null;\n    }\n    return React.createElement(Box, {\n      flex: \"grow\",\n      padding: 2\n    }, isMobileDevice && React.createElement(Box, {\n      width: \"100%\"\n    }, React.createElement(IconButton, {\n      accessibilityLabel: \"close\",\n      icon: \"times\",\n      iconColor: \"darkGray\",\n      onClick: function onClick() {\n        return onItemDeselect();\n      }\n    })), renderContent && renderContent(selectedId));\n  };\n  var renderMobileChildrenContent = function renderMobileChildrenContent() {\n    if (selectedId === undefined) {\n      return null;\n    }\n    return React.createElement(SwiperFlatList, {\n      nestedScrollEnabled: true,\n      paginationStyle: {\n        justifyContent: \"center\",\n        width: \"95%\"\n      },\n      renderAll: true,\n      showPagination: true,\n      style: {\n        width: \"100%\"\n      }\n    }, elementArray.map(function (element, i) {\n      return React.createElement(View, {\n        key: i,\n        style: {\n          width: width - 8,\n          padding: 4,\n          height: elementArray.length > 1 ? \"90%\" : \"100%\",\n          paddingBottom: bottomNavBarHeight\n        }\n      }, element);\n    }));\n  };\n  var renderSplitPage = function renderSplitPage() {\n    return React.createElement(React.Fragment, null, renderList(), renderContent ? renderListContent() : renderChildrenContent());\n  };\n  var renderMobileSplitPage = function renderMobileSplitPage() {\n    var renderMainContent = renderContent ? renderMobileListContent() : renderMobileChildrenContent();\n    return selectedId === undefined ? renderMobileList() : renderMainContent;\n  };\n  return React.createElement(Box, {\n    avoidKeyboard: true,\n    color: color || \"lightGray\",\n    direction: \"row\",\n    display: \"flex\",\n    height: \"100%\",\n    keyboardOffset: keyboardOffset,\n    padding: 2,\n    width: \"100%\"\n  }, loading === true && React.createElement(Spinner, {\n    color: theme.darkGray,\n    size: \"md\"\n  }), Boolean(isMobileDevice) ? renderMobileSplitPage() : renderSplitPage());\n};","map":{"version":3,"sources":["../src/SplitPage.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { Children, useCallback, useContext, useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, View } from \"react-native\";\nimport { SwiperFlatList } from \"react-native-swiper-flatlist\";\nimport { Box } from \"./Box\";\nimport { FlatList } from \"./FlatList\";\nimport { IconButton } from \"./IconButton\";\nimport { mediaQueryLargerThan } from \"./MediaQuery\";\nimport { SegmentedControl } from \"./SegmentedControl\";\nimport { Spinner } from \"./Spinner\";\nimport { ThemeContext } from \"./Theme\";\n// A component for rendering a list on one side and a details view on the right for large screens,\n// and a scrollable list where clicking an item takes you the details view.\nexport const SplitPage = ({ children, tabs = [], loading = false, color, keyboardOffset, renderListViewItem, renderListViewHeader, renderContent, onSelectionChange = () => { }, listViewData, listViewExtraData, listViewWidth, bottomNavBarHeight, showItemList, selectLimit, }) => {\n    const { theme } = useContext(ThemeContext);\n    const [selectedId, setSelectedId] = useState(undefined);\n    const [activeTabs, setActiveTabs] = useState([0, 1]);\n    const { width } = Dimensions.get(\"window\");\n    const isMobileDevice = !mediaQueryLargerThan(\"sm\");\n    const elementArray = Children.toArray(children).filter((c) => c !== null);\n    const onItemSelect = useCallback(async (item) => {\n        setSelectedId(item.index);\n        await onSelectionChange(item);\n    }, [onSelectionChange]);\n    const onItemDeselect = useCallback(async () => {\n        setSelectedId(undefined);\n        await onSelectionChange(undefined);\n    }, [onSelectionChange]);\n    // If the list is showing, deselect the item.\n    useEffect(() => {\n        if (showItemList) {\n            void onItemDeselect();\n        }\n    }, [showItemList, onItemDeselect]);\n    if (!children && !renderContent) {\n        console.warn(\"A child node is required\");\n        return null;\n    }\n    if (elementArray.length > 2 && elementArray.length !== tabs.length) {\n        console.warn(\"There must be a tab for each child\");\n        return null;\n    }\n    const renderItem = (itemInfo) => {\n        return (React.createElement(Box, { onClick: async () => {\n                await onItemSelect(itemInfo);\n            } }, renderListViewItem(itemInfo)));\n    };\n    const renderList = () => {\n        return (React.createElement(View, { style: {\n                width: listViewWidth !== null && listViewWidth !== void 0 ? listViewWidth : 300,\n                maxWidth: listViewWidth !== null && listViewWidth !== void 0 ? listViewWidth : 300,\n                flexGrow: 1,\n                flexShrink: 0,\n                display: \"flex\",\n                flexDirection: \"column\",\n            } },\n            renderListViewHeader && renderListViewHeader(),\n            React.createElement(FlatList, { data: listViewData, extraData: listViewExtraData, keyExtractor: (item) => item.id, renderItem: renderItem })));\n    };\n    const renderListContent = () => {\n        return (React.createElement(Box, { flex: \"grow\", padding: 2 }, renderContent && renderContent(selectedId)));\n    };\n    const renderChildrenContent = () => {\n        if (Array.isArray(children) && elementArray.length > 2) {\n            return (React.createElement(View, { style: {\n                    flex: 1,\n                    width: \"100%\",\n                    height: \"100%\",\n                    alignItems: \"center\",\n                } },\n                React.createElement(Box, { marginBottom: 4, paddingX: 4, width: \"100%\" },\n                    React.createElement(SegmentedControl, { items: tabs, multiselect: true, selectLimit: selectLimit || tabs.length, selectedItemIndexes: activeTabs, onChange: (index) => {\n                            setActiveTabs([...index.activeIndex]);\n                        } })),\n                React.createElement(Box, { direction: \"row\", flex: \"grow\", height: \"100%\", paddingX: 4, width: activeTabs.length > 1 ? \"100%\" : \"60%\" }, activeTabs.map((tabIndex, i) => {\n                    return (React.createElement(ScrollView, { key: tabIndex, contentContainerStyle: {\n                            flex: 1,\n                        }, style: {\n                            flex: 1,\n                            width: \"60%\",\n                            height: \"100%\",\n                            paddingRight: i ? 0 : 16,\n                            paddingLeft: i ? 16 : 0,\n                        } }, elementArray[tabIndex]));\n                }))));\n        }\n        else {\n            return (React.createElement(Box, { alignItems: \"center\", direction: \"row\", flex: \"grow\", justifyContent: \"center\", paddingX: 2 }, elementArray.map((element, index) => {\n                return (React.createElement(ScrollView, { key: index, contentContainerStyle: {\n                        flex: 1,\n                    }, style: {\n                        flex: 1,\n                        width: \"60%\",\n                        height: \"100%\",\n                    } }, element));\n            })));\n        }\n    };\n    const renderMobileList = () => {\n        if (isMobileDevice && selectedId !== undefined) {\n            return null;\n        }\n        return (React.createElement(View, { style: {\n                width: \"100%\",\n                maxWidth: \"100%\",\n                height: \"100%\",\n                flexGrow: 1,\n                flexShrink: 0,\n                display: \"flex\",\n                flexDirection: \"column\",\n            } },\n            renderListViewHeader && renderListViewHeader(),\n            React.createElement(FlatList, { data: listViewData, extraData: listViewExtraData, keyExtractor: (item) => item.id, nestedScrollEnabled: true, renderItem: renderItem })));\n    };\n    const renderMobileListContent = () => {\n        if (isMobileDevice && selectedId === undefined) {\n            return null;\n        }\n        return (React.createElement(Box, { flex: \"grow\", padding: 2 },\n            isMobileDevice && (React.createElement(Box, { width: \"100%\" },\n                React.createElement(IconButton, { accessibilityLabel: \"close\", icon: \"times\", iconColor: \"darkGray\", onClick: () => onItemDeselect() }))),\n            renderContent && renderContent(selectedId)));\n    };\n    const renderMobileChildrenContent = () => {\n        if (selectedId === undefined) {\n            return null;\n        }\n        return (React.createElement(SwiperFlatList, { nestedScrollEnabled: true, paginationStyle: { justifyContent: \"center\", width: \"95%\" }, renderAll: true, showPagination: true, style: { width: \"100%\" } }, elementArray.map((element, i) => {\n            return (React.createElement(View, { key: i, style: {\n                    width: width - 8,\n                    padding: 4,\n                    height: elementArray.length > 1 ? \"90%\" : \"100%\",\n                    paddingBottom: bottomNavBarHeight,\n                } }, element));\n        })));\n    };\n    const renderSplitPage = () => {\n        return (React.createElement(React.Fragment, null,\n            renderList(),\n            renderContent ? renderListContent() : renderChildrenContent()));\n    };\n    const renderMobileSplitPage = () => {\n        const renderMainContent = renderContent\n            ? renderMobileListContent()\n            : renderMobileChildrenContent();\n        return selectedId === undefined ? renderMobileList() : renderMainContent;\n    };\n    return (React.createElement(Box, { avoidKeyboard: true, color: color || \"lightGray\", direction: \"row\", display: \"flex\", height: \"100%\", keyboardOffset: keyboardOffset, padding: 2, width: \"100%\" },\n        loading === true && React.createElement(Spinner, { color: theme.darkGray, size: \"md\" }),\n        Boolean(isMobileDevice) ? renderMobileSplitPage() : renderSplitPage()));\n};\n//# sourceMappingURL=SplitPage.js.map"]},"metadata":{},"sourceType":"module"}