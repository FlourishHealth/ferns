{"ast":null,"code":"import React from 'react';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\nimport HoverGestureHandler from './web/handlers/HoverGestureHandler';\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { GestureHandlerWebDelegate } from './web/tools/GestureHandlerWebDelegate';\nexport var Gestures = {\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  PanGestureHandler: PanGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  FlingGestureHandler: FlingGestureHandler,\n  ManualGestureHandler: ManualGestureHandler,\n  HoverGestureHandler: HoverGestureHandler\n};\nexport var HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler\n};\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass(new GestureHandlerWebDelegate()));\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof HTMLElement || newView instanceof React.Component)) {\n      return;\n    }\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["React","isNewWebImplementationEnabled","InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","ManualGestureHandler","HoverGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","GestureHandlerWebDelegate","Gestures","HammerGestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\nimport HoverGestureHandler from './web/handlers/HoverGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\nimport { GestureHandlerWebDelegate } from './web/tools/GestureHandlerWebDelegate';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n  HoverGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(\n        handlerTag,\n        new GestureClass(new GestureHandlerWebDelegate())\n      );\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}