{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar Vector = function () {\n  function Vector(length) {\n    _classCallCheck(this, Vector);\n    _defineProperty(this, \"offset\", void 0);\n    _defineProperty(this, \"length\", void 0);\n    _defineProperty(this, \"elements\", void 0);\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array(length);\n  }\n  _createClass(Vector, [{\n    key: \"get\",\n    value: function get(index) {\n      return this.elements[this.offset + index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(other) {\n      var result = 0;\n      for (var i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n  }, {\n    key: \"norm\",\n    value: function norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }], [{\n    key: \"fromVOL\",\n    value: function fromVOL(values, offset, length) {\n      var result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n  }]);\n  return Vector;\n}();\nvar Matrix = function () {\n  function Matrix(rows, columns) {\n    _classCallCheck(this, Matrix);\n    _defineProperty(this, \"columns\", void 0);\n    _defineProperty(this, \"elements\", void 0);\n    this.columns = columns;\n    this.elements = new Array(rows * columns);\n  }\n  _createClass(Matrix, [{\n    key: \"get\",\n    value: function get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n  }, {\n    key: \"set\",\n    value: function set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n  }, {\n    key: \"getRow\",\n    value: function getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  }]);\n  return Matrix;\n}();\nvar PolynomialFit = _createClass(function PolynomialFit(degree) {\n  _classCallCheck(this, PolynomialFit);\n  _defineProperty(this, \"coefficients\", void 0);\n  this.coefficients = new Array(degree + 1);\n});\nvar precisionErrorTolerance = 1e-10;\nvar LeastSquareSolver = function () {\n  function LeastSquareSolver(x, y, w) {\n    _classCallCheck(this, LeastSquareSolver);\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"w\", void 0);\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n  _createClass(LeastSquareSolver, [{\n    key: \"solve\",\n    value: function solve(degree) {\n      if (degree > this.x.length) {\n        return null;\n      }\n      var result = new PolynomialFit(degree);\n      var m = this.x.length;\n      var n = degree + 1;\n      var a = new Matrix(n, m);\n      for (var h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (var i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      }\n      var q = new Matrix(n, m);\n      var r = new Matrix(n, m);\n      for (var j = 0; j < n; j += 1) {\n        for (var _h = 0; _h < m; _h += 1) {\n          q.set(j, _h, a.get(j, _h));\n        }\n        for (var _i = 0; _i < j; _i += 1) {\n          var dot = q.getRow(j).dot(q.getRow(_i));\n          for (var _h2 = 0; _h2 < m; _h2 += 1) {\n            q.set(j, _h2, q.get(j, _h2) - dot * q.get(_i, _h2));\n          }\n        }\n        var norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          return null;\n        }\n        var inverseNorm = 1.0 / norm;\n        for (var _h3 = 0; _h3 < m; _h3 += 1) {\n          q.set(j, _h3, q.get(j, _h3) * inverseNorm);\n        }\n        for (var _i2 = 0; _i2 < n; _i2 += 1) {\n          r.set(j, _i2, _i2 < j ? 0.0 : q.getRow(j).dot(a.getRow(_i2)));\n        }\n      }\n      var wy = new Vector(m);\n      for (var _h4 = 0; _h4 < m; _h4 += 1) {\n        wy.set(_h4, this.y[_h4] * this.w[_h4]);\n      }\n      for (var _i3 = n - 1; _i3 >= 0; _i3 -= 1) {\n        result.coefficients[_i3] = q.getRow(_i3).dot(wy);\n        for (var _j = n - 1; _j > _i3; _j -= 1) {\n          result.coefficients[_i3] -= r.get(_i3, _j) * result.coefficients[_j];\n        }\n        result.coefficients[_i3] /= r.get(_i3, _i3);\n      }\n      return result;\n    }\n  }]);\n  return LeastSquareSolver;\n}();\nexport { LeastSquareSolver as default };","map":{"version":3,"sources":["LeastSquareSolver.ts"],"names":["Vector","constructor","length","offset","elements","Array","fromVOL","values","result","get","index","set","value","dot","other","i","norm","Math","sqrt","Matrix","rows","columns","row","column","getRow","PolynomialFit","degree","coefficients","precisionErrorTolerance","LeastSquareSolver","x","y","w","solve","m","n","a","h","q","r","j","inverseNorm","wy"],"mappings":"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","sourcesContent":["// Implementation taken from Flutter's LeastSquareSolver\n// https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\nclass Vector {\n  private offset: number;\n  private length: number;\n  private elements: number[];\n\n  constructor(length: number) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array<number>(length);\n  }\n\n  public static fromVOL(\n    values: number[],\n    offset: number,\n    length: number\n  ): Vector {\n    const result = new Vector(0);\n\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n\n    return result;\n  }\n\n  public get(index: number): number {\n    return this.elements[this.offset + index];\n  }\n\n  public set(index: number, value: number): void {\n    this.elements[this.offset + index] = value;\n  }\n\n  public dot(other: Vector): number {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n\n  public norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\n\nclass Matrix {\n  private columns: number;\n  private elements: number[];\n\n  constructor(rows: number, columns: number) {\n    this.columns = columns;\n    this.elements = new Array<number>(rows * columns);\n  }\n\n  public get(row: number, column: number): number {\n    return this.elements[row * this.columns + column];\n  }\n\n  public set(row: number, column: number, value: number): void {\n    this.elements[row * this.columns + column] = value;\n  }\n\n  public getRow(row: number): Vector {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\n\n/// An nth degree polynomial fit to a dataset.\nclass PolynomialFit {\n  /// The polynomial coefficients of the fit.\n  ///\n  /// For each `i`, the element `coefficients[i]` is the coefficient of\n  /// the `i`-th power of the variable.\n  public coefficients: number[];\n\n  /// Creates a polynomial fit of the given degree.\n  ///\n  /// There are n + 1 coefficients in a fit of degree n.\n  constructor(degree: number) {\n    this.coefficients = new Array<number>(degree + 1);\n  }\n}\n\nconst precisionErrorTolerance = 1e-10;\n\n/// Uses the least-squares algorithm to fit a polynomial to a set of data.\nexport default class LeastSquareSolver {\n  /// The x-coordinates of each data point.\n  private x: number[];\n  /// The y-coordinates of each data point.\n  private y: number[];\n  /// The weight to use for each data point.\n  private w: number[];\n\n  /// Creates a least-squares solver.\n  ///\n  /// The [x], [y], and [w] arguments must not be null.\n  constructor(x: number[], y: number[], w: number[]) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n\n  /// Fits a polynomial of the given degree to the data points.\n  ///\n  /// When there is not enough data to fit a curve null is returned.\n  public solve(degree: number): PolynomialFit | null {\n    if (degree > this.x.length) {\n      // Not enough data to fit a curve.\n      return null;\n    }\n\n    const result = new PolynomialFit(degree);\n\n    // Shorthands for the purpose of notation equivalence to original C++ code.\n    const m = this.x.length;\n    const n = degree + 1;\n\n    // Expand the X vector to a matrix A, pre-multiplied by the weights.\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n\n    // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n    // Orthonormal basis, column-major ordVectorer.\n    const q = new Matrix(n, m);\n    // Upper triangular matrix, row-major order.\n    const r = new Matrix(n, m);\n\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        // Vectors are linearly dependent or zero so no solution.\n        return null;\n      }\n\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n\n    // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n    // We just work from bottom-right to top-left calculating B's coefficients.\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}