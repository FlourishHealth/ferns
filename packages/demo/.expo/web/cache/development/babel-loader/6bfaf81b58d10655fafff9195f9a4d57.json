{"ast":null,"code":"import React, { useContext } from \"react\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport { Hyperlink } from \"./Hyperlink\";\nimport { ThemeContext } from \"./Theme\";\nvar fontSizes = {\n  xs: 10,\n  sm: 12,\n  md: 14,\n  lg: 16\n};\nexport var Text = function Text(_ref) {\n  var _ref$align = _ref.align,\n    align = _ref$align === void 0 ? \"left\" : _ref$align,\n    children = _ref.children,\n    color = _ref.color,\n    _ref$inline = _ref.inline,\n    inline = _ref$inline === void 0 ? false : _ref$inline,\n    _ref$italic = _ref.italic,\n    italic = _ref$italic === void 0 ? false : _ref$italic,\n    overflow = _ref.overflow,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? \"md\" : _ref$size,\n    _ref$truncate = _ref.truncate,\n    truncate = _ref$truncate === void 0 ? false : _ref$truncate,\n    font = _ref.font,\n    onPress = _ref.onPress,\n    underline = _ref.underline,\n    numberOfLines = _ref.numberOfLines,\n    skipLinking = _ref.skipLinking,\n    testID = _ref.testID,\n    _ref$weight = _ref.weight,\n    weight = _ref$weight === void 0 ? \"normal\" : _ref$weight;\n  var _useContext = useContext(ThemeContext),\n    theme = _useContext.theme;\n  function propsToStyle() {\n    var style = {};\n    if (overflow) {\n      console.warn(\"Text overflow is deprecated. Use `truncate` to cut off the text and add ellipse, otherwise breakWord is the default.\");\n    }\n    var computedFont = \"primary\";\n    if (font === \"primary\" || !font) {\n      if (weight === \"bold\") {\n        computedFont = \"primaryBoldFont\";\n      } else {\n        computedFont = \"primaryFont\";\n      }\n    } else if (font === \"secondary\") {\n      if (weight === \"bold\") {\n        computedFont = \"secondaryBoldFont\";\n      } else {\n        computedFont = \"secondaryFont\";\n      }\n    } else if (font === \"button\") {\n      computedFont = \"buttonFont\";\n    } else if (font === \"title\") {\n      computedFont = \"titleFont\";\n    } else if (font === \"accent\") {\n      if (weight === \"bold\") {\n        computedFont = \"accentBoldFont\";\n      } else {\n        computedFont = \"accentFont\";\n      }\n    }\n    if (weight === \"bold\") {\n      style.fontWeight = \"bold\";\n    }\n    style.fontFamily = theme[computedFont];\n    style.fontSize = fontSizes[size || \"md\"];\n    if (align) {\n      style.textAlign = align;\n    }\n    if (color) {\n      style.color = theme[color];\n    } else {\n      style.color = theme.darkGray;\n    }\n    if (italic) {\n      style.fontStyle = \"italic\";\n    }\n    if (underline) {\n      style.textDecorationLine = \"underline\";\n    }\n    return style;\n  }\n  var lines = 0;\n  if (numberOfLines && truncate && numberOfLines > 1) {\n    console.error(`Cannot truncate Text and have ${numberOfLines} lines`);\n  }\n  if (numberOfLines) {\n    lines = numberOfLines;\n  } else if (inline || truncate) {\n    lines = 1;\n  }\n  var inner = React.createElement(NativeText, {\n    numberOfLines: lines,\n    style: propsToStyle(),\n    testID: testID,\n    onPress: onPress\n  }, children);\n  if (skipLinking) {\n    return inner;\n  } else {\n    return React.createElement(Hyperlink, {\n      linkDefault: true,\n      linkStyle: {\n        textDecorationLine: \"underline\"\n      }\n    }, inner);\n  }\n};","map":{"version":3,"sources":["../src/Text.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useContext } from \"react\";\nimport { Text as NativeText } from \"react-native\";\nimport { Hyperlink } from \"./Hyperlink\";\nimport { ThemeContext } from \"./Theme\";\nconst fontSizes = {\n    xs: 10,\n    sm: 12,\n    md: 14,\n    lg: 16,\n};\nexport const Text = ({ align = \"left\", children, color, inline = false, italic = false, overflow, size = \"md\", truncate = false, font, onPress, underline, numberOfLines, skipLinking, testID, weight = \"normal\", }) => {\n    const { theme } = useContext(ThemeContext);\n    function propsToStyle() {\n        const style = {};\n        if (overflow) {\n            console.warn(\"Text overflow is deprecated. Use `truncate` to cut off the text and add ellipse, otherwise breakWord is the default.\");\n        }\n        let computedFont = \"primary\";\n        if (font === \"primary\" || !font) {\n            if (weight === \"bold\") {\n                computedFont = \"primaryBoldFont\";\n            }\n            else {\n                computedFont = \"primaryFont\";\n            }\n        }\n        else if (font === \"secondary\") {\n            if (weight === \"bold\") {\n                computedFont = \"secondaryBoldFont\";\n            }\n            else {\n                computedFont = \"secondaryFont\";\n            }\n        }\n        else if (font === \"button\") {\n            computedFont = \"buttonFont\";\n        }\n        else if (font === \"title\") {\n            computedFont = \"titleFont\";\n        }\n        else if (font === \"accent\") {\n            if (weight === \"bold\") {\n                computedFont = \"accentBoldFont\";\n            }\n            else {\n                computedFont = \"accentFont\";\n            }\n        }\n        if (weight === \"bold\") {\n            style.fontWeight = \"bold\";\n        }\n        style.fontFamily = theme[computedFont];\n        style.fontSize = fontSizes[size || \"md\"];\n        if (align) {\n            style.textAlign = align;\n        }\n        if (color) {\n            style.color = theme[color];\n        }\n        else {\n            style.color = theme.darkGray;\n        }\n        if (italic) {\n            style.fontStyle = \"italic\";\n        }\n        if (underline) {\n            style.textDecorationLine = \"underline\";\n        }\n        // TODO: might be useful for wrapping/truncating\n        // if (numberOfLines !== 1 && !inline) {\n        //   style.flexWrap = \"wrap\";\n        // }\n        return style;\n    }\n    let lines = 0;\n    if (numberOfLines && truncate && numberOfLines > 1) {\n        console.error(`Cannot truncate Text and have ${numberOfLines} lines`);\n    }\n    if (numberOfLines) {\n        lines = numberOfLines;\n    }\n    else if (inline || truncate) {\n        lines = 1;\n    }\n    const inner = (React.createElement(NativeText, { numberOfLines: lines, style: propsToStyle(), testID: testID, onPress: onPress }, children));\n    if (skipLinking) {\n        return inner;\n    }\n    else {\n        return (React.createElement(Hyperlink, { linkDefault: true, linkStyle: { textDecorationLine: \"underline\" } }, inner));\n    }\n};\n//# sourceMappingURL=Text.js.map"]},"metadata":{},"sourceType":"module"}