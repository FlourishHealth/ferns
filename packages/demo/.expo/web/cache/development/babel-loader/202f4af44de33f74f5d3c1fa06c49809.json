{"ast":null,"code":"import { CodedError } from 'expo-modules-core';\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { getAssetForSource, loadSingleFontAsync } from './FontLoader';\nexport function getServerResources() {\n  return ExpoFontLoader.getServerResources();\n}\nexport function resetServerContext() {\n  return ExpoFontLoader.resetServerContext();\n}\nexport function registerStaticFont(fontFamily, source) {\n  if (!source) {\n    throw new CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n  }\n  var asset = getAssetForSource(source);\n  loadSingleFontAsync(fontFamily, asset);\n}","map":{"version":3,"sources":["../src/server.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,mBAAmB;AAE9C,OAAO,cAAc,MAAM,kBAAkB;AAE7C,SAAS,iBAAiB,EAAE,mBAAmB,QAAQ,cAAc;AAMrE,OAAM,SAAU,kBAAkB,CAAA,EAAA;EAChC,OAAO,cAAc,CAAC,kBAAkB,CAAA,CAAE;AAC5C;AAMA,OAAM,SAAU,kBAAkB,CAAA,EAAA;EAChC,OAAO,cAAc,CAAC,kBAAkB,CAAA,CAAE;AAC5C;AAEA,OAAM,SAAU,kBAAkB,CAAC,UAAkB,EAAE,MAA0B,EAAA;EAE/E,IAAI,CAAC,MAAM,EAAE;IACX,MAAM,IAAI,UAAU,CAClB,iBAAiB,EACjB,iDAAiD,UAAU,MAAM,MAAM,sEAAsE,UAAU,GAAG,CAC3J;EACF;EACD,IAAM,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAC;EAEvC,mBAAmB,CAAC,UAAU,EAAE,KAAK,CAAC;AACxC","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontSource } from './Font.types';\nimport { getAssetForSource, loadSingleFontAsync } from './FontLoader';\n\n/**\n * @returns the server resources that should be statically extracted.\n * @private\n */\nexport function getServerResources(): string[] {\n  return ExpoFontLoader.getServerResources();\n}\n\n/**\n * @returns clear the server resources from the global scope.\n * @private\n */\nexport function resetServerContext() {\n  return ExpoFontLoader.resetServerContext();\n}\n\nexport function registerStaticFont(fontFamily: string, source?: FontSource | null) {\n  // MUST BE A SYNC FUNCTION!\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n  const asset = getAssetForSource(source);\n\n  loadSingleFontAsync(fontFamily, asset);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}