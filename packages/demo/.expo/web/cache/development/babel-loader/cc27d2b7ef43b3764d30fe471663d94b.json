{"ast":null,"code":"'use strict';\n\nimport NativeReanimatedModule from './NativeReanimated';\nimport { nativeShouldBeMock, isWeb, shouldBeUseWeb, isFabric } from './PlatformChecker';\nimport { makeShareableCloneRecursive } from './shareables';\nimport { initializeUIRuntime } from './initializers';\nimport { SensorContainer } from './SensorContainer';\nexport { startMapper, stopMapper } from './mappers';\nexport { runOnJS, runOnUI } from './threads';\nexport { createWorkletRuntime, runOnRuntime } from './runtimes';\nexport { makeShareable, makeShareableCloneRecursive } from './shareables';\nexport { makeMutable, makeRemote } from './mutables';\nvar IS_FABRIC = isFabric();\nexport var isReanimated3 = function isReanimated3() {\n  return true;\n};\nexport var isConfigured = isReanimated3;\nif (shouldBeUseWeb()) {\n  global._WORKLET = false;\n  global._log = console.log;\n  global._getAnimationTimestamp = function () {\n    return performance.now();\n  };\n}\nexport function getViewProp(viewTag, propName) {\n  if (IS_FABRIC) {\n    throw new Error('[Reanimated] `getViewProp` is not supported on Fabric yet.');\n  }\n  return new Promise(function (resolve, reject) {\n    return NativeReanimatedModule.getViewProp(viewTag, propName, function (result) {\n      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {\n        reject(result);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\nfunction getSensorContainer() {\n  if (!global.__sensorContainer) {\n    global.__sensorContainer = new SensorContainer();\n  }\n  return global.__sensorContainer;\n}\nvar _worklet_10296548464238_init_data = {\n  code: \"function handleAndFlushAnimationFrame(eventTimestamp,event){const{eventHandler}=this.__closure;global.__frameTimestamp=eventTimestamp;eventHandler(event);global.__flushAnimationFrame(eventTimestamp);global.__frameTimestamp=undefined;}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/core.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"handleAndFlushAnimationFrame\\\",\\\"eventTimestamp\\\",\\\"event\\\",\\\"eventHandler\\\",\\\"__closure\\\",\\\"global\\\",\\\"__frameTimestamp\\\",\\\"__flushAnimationFrame\\\",\\\"undefined\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/core.js\\\"],\\\"mappings\\\":\\\"AA0DE,SAAAA,4BAASA,CAA6BC,cAAA,CAAcC,KAAE,CAAK,OAAAC,YAAA,OAAAC,SAAA,CAGzDC,MAAM,CAACC,gBAAgB,CAAGL,cAAc,CACxCE,YAAY,CAACD,KAAK,CAAC,CACnBG,MAAM,CAACE,qBAAqB,CAACN,cAAc,CAAC,CAC5CI,MAAM,CAACC,gBAAgB,CAAGE,SAAS,CACrC\\\"}\",\n  version: \"3.6.3\"\n};\nexport function registerEventHandler(eventHandler, eventName) {\n  var emitterReactTag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  var handleAndFlushAnimationFrame = function () {\n    var _e = [new global.Error(), -2, -27];\n    var handleAndFlushAnimationFrame = function handleAndFlushAnimationFrame(eventTimestamp, event) {\n      global.__frameTimestamp = eventTimestamp;\n      eventHandler(event);\n      global.__flushAnimationFrame(eventTimestamp);\n      global.__frameTimestamp = undefined;\n    };\n    handleAndFlushAnimationFrame.__closure = {\n      eventHandler: eventHandler\n    };\n    handleAndFlushAnimationFrame.__workletHash = 10296548464238;\n    handleAndFlushAnimationFrame.__initData = _worklet_10296548464238_init_data;\n    handleAndFlushAnimationFrame.__stackDetails = _e;\n    return handleAndFlushAnimationFrame;\n  }();\n  return NativeReanimatedModule.registerEventHandler(makeShareableCloneRecursive(handleAndFlushAnimationFrame), eventName, emitterReactTag);\n}\nexport function unregisterEventHandler(id) {\n  return NativeReanimatedModule.unregisterEventHandler(id);\n}\nvar _worklet_6547589651237_init_data = {\n  code: \"function handleAndFlushAnimationFrame(state,height){const{eventHandler}=this.__closure;const now=_getAnimationTimestamp();global.__frameTimestamp=now;eventHandler(state,height);global.__flushAnimationFrame(now);global.__frameTimestamp=undefined;}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/core.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"handleAndFlushAnimationFrame\\\",\\\"state\\\",\\\"height\\\",\\\"eventHandler\\\",\\\"__closure\\\",\\\"now\\\",\\\"_getAnimationTimestamp\\\",\\\"global\\\",\\\"__frameTimestamp\\\",\\\"__flushAnimationFrame\\\",\\\"undefined\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/core.js\\\"],\\\"mappings\\\":\\\"AAwEE,SAAAA,6BAAAC,KAAA,CAAAC,MAAA,QAAAC,YAAA,OAAAC,SAAA,OAAAC,GAAA,CAAAC,sBAAA,GACAC,MAAA,CAAAC,gBAAA,CAAAH,GAAA,CACAF,YAAS,CAAAF,KAAA,CAAAC,MAAA,EAGPK,MAAM,CAAAE,qBAAM,CAAAJ,GAAA,EACZE,MAAM,CAACC,gBAAgB,CAAGE,SAAG,C\\\"}\",\n  version: \"3.6.3\"\n};\nexport function subscribeForKeyboardEvents(eventHandler, options) {\n  var _options$isStatusBarT;\n  var handleAndFlushAnimationFrame = function () {\n    var _e = [new global.Error(), -2, -27];\n    var handleAndFlushAnimationFrame = function handleAndFlushAnimationFrame(state, height) {\n      var now = _getAnimationTimestamp();\n      global.__frameTimestamp = now;\n      eventHandler(state, height);\n      global.__flushAnimationFrame(now);\n      global.__frameTimestamp = undefined;\n    };\n    handleAndFlushAnimationFrame.__closure = {\n      eventHandler: eventHandler\n    };\n    handleAndFlushAnimationFrame.__workletHash = 6547589651237;\n    handleAndFlushAnimationFrame.__initData = _worklet_6547589651237_init_data;\n    handleAndFlushAnimationFrame.__stackDetails = _e;\n    return handleAndFlushAnimationFrame;\n  }();\n  return NativeReanimatedModule.subscribeForKeyboardEvents(makeShareableCloneRecursive(handleAndFlushAnimationFrame), (_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false);\n}\nexport function unsubscribeFromKeyboardEvents(listenerId) {\n  return NativeReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);\n}\nexport function registerSensor(sensorType, config, eventHandler) {\n  var sensorContainer = getSensorContainer();\n  return sensorContainer.registerSensor(sensorType, config, makeShareableCloneRecursive(eventHandler));\n}\nexport function initializeSensor(sensorType, config) {\n  var sensorContainer = getSensorContainer();\n  return sensorContainer.initializeSensor(sensorType, config);\n}\nexport function unregisterSensor(sensorId) {\n  var sensorContainer = getSensorContainer();\n  return sensorContainer.unregisterSensor(sensorId);\n}\nif (!isWeb()) {\n  initializeUIRuntime();\n}\nvar featuresConfig = {\n  enableLayoutAnimations: false,\n  setByUser: false\n};\nexport function enableLayoutAnimations(flag) {\n  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (isCallByUser) {\n    featuresConfig = {\n      enableLayoutAnimations: flag,\n      setByUser: true\n    };\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {\n    featuresConfig.enableLayoutAnimations = flag;\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  }\n}\nexport function configureLayoutAnimations(viewTag, type, config) {\n  var sharedTransitionTag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  NativeReanimatedModule.configureLayoutAnimation(viewTag, type, sharedTransitionTag, makeShareableCloneRecursive(config));\n}\nexport function setShouldAnimateExitingForTag(viewTag, shouldAnimate) {\n  NativeReanimatedModule.setShouldAnimateExitingForTag(viewTag, shouldAnimate);\n}\nexport function jsiConfigureProps(uiProps, nativeProps) {\n  if (!nativeShouldBeMock()) {\n    NativeReanimatedModule.configureProps(uiProps, nativeProps);\n  }\n}","map":{"version":3,"sources":["core.ts"],"names":["NativeReanimatedModule","nativeShouldBeMock","isWeb","shouldBeUseWeb","isFabric","makeShareableCloneRecursive","initializeUIRuntime","SensorContainer","startMapper","stopMapper","runOnJS","runOnUI","createWorkletRuntime","runOnRuntime","makeShareable","makeMutable","makeRemote","IS_FABRIC","isReanimated3","isConfigured","global","_WORKLET","_log","console","log","_getAnimationTimestamp","performance","now","getViewProp","viewTag","propName","Error","Promise","resolve","reject","result","substr","getSensorContainer","__sensorContainer","registerEventHandler","eventHandler","eventName","emitterReactTag","handleAndFlushAnimationFrame","eventTimestamp","event","__frameTimestamp","__flushAnimationFrame","undefined","unregisterEventHandler","id","subscribeForKeyboardEvents","options","state","height","isStatusBarTranslucentAndroid","unsubscribeFromKeyboardEvents","listenerId","registerSensor","sensorType","config","sensorContainer","initializeSensor","unregisterSensor","sensorId","featuresConfig","enableLayoutAnimations","setByUser","flag","isCallByUser","configureLayoutAnimations","type","sharedTransitionTag","configureLayoutAnimation","setShouldAnimateExitingForTag","shouldAnimate","jsiConfigureProps","uiProps","nativeProps","configureProps"],"mappings":"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","sourcesContent":["'use strict';\nimport NativeReanimatedModule from './NativeReanimated';\nimport {\n  nativeShouldBeMock,\n  isWeb,\n  shouldBeUseWeb,\n  isFabric,\n} from './PlatformChecker';\nimport type {\n  AnimatedKeyboardOptions,\n  SensorConfig,\n  SensorType,\n  SharedValue,\n  Value3D,\n  ValueRotation,\n} from './commonTypes';\nimport { makeShareableCloneRecursive } from './shareables';\nimport type {\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n} from './layoutReanimation';\nimport { initializeUIRuntime } from './initializers';\nimport type {\n  ProgressAnimationCallback,\n  SharedTransitionAnimationsFunction,\n} from './layoutReanimation/animationBuilder/commonTypes';\nimport { SensorContainer } from './SensorContainer';\n\nexport { startMapper, stopMapper } from './mappers';\nexport { runOnJS, runOnUI } from './threads';\nexport { createWorkletRuntime, runOnRuntime } from './runtimes';\nexport type { WorkletRuntime } from './runtimes';\nexport { makeShareable, makeShareableCloneRecursive } from './shareables';\nexport { makeMutable, makeRemote } from './mutables';\n\nconst IS_FABRIC = isFabric();\n\n/**\n * @returns `true` in Reanimated 3, doesn't exist in Reanimated 2 or 1\n */\nexport const isReanimated3 = () => true;\n\n// Superseded by check in `/src/threads.ts`.\n// Used by `react-navigation` to detect if using Reanimated 2 or 3.\n/**\n * @deprecated This function was superseded by other checks.\n * We keep it here for backward compatibility reasons.\n * If you need to check if you are using Reanimated 3 or Reanimated 2\n * please use `isReanimated3` function instead.\n * @returns `true` in Reanimated 3, doesn't exist in Reanimated 2\n */\nexport const isConfigured = isReanimated3;\n\n// this is for web implementation\nif (shouldBeUseWeb()) {\n  global._WORKLET = false;\n  global._log = console.log;\n  global._getAnimationTimestamp = () => performance.now();\n}\n\nexport function getViewProp<T>(viewTag: number, propName: string): Promise<T> {\n  if (IS_FABRIC) {\n    throw new Error(\n      '[Reanimated] `getViewProp` is not supported on Fabric yet.'\n    );\n  }\n\n  return new Promise((resolve, reject) => {\n    return NativeReanimatedModule.getViewProp(\n      viewTag,\n      propName,\n      (result: T) => {\n        if (typeof result === 'string' && result.substr(0, 6) === 'error:') {\n          reject(result);\n        } else {\n          resolve(result);\n        }\n      }\n    );\n  });\n}\n\nfunction getSensorContainer(): SensorContainer {\n  if (!global.__sensorContainer) {\n    global.__sensorContainer = new SensorContainer();\n  }\n  return global.__sensorContainer;\n}\n\nexport function registerEventHandler<T>(\n  eventHandler: (event: T) => void,\n  eventName: string,\n  emitterReactTag = -1\n): number {\n  function handleAndFlushAnimationFrame(eventTimestamp: number, event: T) {\n    'worklet';\n    global.__frameTimestamp = eventTimestamp;\n    eventHandler(event);\n    global.__flushAnimationFrame(eventTimestamp);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.registerEventHandler(\n    makeShareableCloneRecursive(handleAndFlushAnimationFrame),\n    eventName,\n    emitterReactTag\n  );\n}\n\nexport function unregisterEventHandler(id: number): void {\n  return NativeReanimatedModule.unregisterEventHandler(id);\n}\n\nexport function subscribeForKeyboardEvents(\n  eventHandler: (state: number, height: number) => void,\n  options: AnimatedKeyboardOptions\n): number {\n  // TODO: this should really go with the same code path as other events, that is\n  // via registerEventHandler. For now we are copying the code from there.\n  function handleAndFlushAnimationFrame(state: number, height: number) {\n    'worklet';\n    const now = _getAnimationTimestamp();\n    global.__frameTimestamp = now;\n    eventHandler(state, height);\n    global.__flushAnimationFrame(now);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.subscribeForKeyboardEvents(\n    makeShareableCloneRecursive(handleAndFlushAnimationFrame),\n    options.isStatusBarTranslucentAndroid ?? false\n  );\n}\n\nexport function unsubscribeFromKeyboardEvents(listenerId: number): void {\n  return NativeReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);\n}\n\nexport function registerSensor(\n  sensorType: SensorType,\n  config: SensorConfig,\n  eventHandler: (\n    data: Value3D | ValueRotation,\n    orientationDegrees: number\n  ) => void\n): number {\n  const sensorContainer = getSensorContainer();\n  return sensorContainer.registerSensor(\n    sensorType,\n    config,\n    makeShareableCloneRecursive(eventHandler)\n  );\n}\n\nexport function initializeSensor(\n  sensorType: SensorType,\n  config: SensorConfig\n): SharedValue<Value3D | ValueRotation> {\n  const sensorContainer = getSensorContainer();\n  return sensorContainer.initializeSensor(sensorType, config);\n}\n\nexport function unregisterSensor(sensorId: number): void {\n  const sensorContainer = getSensorContainer();\n  return sensorContainer.unregisterSensor(sensorId);\n}\n\nif (!isWeb()) {\n  initializeUIRuntime();\n}\n\ntype FeaturesConfig = {\n  enableLayoutAnimations: boolean;\n  setByUser: boolean;\n};\n\nlet featuresConfig: FeaturesConfig = {\n  enableLayoutAnimations: false,\n  setByUser: false,\n};\n\nexport function enableLayoutAnimations(\n  flag: boolean,\n  isCallByUser = true\n): void {\n  if (isCallByUser) {\n    featuresConfig = {\n      enableLayoutAnimations: flag,\n      setByUser: true,\n    };\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  } else if (\n    !featuresConfig.setByUser &&\n    featuresConfig.enableLayoutAnimations !== flag\n  ) {\n    featuresConfig.enableLayoutAnimations = flag;\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  }\n}\n\nexport function configureLayoutAnimations(\n  viewTag: number | HTMLElement,\n  type: LayoutAnimationType,\n  config:\n    | LayoutAnimationFunction\n    | Keyframe\n    | SharedTransitionAnimationsFunction\n    | ProgressAnimationCallback,\n  sharedTransitionTag = ''\n): void {\n  NativeReanimatedModule.configureLayoutAnimation(\n    viewTag as number, // On web this function is no-op, therefore we can cast viewTag to number\n    type,\n    sharedTransitionTag,\n    makeShareableCloneRecursive(config)\n  );\n}\n\nexport function setShouldAnimateExitingForTag(\n  viewTag: number | HTMLElement,\n  shouldAnimate: boolean\n) {\n  NativeReanimatedModule.setShouldAnimateExitingForTag(\n    viewTag as number,\n    shouldAnimate\n  );\n}\n\nexport function jsiConfigureProps(\n  uiProps: string[],\n  nativeProps: string[]\n): void {\n  if (!nativeShouldBeMock()) {\n    NativeReanimatedModule.configureProps(uiProps, nativeProps);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}