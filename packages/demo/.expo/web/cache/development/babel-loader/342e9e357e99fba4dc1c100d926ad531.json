{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { forwardRef, useContext, useState } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Box } from \"./Box\";\nimport { iconSizeToNumber } from \"./Common\";\nimport { Icon } from \"./Icon\";\nimport { Modal } from \"./Modal\";\nimport { Text } from \"./Text\";\nimport { ThemeContext } from \"./Theme\";\nimport { Tooltip } from \"./Tooltip\";\nimport { Unifier } from \"./Unifier\";\nexport var IconButton = forwardRef(function (_ref, ref) {\n  var prefix = _ref.prefix,\n    icon = _ref.icon,\n    iconColor = _ref.iconColor,\n    onClick = _ref.onClick,\n    size = _ref.size,\n    _ref$bgColor = _ref.bgColor,\n    bgColor = _ref$bgColor === void 0 ? \"transparent\" : _ref$bgColor,\n    _ref$withConfirmation = _ref.withConfirmation,\n    withConfirmation = _ref$withConfirmation === void 0 ? false : _ref$withConfirmation,\n    _ref$confirmationText = _ref.confirmationText,\n    confirmationText = _ref$confirmationText === void 0 ? \"Are you sure you want to continue?\" : _ref$confirmationText,\n    _ref$confirmationHead = _ref.confirmationHeading,\n    confirmationHeading = _ref$confirmationHead === void 0 ? \"Confirm\" : _ref$confirmationHead,\n    tooltip = _ref.tooltip,\n    indicator = _ref.indicator,\n    indicatorNumber = _ref.indicatorNumber,\n    _ref$indicatorStyle = _ref.indicatorStyle,\n    indicatorStyle = _ref$indicatorStyle === void 0 ? {\n      position: \"bottomRight\",\n      color: \"primary\"\n    } : _ref$indicatorStyle,\n    testID = _ref.testID;\n  var _useContext = useContext(ThemeContext),\n    theme = _useContext.theme;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showConfirmation = _useState2[0],\n    setShowConfirmation = _useState2[1];\n  var opacity = 1;\n  var color;\n  if (bgColor === \"transparentDarkGray\") {\n    color = \"rgba(0, 0, 0, 0.5)\";\n  } else if (bgColor === \"transparent\" || !bgColor) {\n    color = \"rgba(0, 0, 0, 0.0)\";\n  } else {\n    color = theme[bgColor];\n  }\n  var IndicatorPosition = {\n    bottomRight: {\n      bottom: \"20%\",\n      right: \"20%\"\n    },\n    bottomLeft: {\n      bottom: \"20%\",\n      left: \"20%\"\n    },\n    topRight: {\n      top: \"20%\",\n      right: \"20%\"\n    },\n    topLeft: {\n      top: \"20%\",\n      left: \"20%\"\n    }\n  };\n  var indicatorPosition = Object.assign({\n    position: \"absolute\"\n  }, IndicatorPosition[indicatorStyle.position]);\n  var IndicatorNumPosition = {\n    bottomRight: {\n      bottom: \"18%\",\n      right: \"12%\"\n    },\n    bottomLeft: {\n      bottom: \"10%\",\n      left: \"10%\"\n    },\n    topRight: {\n      top: \"-5%\",\n      right: \"-5%\"\n    },\n    topLeft: {\n      top: \"10%\",\n      left: \"10%\"\n    }\n  };\n  var numberIndicatorProps = Object.assign({\n    position: \"absolute\"\n  }, IndicatorNumPosition[indicatorStyle.position]);\n  function renderIndicator() {\n    if (indicator && indicatorNumber && indicatorNumber > 0) {\n      return React.createElement(View, {\n        style: numberIndicatorProps\n      }, React.createElement(Box, {\n        alignItems: \"center\",\n        color: indicatorStyle.color,\n        dangerouslySetInlineStyle: {\n          __style: {\n            padding: indicatorNumber && indicatorNumber > 9 ? 2 : 0\n          }\n        },\n        justifyContent: \"center\",\n        minHeight: 15,\n        minWidth: 15,\n        rounding: \"pill\"\n      }, React.createElement(Text, {\n        color: \"white\",\n        size: \"sm\",\n        weight: \"bold\"\n      }, indicatorNumber)));\n    } else if (indicator) {\n      return React.createElement(View, {\n        style: indicatorPosition\n      }, React.createElement(Icon, {\n        color: indicatorStyle.color,\n        name: \"circle\",\n        prefix: prefix || \"fas\",\n        size: \"sm\"\n      }));\n    } else {\n      return null;\n    }\n  }\n  var renderConfirmation = function renderConfirmation() {\n    return React.createElement(Modal, {\n      heading: confirmationHeading,\n      primaryButtonOnClick: function primaryButtonOnClick() {\n        onClick();\n        setShowConfirmation(false);\n      },\n      primaryButtonText: \"Confirm\",\n      secondaryButtonOnClick: function secondaryButtonOnClick() {\n        return setShowConfirmation(false);\n      },\n      secondaryButtonText: \"Cancel\",\n      size: \"sm\",\n      visible: showConfirmation,\n      onDismiss: function onDismiss() {\n        setShowConfirmation(false);\n      }\n    }, React.createElement(Text, null, confirmationText));\n  };\n  function renderIconButton() {\n    return React.createElement(React.Fragment, null, React.createElement(Pressable, {\n      ref: ref,\n      hitSlop: {\n        top: 10,\n        left: 10,\n        bottom: 10,\n        right: 10\n      },\n      style: {\n        opacity: opacity,\n        backgroundColor: color,\n        borderRadius: 100,\n        width: iconSizeToNumber(size) * 2.5,\n        height: iconSizeToNumber(size) * 2.5,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      testID: testID,\n      onPress: function () {\n        var _onPress = _asyncToGenerator(function* () {\n          yield Unifier.utils.haptic();\n          if (withConfirmation && !showConfirmation) {\n            setShowConfirmation(true);\n          } else if (onClick) {\n            onClick();\n          }\n        });\n        function onPress() {\n          return _onPress.apply(this, arguments);\n        }\n        return onPress;\n      }()\n    }, React.createElement(Icon, {\n      color: iconColor,\n      name: icon,\n      prefix: prefix || \"fas\",\n      size: size\n    }), renderIndicator()), Boolean(withConfirmation) && renderConfirmation());\n  }\n  if (tooltip && Platform.OS === \"web\") {\n    return React.createElement(Tooltip, {\n      idealDirection: tooltip.idealDirection,\n      text: tooltip.text\n    }, renderIconButton());\n  } else {\n    return renderIconButton();\n  }\n});","map":{"version":3,"sources":["../src/IconButton.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { forwardRef, useContext, useState } from \"react\";\nimport { Platform, Pressable, View } from \"react-native\";\nimport { Box } from \"./Box\";\nimport { iconSizeToNumber } from \"./Common\";\nimport { Icon } from \"./Icon\";\nimport { Modal } from \"./Modal\";\nimport { Text } from \"./Text\";\nimport { ThemeContext } from \"./Theme\";\nimport { Tooltip } from \"./Tooltip\";\nimport { Unifier } from \"./Unifier\";\n// eslint-disable-next-line react/display-name\nexport const IconButton = forwardRef(({ prefix, icon, iconColor, onClick, size, bgColor = \"transparent\", withConfirmation = false, confirmationText = \"Are you sure you want to continue?\", confirmationHeading = \"Confirm\", tooltip, indicator, indicatorNumber, indicatorStyle = { position: \"bottomRight\", color: \"primary\" }, testID, }, ref) => {\n    const { theme } = useContext(ThemeContext);\n    const [showConfirmation, setShowConfirmation] = useState(false);\n    const opacity = 1;\n    let color;\n    if (bgColor === \"transparentDarkGray\") {\n        color = \"rgba(0, 0, 0, 0.5)\";\n    }\n    else if (bgColor === \"transparent\" || !bgColor) {\n        color = \"rgba(0, 0, 0, 0.0)\";\n    }\n    else {\n        color = theme[bgColor];\n    }\n    const IndicatorPosition = {\n        bottomRight: { bottom: \"20%\", right: \"20%\" },\n        bottomLeft: { bottom: \"20%\", left: \"20%\" },\n        topRight: { top: \"20%\", right: \"20%\" },\n        topLeft: { top: \"20%\", left: \"20%\" },\n    };\n    const indicatorPosition = Object.assign({ position: \"absolute\" }, IndicatorPosition[indicatorStyle.position]);\n    const IndicatorNumPosition = {\n        bottomRight: { bottom: \"18%\", right: \"12%\" },\n        bottomLeft: { bottom: \"10%\", left: \"10%\" },\n        topRight: { top: \"-5%\", right: \"-5%\" },\n        topLeft: { top: \"10%\", left: \"10%\" },\n    };\n    const numberIndicatorProps = Object.assign({ position: \"absolute\" }, IndicatorNumPosition[indicatorStyle.position]);\n    function renderIndicator() {\n        if (indicator && indicatorNumber && indicatorNumber > 0) {\n            return (React.createElement(View, { style: numberIndicatorProps },\n                React.createElement(Box, { alignItems: \"center\", color: indicatorStyle.color, dangerouslySetInlineStyle: {\n                        __style: {\n                            padding: indicatorNumber && indicatorNumber > 9 ? 2 : 0,\n                        },\n                    }, justifyContent: \"center\", minHeight: 15, minWidth: 15, rounding: \"pill\" },\n                    React.createElement(Text, { color: \"white\", size: \"sm\", weight: \"bold\" }, indicatorNumber))));\n        }\n        else if (indicator) {\n            return (React.createElement(View, { style: indicatorPosition },\n                React.createElement(Icon, { color: indicatorStyle.color, name: \"circle\", prefix: prefix || \"fas\", size: \"sm\" })));\n        }\n        else {\n            return null;\n        }\n    }\n    const renderConfirmation = () => {\n        return (React.createElement(Modal, { heading: confirmationHeading, primaryButtonOnClick: () => {\n                onClick();\n                setShowConfirmation(false);\n            }, primaryButtonText: \"Confirm\", secondaryButtonOnClick: () => setShowConfirmation(false), secondaryButtonText: \"Cancel\", size: \"sm\", visible: showConfirmation, onDismiss: () => {\n                setShowConfirmation(false);\n            } },\n            React.createElement(Text, null, confirmationText)));\n    };\n    function renderIconButton() {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Pressable, { ref: ref, hitSlop: { top: 10, left: 10, bottom: 10, right: 10 }, style: {\n                    opacity,\n                    backgroundColor: color,\n                    borderRadius: 100,\n                    // paddingBottom: iconSizeToNumber(size) / 4,\n                    // paddingTop: iconSizeToNumber(size) / 4,\n                    // paddingLeft: iconSizeToNumber(size) / 2,\n                    // paddingRight: iconSizeToNumber(size) / 2,\n                    width: iconSizeToNumber(size) * 2.5,\n                    height: iconSizeToNumber(size) * 2.5,\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }, testID: testID, onPress: async () => {\n                    await Unifier.utils.haptic();\n                    if (withConfirmation && !showConfirmation) {\n                        setShowConfirmation(true);\n                    }\n                    else if (onClick) {\n                        onClick();\n                    }\n                } },\n                React.createElement(Icon, { color: iconColor, name: icon, prefix: prefix || \"fas\", size: size }),\n                renderIndicator()),\n            Boolean(withConfirmation) && renderConfirmation()));\n    }\n    // Only add for web. This doesn't make much sense for mobile,\n    // since the action would be performed for the button as well as the tooltip appearing. TODO:\n    // Add tooltip info button next to the icon button on mobile.\n    if (tooltip && Platform.OS === \"web\") {\n        return (React.createElement(Tooltip, { idealDirection: tooltip.idealDirection, text: tooltip.text }, renderIconButton()));\n    }\n    else {\n        return renderIconButton();\n    }\n});\n//# sourceMappingURL=IconButton.js.map"]},"metadata":{},"sourceType":"module"}