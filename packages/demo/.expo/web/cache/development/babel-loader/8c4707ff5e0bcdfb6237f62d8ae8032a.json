{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ToastContext from \"./context\";\nimport Toast from \"../toast-container\";\nexport var GlobalToast;\nvar ToastProvider = function ToastProvider(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var toastRef = useRef(null);\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    refState = _useState2[0],\n    setRefState = _useState2[1];\n  useEffect(function () {\n    setRefState(toastRef.current);\n    GlobalToast = toastRef.current;\n  }, []);\n  return React.createElement(ToastContext.Provider, {\n    value: refState\n  }, children, React.createElement(Toast, _extends({\n    ref: toastRef\n  }, props)));\n};\nexport default ToastProvider;","map":{"version":3,"sources":["provider.tsx"],"names":["React","useEffect","useRef","useState","ToastContext","Toast","GlobalToast","ToastProvider","children","props","toastRef","refState","setRefState","current"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,YAAP,MAAwC,WAAxC;AACA,OAAOC,KAAP,MAA6B,oBAA7B;AAMA,OAAO,IAAIC,WAAJ;AAEP,IAAMC,aAAoC,GAAG,SAAvCA,aAAoC,CAAA,IAAA,EAA+B;EAAA,IAAzBC,QAAF,GAAA,IAAA,CAAEA,QAAF;IAAeC,KAAAA,GAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,SAAAA;EAC3D,IAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;EACA,IAAA,SAAA,GAAgCC,QAAQ,CAAC,CAAA,CAAD,CAAxC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAAOQ,QAAD,GAAA,UAAA;IAAWC,WAAX,GAAA,UAAA;EAENX,SAAS,CAAC,YAAM;IACdW,WAAW,CAACF,QAAQ,CAACG,OAAV,CAAXD;IACAN,WAAW,GAAGI,QAAQ,CAACG,OAAvBP;EACD,CAHQ,EAGN,EAHM,CAATL;EAKA,OACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAc,QAAd,EAAA;IAAuB,KAAK,EAAEU;EAA9B,CAAA,EACGH,QADH,EAEE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA,QAAA,CAAA;IAAO,GAAG,EAAEE;EAAZ,CAAA,EAA0BD,KAA1B,CAAA,CAFF,CADF;AAMD,CAfD;AAiBA,eAAeF,aAAf","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport ToastContext, { ToastType } from \"./context\";\r\nimport Toast, { Props } from \"../toast-container\";\r\n\r\ntype PropsWithChildren = Props & {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport let GlobalToast: ToastType\r\n\r\nconst ToastProvider: FC<PropsWithChildren> = ({ children, ...props }) => {\r\n  const toastRef = useRef(null);\r\n  const [refState, setRefState] = useState({});\r\n\r\n  useEffect(() => {\r\n    setRefState(toastRef.current as any);\r\n    GlobalToast = toastRef.current as any\r\n  }, []);\r\n\r\n  return (\r\n    <ToastContext.Provider value={refState as any}>\r\n      {children}\r\n      <Toast ref={toastRef} {...props} />\r\n    </ToastContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ToastProvider;\r\n"]},"metadata":{},"sourceType":"module"}