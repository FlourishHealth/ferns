{"ast":null,"code":"import { CodedError } from 'expo-modules-core';\nimport { getContext } from '../utils/getContext.web';\nexport default (function (canvas, options) {\n  var _options$backgroundCo = options.backgroundColor,\n    backgroundColor = _options$backgroundCo === void 0 ? null : _options$backgroundCo,\n    _options$originX = options.originX,\n    originX = _options$originX === void 0 ? 0 : _options$originX,\n    _options$originY = options.originY,\n    originY = _options$originY === void 0 ? 0 : _options$originY,\n    _options$width = options.width,\n    width = _options$width === void 0 ? 0 : _options$width,\n    _options$height = options.height,\n    height = _options$height === void 0 ? 0 : _options$height;\n  if (width === 0 || height === 0) {\n    throw new CodedError('ERR_IMAGE_MANIPULATOR_EXTENT', 'Extent size must be greater than 0: ' + JSON.stringify(options, null, 2));\n  }\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var sx = originX < 0 ? 0 : originX;\n  var sy = originY < 0 ? 0 : originY;\n  var sw = originX < 0 ? Math.min(canvas.width, width + originX) : Math.min(canvas.width - originX, width);\n  var sh = originY < 0 ? Math.min(canvas.height, height + originY) : Math.min(canvas.height - originY, height);\n  var dx = originX < 0 ? -originX : 0;\n  var dy = originY < 0 ? -originY : 0;\n  var context = getContext(result);\n  if (backgroundColor != null) {\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, width, height);\n  }\n  context.drawImage(canvas, sx, sy, sw, sh, dx, dy, sw, sh);\n  return result;\n});","map":{"version":3,"sources":["../../src/actions/ExtentAction.web.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,mBAAmB;AAG9C,SAAS,UAAU,QAAQ,yBAAyB;AAEpD,gBAAe,UAAC,MAAyB,EAAE,OAA+B,EAAI;EAE5E,IAAA,qBAAA,GAAoF,OAAO,CAAnF,eAAe;IAAf,eAAe,GAAA,qBAAA,cAAG,IAAI,GAAA,qBAAA;IAAA,gBAAA,GAAsD,OAAO,CAA3D,OAAO;IAAP,OAAO,GAAA,gBAAA,cAAG,CAAC,GAAA,gBAAA;IAAA,gBAAA,GAAyC,OAAO,CAA9C,OAAO;IAAP,OAAO,GAAA,gBAAA,cAAG,CAAC,GAAA,gBAAA;IAAA,cAAA,GAA4B,OAAO,CAAjC,KAAK;IAAL,KAAK,GAAA,cAAA,cAAG,CAAC,GAAA,cAAA;IAAA,eAAA,GAAiB,OAAO,CAAtB,MAAM;IAAN,MAAM,GAAA,eAAA,cAAG,CAAC,GAAA,eAAA;EAE/E,IAAI,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAM,IAAI,UAAU,CAClB,8BAA8B,EAC9B,sCAAsC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAC1E;EACF;EAED,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;EAC/C,MAAM,CAAC,KAAK,GAAG,KAAK;EACpB,MAAM,CAAC,MAAM,GAAG,MAAM;EAEtB,IAAM,EAAE,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO;EACpC,IAAM,EAAE,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO;EACpC,IAAM,EAAE,GACN,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,OAAO,EAAE,KAAK,CAAC;EACjG,IAAM,EAAE,GACN,OAAO,GAAG,CAAC,GACP,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,GACzC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,OAAO,EAAE,MAAM,CAAC;EAE/C,IAAM,EAAE,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC;EACrC,IAAM,EAAE,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC;EAErC,IAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC;EAElC,IAAI,eAAe,IAAI,IAAI,EAAE;IAC3B,OAAO,CAAC,SAAS,GAAG,eAAe;IACnC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;EACtC;EAED,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAEzD,OAAO,MAAM;AACf,CAAC","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionExtent } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionExtent['extent']) => {\n  // ensure values are defined.\n  const { backgroundColor = null, originX = 0, originY = 0, width = 0, height = 0 } = options;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_EXTENT',\n      'Extent size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const sx = originX < 0 ? 0 : originX;\n  const sy = originY < 0 ? 0 : originY;\n  const sw =\n    originX < 0 ? Math.min(canvas.width, width + originX) : Math.min(canvas.width - originX, width);\n  const sh =\n    originY < 0\n      ? Math.min(canvas.height, height + originY)\n      : Math.min(canvas.height - originY, height);\n\n  const dx = originX < 0 ? -originX : 0;\n  const dy = originY < 0 ? -originY : 0;\n\n  const context = getContext(result);\n\n  if (backgroundColor != null) {\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, width, height);\n  }\n\n  context.drawImage(canvas, sx, sy, sw, sh, dx, dy, sw, sh);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}