{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StringFormat } from \"../Clipboard.types\";\nimport { ClipboardUnavailableException, CopyFailureException, NoPermissionException, PasteFailureException } from \"./Exceptions\";\nimport { base64toBlob, blobToBase64Async, findHtmlInClipboardAsync, findImageInClipboardAsync, getImageSizeFromBlobAsync, htmlToPlainText, isClipboardPermissionDeniedAsync } from \"./Utils\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n  getStringAsync: function () {\n    var _getStringAsync = _asyncToGenerator(function* (options) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n      try {\n        switch (options.preferredFormat) {\n          case StringFormat.HTML:\n            {\n              var clipboardItems = yield navigator.clipboard.read();\n              var blob = yield findHtmlInClipboardAsync(clipboardItems);\n              if (!blob) {\n                return yield navigator.clipboard.readText();\n              }\n              return yield new Response(blob).text();\n            }\n          default:\n            {\n              var text = yield navigator.clipboard.readText();\n              if (!text || text === '') {\n                var _clipboardItems = yield navigator.clipboard.read();\n                var _blob = yield findHtmlInClipboardAsync(_clipboardItems);\n                var blobText = yield _blob == null ? void 0 : _blob.text();\n                text = htmlToPlainText(blobText != null ? blobText : '');\n              }\n              return text;\n            }\n        }\n      } catch (e) {\n        if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n          throw new NoPermissionException();\n        }\n        try {\n          return window.clipboardData.getData('Text');\n        } catch (_unused) {\n          return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n        }\n      }\n    });\n    function getStringAsync(_x) {\n      return _getStringAsync.apply(this, arguments);\n    }\n    return getStringAsync;\n  }(),\n  setString: function setString(text) {\n    var textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch (_unused2) {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  setStringAsync: function () {\n    var _setStringAsync = _asyncToGenerator(function* (text, options) {\n      switch (options.inputFormat) {\n        case StringFormat.HTML:\n          {\n            if (!navigator.clipboard) {\n              throw new ClipboardUnavailableException();\n            }\n            try {\n              var clipboardItemInput = createHtmlClipboardItem(text);\n              yield navigator.clipboard.write([clipboardItemInput]);\n              return true;\n            } catch (e) {\n              if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n                throw new NoPermissionException();\n              }\n              throw new CopyFailureException(e.message);\n            }\n          }\n        default:\n          {\n            try {\n              if (!navigator.clipboard) {\n                throw new Error();\n              }\n              yield navigator.clipboard.writeText(text);\n              return true;\n            } catch (_unused3) {\n              return this.setString(text);\n            }\n          }\n      }\n    });\n    function setStringAsync(_x2, _x3) {\n      return _setStringAsync.apply(this, arguments);\n    }\n    return setStringAsync;\n  }(),\n  hasStringAsync: function () {\n    var _hasStringAsync = _asyncToGenerator(function* () {\n      return yield clipboardHasTypesAsync(['text/plain', 'text/html']);\n    });\n    function hasStringAsync() {\n      return _hasStringAsync.apply(this, arguments);\n    }\n    return hasStringAsync;\n  }(),\n  getImageAsync: function () {\n    var _getImageAsync = _asyncToGenerator(function* (_options) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n      try {\n        var clipboardItems = yield navigator.clipboard.read();\n        var blob = yield findImageInClipboardAsync(clipboardItems);\n        if (!blob) {\n          return null;\n        }\n        var _yield$Promise$all = yield Promise.all([blobToBase64Async(blob), getImageSizeFromBlobAsync(blob)]),\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n          data = _yield$Promise$all2[0],\n          size = _yield$Promise$all2[1];\n        return {\n          data: data,\n          size: size\n        };\n      } catch (e) {\n        if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n          throw new NoPermissionException();\n        }\n        throw new PasteFailureException(e.message);\n      }\n    });\n    function getImageAsync(_x4) {\n      return _getImageAsync.apply(this, arguments);\n    }\n    return getImageAsync;\n  }(),\n  setImageAsync: function () {\n    var _setImageAsync = _asyncToGenerator(function* (base64image) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n      try {\n        var blob = base64toBlob(base64image, 'image/png');\n        yield navigator.clipboard.write([new ClipboardItem(_defineProperty({}, blob.type, blob))]);\n      } catch (err) {\n        throw new CopyFailureException(err.message);\n      }\n    });\n    function setImageAsync(_x5) {\n      return _setImageAsync.apply(this, arguments);\n    }\n    return setImageAsync;\n  }(),\n  hasImageAsync: function () {\n    var _hasImageAsync = _asyncToGenerator(function* () {\n      return yield clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n    });\n    function hasImageAsync() {\n      return _hasImageAsync.apply(this, arguments);\n    }\n    return hasImageAsync;\n  }(),\n  addClipboardListener: function addClipboardListener() {},\n  removeClipboardListener: function removeClipboardListener() {}\n};\nfunction clipboardHasTypesAsync(_x6) {\n  return _clipboardHasTypesAsync.apply(this, arguments);\n}\nfunction _clipboardHasTypesAsync() {\n  _clipboardHasTypesAsync = _asyncToGenerator(function* (types) {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n    try {\n      var clipboardItems = yield navigator.clipboard.read();\n      return clipboardItems.flatMap(function (item) {\n        return item.types;\n      }).some(function (type) {\n        return types.includes(type);\n      });\n    } catch (e) {\n      if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw e;\n    }\n  });\n  return _clipboardHasTypesAsync.apply(this, arguments);\n}\nfunction createHtmlClipboardItem(htmlString) {\n  return new ClipboardItem({\n    'text/html': new Blob([htmlString], {\n      type: 'text/html'\n    }),\n    'text/plain': new Blob([htmlToPlainText(htmlString)], {\n      type: 'text/plain'\n    })\n  });\n}","map":{"version":3,"sources":["../../src/web/ClipboardModule.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\nimport {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default: {\n        try {\n          if (!navigator.clipboard) {\n            throw new Error();\n          }\n          await navigator.clipboard.writeText(text);\n          return true;\n        } catch {\n          // we can fall back to legacy behavior in any kind of failure\n          // including navigator.clipboard unavailability\n          return this.setString(text);\n        }\n      }\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          [blob.type]: blob,\n        }),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}