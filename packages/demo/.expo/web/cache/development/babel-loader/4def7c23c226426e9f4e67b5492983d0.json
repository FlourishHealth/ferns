{"ast":null,"code":"import bytesToUuid from './bytesToUuid';\nfunction uuidToBytes(uuid) {\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n    return '';\n  });\n  return bytes;\n}\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str));\n  var bytes = new Array(str.length);\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\nexport default function (name, version, hashfunc) {\n  var generateUUID = function generateUUID(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n    if (typeof value == 'string') value = stringToBytes(value);\n    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n    return bytesToUuid(bytes);\n  };\n  try {\n    generateUUID.name = name;\n  } catch (_unused) {}\n  generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n  generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n  return generateUUID;\n}","map":{"version":3,"sources":["../../../src/uuid/lib/v35.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,eAAe;AAEvC,SAAS,WAAW,CAAC,IAAY,EAAA;EAE/B,IAAM,KAAK,GAAa,EAAE;EAC1B,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAC,GAAW,EAAI;IAC9C,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAC7B,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,OAAO,KAAK;AACd;AAEA,SAAS,aAAa,CAAC,GAAW,EAAA;EAChC,GAAG,GAAG,QAAQ,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;EACvC,IAAM,KAAK,GAAa,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC;EAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;EAC7B;EACD,OAAO,KAAK;AACd;AAEA,eAAc,UACZ,IAAY,EACZ,OAAe,EACf,QAAgD,EAAA;EAEhD,IAAM,YAAY,GAAG,SAAf,YAAY,CAChB,KAAwB,EACxB,SAA4B,EAC5B,GAAc,EACd,MAAe,EAAA;IAEf,IAAM,GAAG,GAAI,GAAG,IAAI,MAAM,IAAK,CAAC;IAEhC,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;IAC1D,IAAI,OAAO,SAAS,IAAI,QAAQ,EAAE,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAEpE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,SAAS,CAAC,iCAAiC,CAAC;IAC7E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,MAAM,KAAK,EAAE,EACtD,MAAM,SAAS,CAAC,6DAA6D,CAAC;IAGhF,IAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/C,KAAK,CAAC,CAAC,CAAC,GAAI,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,OAAO;IACtC,KAAK,CAAC,CAAC,CAAC,GAAI,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,IAAI;IAEnC,IAAI,GAAG,EAAE;MACP,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE;QACjC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;MAC5B;IACF;IAED,OAAO,WAAW,CAAC,KAAK,CAAC;EAC3B,CAAC;EAGD,IAAI;IACF,YAAY,CAAC,IAAI,GAAG,IAAI;GACzB,CAAC,OAAA,OAAA,EAAM,CAAA;EAGR,YAAY,CAAC,GAAG,GAAG,sCAAsC;EACzD,YAAY,CAAC,GAAG,GAAG,sCAAsC;EAEzD,OAAO,YAAY;AACrB","sourcesContent":["import bytesToUuid from './bytesToUuid';\n\nfunction uuidToBytes(uuid: string) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes: number[] = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, (hex: string) => {\n    bytes.push(parseInt(hex, 16));\n    return '';\n  });\n\n  return bytes;\n}\n\nfunction stringToBytes(str: string) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n  const bytes: number[] = new Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport default function (\n  name: string,\n  version: number,\n  hashfunc: (bytes: number[] | string) => number[]\n) {\n  const generateUUID = function (\n    value: number[] | string,\n    namespace: number[] | string,\n    buf?: number[],\n    offset?: number\n  ): string {\n    const off = (buf && offset) || 0;\n\n    if (typeof value == 'string') value = stringToBytes(value);\n    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16)\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n\n    // Per 4.3\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return bytesToUuid(bytes);\n  };\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch {}\n\n  // Pre-defined namespaces, per Appendix C\n  generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n  generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n\n  return generateUUID;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}