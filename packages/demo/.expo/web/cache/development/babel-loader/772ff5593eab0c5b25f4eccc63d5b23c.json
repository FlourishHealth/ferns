{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from \"react\";\nimport { Box } from \"./Box\";\nimport { Text } from \"./Text\";\nexport var SegmentedControl = function SegmentedControl(_ref) {\n  var items = _ref.items,\n    _ref$onChange = _ref.onChange,\n    onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n    _ref$selectedItemInde = _ref.selectedItemIndexes,\n    selectedItemIndexes = _ref$selectedItemInde === void 0 ? undefined : _ref$selectedItemInde,\n    _ref$selectedItemInde2 = _ref.selectedItemIndex,\n    selectedItemIndex = _ref$selectedItemInde2 === void 0 ? undefined : _ref$selectedItemInde2,\n    _ref$multiselect = _ref.multiselect,\n    multiselect = _ref$multiselect === void 0 ? false : _ref$multiselect,\n    _ref$selectLimit = _ref.selectLimit,\n    selectLimit = _ref$selectLimit === void 0 ? 1 : _ref$selectLimit;\n  var renderItem = function renderItem(item) {\n    return React.createElement(Text, {\n      align: \"center\",\n      weight: \"bold\"\n    }, item);\n  };\n  if (selectedItemIndex === undefined && selectedItemIndexes === undefined) {\n    console.warn(\"One of the following must be defined: selectedItemIndex, selectedItemIndexes\");\n    return null;\n  }\n  if (!multiselect && (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) && (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) > 1) {\n    console.warn(\"Multiple selections not allowed without multiselect flag\");\n    return null;\n  }\n  if ((selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) && (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) > selectLimit) {\n    console.warn(\"The number of selected items exceeds the limit\");\n    return null;\n  }\n  var isTabActive = function isTabActive(index) {\n    return selectedItemIndex === index || (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.includes(index)) ? \"white\" : \"lightGray\";\n  };\n  return React.createElement(Box, {\n    color: \"lightGray\",\n    direction: \"row\",\n    display: \"flex\",\n    height: 40,\n    justifyContent: \"between\",\n    rounding: 3,\n    width: \"100%\"\n  }, items.map(function (item, index) {\n    return React.createElement(Box, {\n      key: index,\n      color: isTabActive(index),\n      height: \"100%\",\n      rounding: 3,\n      width: `${100 / items.length}%`\n    }, React.createElement(Box, {\n      alignItems: \"center\",\n      display: \"flex\",\n      height: \"100%\",\n      justifyContent: \"center\",\n      paddingX: 1,\n      width: \"100%\",\n      onClick: function onClick() {\n        if ((selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) === selectLimit && !(selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.includes(index))) {\n          return;\n        }\n        if (multiselect) {\n          if (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.includes(index)) {\n            onChange({\n              activeIndex: selectedItemIndexes.filter(function (i) {\n                return i !== index;\n              })\n            });\n          } else {\n            var currentIndexes = _toConsumableArray(selectedItemIndexes);\n            currentIndexes === null || currentIndexes === void 0 ? void 0 : currentIndexes.push(index);\n            onChange({\n              activeIndex: currentIndexes === null || currentIndexes === void 0 ? void 0 : currentIndexes.sort()\n            });\n          }\n        } else {\n          onChange({\n            activeIndex: index\n          });\n        }\n      }\n    }, renderItem(item)));\n  }));\n};","map":{"version":3,"sources":["../src/SegmentedControl.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { Box } from \"./Box\";\nimport { Text } from \"./Text\";\nexport const SegmentedControl = ({ items, onChange = () => { }, selectedItemIndexes = undefined, selectedItemIndex = undefined, multiselect = false, selectLimit = 1, }) => {\n    const renderItem = (item) => {\n        return (React.createElement(Text, { align: \"center\", weight: \"bold\" }, item));\n        // if (typeof item === \"string\") {\n        //   return <Text weight=\"bold\">{item}</Text>;\n        // } else {\n        //   return item;\n        // }\n    };\n    if (selectedItemIndex === undefined && selectedItemIndexes === undefined) {\n        console.warn(\"One of the following must be defined: selectedItemIndex, selectedItemIndexes\");\n        return null;\n    }\n    if (!multiselect && (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) && (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) > 1) {\n        console.warn(\"Multiple selections not allowed without multiselect flag\");\n        return null;\n    }\n    if ((selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) && (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) > selectLimit) {\n        console.warn(\"The number of selected items exceeds the limit\");\n        return null;\n    }\n    const isTabActive = (index) => {\n        return selectedItemIndex === index || (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.includes(index))\n            ? \"white\"\n            : \"lightGray\";\n    };\n    return (React.createElement(Box, { color: \"lightGray\", direction: \"row\", display: \"flex\", height: 40, justifyContent: \"between\", \n        // padding={1}\n        rounding: 3, width: \"100%\" }, items.map((item, index) => (React.createElement(Box, { key: index, color: isTabActive(index), height: \"100%\", \n        // paddingX={2}\n        rounding: 3, width: `${100 / items.length}%` },\n        React.createElement(Box, { alignItems: \"center\", display: \"flex\", height: \"100%\", justifyContent: \"center\", paddingX: 1, width: \"100%\", onClick: () => {\n                if ((selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.length) === selectLimit &&\n                    !(selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.includes(index))) {\n                    return;\n                }\n                if (multiselect) {\n                    if (selectedItemIndexes === null || selectedItemIndexes === void 0 ? void 0 : selectedItemIndexes.includes(index)) {\n                        onChange({ activeIndex: selectedItemIndexes.filter((i) => i !== index) });\n                    }\n                    else {\n                        const currentIndexes = [...selectedItemIndexes];\n                        currentIndexes === null || currentIndexes === void 0 ? void 0 : currentIndexes.push(index);\n                        onChange({ activeIndex: currentIndexes === null || currentIndexes === void 0 ? void 0 : currentIndexes.sort() });\n                    }\n                }\n                else {\n                    onChange({ activeIndex: index });\n                }\n            } }, renderItem(item)))))));\n};\n//# sourceMappingURL=SegmentedControl.js.map"]},"metadata":{},"sourceType":"module"}