{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { NativeReanimated } from \"../NativeReanimated/NativeReanimated\";\nimport { SensorType } from \"../commonTypes\";\nvar JSReanimated = function (_NativeReanimated) {\n  _inherits(JSReanimated, _NativeReanimated);\n  var _super = _createSuper(JSReanimated);\n  function JSReanimated() {\n    var _this;\n    _classCallCheck(this, JSReanimated);\n    _this = _super.call(this, false);\n    _defineProperty(_assertThisInitialized(_this), \"nextSensorId\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"sensors\", new Map());\n    return _this;\n  }\n  _createClass(JSReanimated, [{\n    key: \"makeShareableClone\",\n    value: function makeShareableClone(value) {\n      return {\n        __hostObjectShareableJSRef: value\n      };\n    }\n  }, {\n    key: \"installCoreFunctions\",\n    value: function installCoreFunctions(_callGuard, _valueUnpacker) {}\n  }, {\n    key: \"scheduleOnUI\",\n    value: function scheduleOnUI(worklet) {\n      requestAnimationFrame(worklet);\n    }\n  }, {\n    key: \"registerEventHandler\",\n    value: function registerEventHandler(_eventHash, _eventHandler) {\n      return '';\n    }\n  }, {\n    key: \"unregisterEventHandler\",\n    value: function unregisterEventHandler(_) {}\n  }, {\n    key: \"enableLayoutAnimations\",\n    value: function enableLayoutAnimations() {\n      console.warn('[Reanimated] Layout Animations are not supported on web yet.');\n    }\n  }, {\n    key: \"configureLayoutAnimation\",\n    value: function configureLayoutAnimation() {}\n  }, {\n    key: \"registerSensor\",\n    value: function registerSensor(sensorType, interval, iosReferenceFrame, eventHandler) {\n      if (!(this.getSensorName(sensorType) in window)) {\n        return -1;\n      }\n      var sensor = this.initializeSensor(sensorType, interval);\n      var callback;\n      if (sensorType === SensorType.ROTATION) {\n        callback = function callback() {\n          var _sensor$quaternion = _slicedToArray(sensor.quaternion, 4),\n            qw = _sensor$quaternion[0],\n            qx = _sensor$quaternion[1],\n            qy = _sensor$quaternion[2],\n            qz = _sensor$quaternion[3];\n          var yaw = Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);\n          var pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          var roll = Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);\n          eventHandler({\n            qw: qw,\n            qx: qx,\n            qy: qy,\n            qz: qz,\n            yaw: yaw,\n            pitch: pitch,\n            roll: roll,\n            interfaceOrientation: 0\n          });\n        };\n      } else {\n        callback = function callback() {\n          var x = sensor.x,\n            y = sensor.y,\n            z = sensor.z;\n          eventHandler({\n            x: x,\n            y: y,\n            z: z,\n            interfaceOrientation: 0\n          });\n        };\n      }\n      sensor.addEventListener('reading', callback);\n      sensor.start();\n      this.sensors.set(this.nextSensorId, sensor);\n      return this.nextSensorId++;\n    }\n  }, {\n    key: \"unregisterSensor\",\n    value: function unregisterSensor(id) {\n      var sensor = this.sensors.get(id);\n      if (sensor !== undefined) {\n        sensor.stop();\n        this.sensors.delete(id);\n      }\n    }\n  }, {\n    key: \"subscribeForKeyboardEvents\",\n    value: function subscribeForKeyboardEvents(_) {\n      console.warn('[Reanimated] useAnimatedKeyboard is not available on web yet.');\n      return -1;\n    }\n  }, {\n    key: \"unsubscribeFromKeyboardEvents\",\n    value: function unsubscribeFromKeyboardEvents(_) {}\n  }, {\n    key: \"initializeSensor\",\n    value: function initializeSensor(sensorType, interval) {\n      var config = interval <= 0 ? {\n        referenceFrame: 'device'\n      } : {\n        frequency: 1000 / interval\n      };\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n          return new window.Accelerometer(config);\n        case SensorType.GYROSCOPE:\n          return new window.Gyroscope(config);\n        case SensorType.GRAVITY:\n          return new window.GravitySensor(config);\n        case SensorType.MAGNETIC_FIELD:\n          return new window.Magnetometer(config);\n        case SensorType.ROTATION:\n          return new window.AbsoluteOrientationSensor(config);\n      }\n    }\n  }, {\n    key: \"getSensorName\",\n    value: function getSensorName(sensorType) {\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n          return 'Accelerometer';\n        case SensorType.GRAVITY:\n          return 'GravitySensor';\n        case SensorType.GYROSCOPE:\n          return 'Gyroscope';\n        case SensorType.MAGNETIC_FIELD:\n          return 'Magnetometer';\n        case SensorType.ROTATION:\n          return 'AbsoluteOrientationSensor';\n      }\n    }\n  }]);\n  return JSReanimated;\n}(NativeReanimated);\nexport { JSReanimated as default };","map":{"version":3,"sources":["JSReanimated.ts"],"names":["NativeReanimated","SensorType","JSReanimated","_defineProperty","Map","constructor","makeShareableClone","value","__hostObjectShareableJSRef","installCoreFunctions","_callGuard","_valueUnpacker","scheduleOnUI","worklet","requestAnimationFrame","registerEventHandler","_eventHash","_eventHandler","unregisterEventHandler","_","enableLayoutAnimations","console","warn","configureLayoutAnimation","registerSensor","sensorType","interval","iosReferenceFrame","eventHandler","getSensorName","window","sensor","initializeSensor","callback","ROTATION","qw","qx","qy","qz","quaternion","yaw","Math","atan2","pitch","sin","roll","interfaceOrientation","x","y","z","addEventListener","start","sensors","set","nextSensorId","unregisterSensor","id","get","undefined","stop","delete","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","config","referenceFrame","frequency","ACCELEROMETER","Accelerometer","GYROSCOPE","Gyroscope","GRAVITY","GravitySensor","MAGNETIC_FIELD","Magnetometer","AbsoluteOrientationSensor"],"mappings":"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","sourcesContent":["import { NativeReanimated } from '../NativeReanimated/NativeReanimated';\nimport {\n  SensorType,\n  ShareableRef,\n  Value3D,\n  ValueRotation,\n} from '../commonTypes';\nimport { WebSensor } from './WebSensor';\n\nexport default class JSReanimated extends NativeReanimated {\n  nextSensorId = 0;\n  sensors = new Map<number, WebSensor>();\n\n  constructor() {\n    super(false);\n  }\n\n  makeShareableClone<T>(value: T): ShareableRef<T> {\n    return { __hostObjectShareableJSRef: value };\n  }\n\n  installCoreFunctions(\n    _callGuard: <T extends Array<any>, U>(\n      fn: (...args: T) => U,\n      ...args: T\n    ) => void,\n    _valueUnpacker: <T>(value: T) => T\n  ): void {\n    // noop\n  }\n\n  scheduleOnUI<T>(worklet: ShareableRef<T>) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrame(worklet);\n  }\n\n  registerEventHandler<T>(\n    _eventHash: string,\n    _eventHandler: ShareableRef<T>\n  ): string {\n    // noop\n    return '';\n  }\n\n  unregisterEventHandler(_: string): void {\n    // noop\n  }\n\n  enableLayoutAnimations() {\n    console.warn(\n      '[Reanimated] Layout Animations are not supported on web yet.'\n    );\n  }\n\n  configureLayoutAnimation() {\n    // no-op\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    interval: number,\n    iosReferenceFrame: number,\n    eventHandler: (data: Value3D | ValueRotation) => void\n  ): number {\n    if (!(this.getSensorName(sensorType) in window)) {\n      return -1;\n    }\n\n    const sensor: WebSensor = this.initializeSensor(sensorType, interval);\n    let callback;\n    if (sensorType === SensorType.ROTATION) {\n      callback = () => {\n        const [qw, qx, qy, qz] = sensor.quaternion;\n\n        // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n        const yaw = Math.atan2(\n          2.0 * (qy * qz + qw * qx),\n          qw * qw - qx * qx - qy * qy + qz * qz\n        );\n        const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n        const roll = Math.atan2(\n          2.0 * (qx * qy + qw * qz),\n          qw * qw + qx * qx - qy * qy - qz * qz\n        );\n        eventHandler({\n          qw,\n          qx,\n          qy,\n          qz,\n          yaw,\n          pitch,\n          roll,\n          interfaceOrientation: 0,\n        });\n      };\n    } else {\n      callback = () => {\n        const { x, y, z } = sensor;\n        eventHandler({ x, y, z, interfaceOrientation: 0 });\n      };\n    }\n    sensor.addEventListener('reading', callback);\n    sensor.start();\n\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n\n  unregisterSensor(id: number): void {\n    const sensor: WebSensor | undefined = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n\n  subscribeForKeyboardEvents(_: ShareableRef<number>): number {\n    console.warn(\n      '[Reanimated] useAnimatedKeyboard is not available on web yet.'\n    );\n    return -1;\n  }\n\n  unsubscribeFromKeyboardEvents(_: number): void {\n    // noop\n  }\n\n  initializeSensor(sensorType: SensorType, interval: number): WebSensor {\n    const config =\n      interval <= 0\n        ? { referenceFrame: 'device' }\n        : { frequency: 1000 / interval };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n\n  getSensorName(sensorType: SensorType): string {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}