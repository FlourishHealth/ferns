{"ast":null,"code":"import React from \"react\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { Text } from \"./Text\";\nexport var CheckBox = function CheckBox(_ref) {\n  var color = _ref.color,\n    checked = _ref.checked,\n    size = _ref.size,\n    radio = _ref.radio,\n    label = _ref.label,\n    labelColor = _ref.labelColor,\n    subLabel = _ref.subLabel,\n    disabled = _ref.disabled,\n    onChange = _ref.onChange,\n    onClick = _ref.onClick,\n    indeterminate = _ref.indeterminate,\n    testID = _ref.testID;\n  if (checked && indeterminate) {\n    console.error(\"CheckBox cannot be checked and indeterminate at the same time\");\n  }\n  var doOnClick = function doOnClick() {\n    if (disabled) {\n      return;\n    }\n    if (!indeterminate) {\n      onChange({\n        value: !checked\n      });\n    }\n    onClick && onClick();\n  };\n  var renderCheckBox = function renderCheckBox() {\n    var bgColor;\n    if (disabled) {\n      bgColor = \"gray\";\n    } else if (checked) {\n      bgColor = color || \"darkGray\";\n    } else {\n      bgColor = \"white\";\n    }\n    return React.createElement(Box, {\n      border: color || \"darkGray\",\n      color: bgColor,\n      height: size === \"sm\" ? 16 : 24,\n      rounding: radio ? \"circle\" : size === \"sm\" ? 2 : 3,\n      testID: testID,\n      width: size === \"sm\" ? 16 : 24,\n      onClick: doOnClick\n    }, React.createElement(Box, {\n      alignItems: \"center\",\n      direction: \"column\",\n      display: \"flex\",\n      height: \"100%\",\n      justifyContent: \"center\",\n      width: \"100%\"\n    }, checked && React.createElement(Icon, {\n      color: \"white\",\n      name: \"check\",\n      prefix: \"fas\",\n      size: size === \"sm\" ? \"sm\" : \"md\"\n    }), indeterminate && React.createElement(Icon, {\n      color: color || \"darkGray\",\n      name: \"circle\",\n      prefix: \"fas\",\n      size: size === \"sm\" ? \"sm\" : \"md\"\n    })));\n  };\n  return React.createElement(Box, {\n    alignItems: \"center\",\n    direction: \"row\",\n    display: \"flex\",\n    maxHeight: 60,\n    paddingY: 1,\n    width: \"100%\"\n  }, React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    maxWidth: size === \"sm\" ? 14 : 20,\n    width: size === \"sm\" ? 14 : 20\n  }, renderCheckBox()), React.createElement(Box, {\n    direction: \"column\",\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    marginLeft: 4,\n    onClick: doOnClick\n  }, React.createElement(Text, {\n    color: labelColor || \"darkGray\",\n    numberOfLines: subLabel ? 1 : 2,\n    size: size,\n    weight: \"bold\"\n  }, label), Boolean(subLabel) && React.createElement(Text, {\n    color: labelColor || \"darkGray\",\n    size: \"sm\",\n    weight: \"bold\"\n  }, subLabel)));\n};","map":{"version":3,"sources":["../src/CheckBox.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { Text } from \"./Text\";\nexport const CheckBox = ({ color, checked, size, radio, label, labelColor, subLabel, disabled, onChange, onClick, indeterminate, testID, }) => {\n    if (checked && indeterminate) {\n        console.error(\"CheckBox cannot be checked and indeterminate at the same time\");\n    }\n    const doOnClick = () => {\n        if (disabled) {\n            return;\n        }\n        if (!indeterminate) {\n            onChange({ value: !checked });\n        }\n        onClick && onClick();\n    };\n    const renderCheckBox = () => {\n        let bgColor;\n        if (disabled) {\n            bgColor = \"gray\";\n        }\n        else if (checked) {\n            bgColor = color || \"darkGray\";\n        }\n        else {\n            bgColor = \"white\";\n        }\n        return (React.createElement(Box, { border: color || \"darkGray\", color: bgColor, height: size === \"sm\" ? 16 : 24, rounding: radio ? \"circle\" : size === \"sm\" ? 2 : 3, testID: testID, width: size === \"sm\" ? 16 : 24, onClick: doOnClick },\n            React.createElement(Box, { alignItems: \"center\", direction: \"column\", display: \"flex\", height: \"100%\", justifyContent: \"center\", width: \"100%\" },\n                checked && (React.createElement(Icon, { color: \"white\", name: \"check\", prefix: \"fas\", size: size === \"sm\" ? \"sm\" : \"md\" })),\n                indeterminate && (React.createElement(Icon, { color: color || \"darkGray\", name: \"circle\", prefix: \"fas\", size: size === \"sm\" ? \"sm\" : \"md\" })))));\n    };\n    return (React.createElement(Box, { alignItems: \"center\", direction: \"row\", display: \"flex\", maxHeight: 60, paddingY: 1, width: \"100%\" },\n        React.createElement(Box, { display: \"flex\", justifyContent: \"center\", maxWidth: size === \"sm\" ? 14 : 20, width: size === \"sm\" ? 14 : 20 }, renderCheckBox()),\n        React.createElement(Box, { direction: \"column\", display: \"flex\", height: \"100%\", justifyContent: \"center\", marginLeft: 4, onClick: doOnClick },\n            React.createElement(Text, { color: labelColor || \"darkGray\", numberOfLines: subLabel ? 1 : 2, size: size, weight: \"bold\" }, label),\n            Boolean(subLabel) && (React.createElement(Text, { color: labelColor || \"darkGray\", size: \"sm\", weight: \"bold\" }, subLabel)))));\n};\n//# sourceMappingURL=CheckBox.js.map"]},"metadata":{},"sourceType":"module"}