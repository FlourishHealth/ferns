{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport debounce from \"lodash/debounce\";\nimport React, { useContext, useState } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { Modal } from \"./Modal\";\nimport { Text } from \"./Text\";\nimport { ThemeContext } from \"./Theme\";\nimport { Tooltip } from \"./Tooltip\";\nimport { Unifier } from \"./Unifier\";\nvar buttonTextColor = {\n  blue: \"white\",\n  lightGray: \"darkGray\",\n  red: \"white\",\n  transparent: \"white\",\n  white: \"darkGray\",\n  primary: \"white\",\n  secondary: \"white\",\n  accent: \"white\",\n  tertiary: \"white\",\n  facebook: \"white\",\n  twitter: \"white\",\n  google: \"white\"\n};\nvar HEIGHTS = {\n  xs: 30,\n  sm: 36,\n  md: 40,\n  lg: 48\n};\nexport var Button = function Button(_ref) {\n  var alignSelf = _ref.alignSelf,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? \"solid\" : _ref$type,\n    propsLoading = _ref.loading,\n    children = _ref.children,\n    text = _ref.text,\n    _ref$inline = _ref.inline,\n    inline = _ref$inline === void 0 ? false : _ref$inline,\n    icon = _ref.icon,\n    iconPrefix = _ref.iconPrefix,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? \"md\" : _ref$size,\n    onClick = _ref.onClick,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? \"gray\" : _ref$color,\n    _ref$withConfirmation = _ref.withConfirmation,\n    withConfirmation = _ref$withConfirmation === void 0 ? false : _ref$withConfirmation,\n    _ref$confirmationText = _ref.confirmationText,\n    confirmationText = _ref$confirmationText === void 0 ? \"Are you sure you want to continue?\" : _ref$confirmationText,\n    _ref$confirmationHead = _ref.confirmationHeading,\n    confirmationHeading = _ref$confirmationHead === void 0 ? \"Confirm\" : _ref$confirmationHead,\n    _ref$shape = _ref.shape,\n    shape = _ref$shape === void 0 ? \"rounded\" : _ref$shape,\n    testID = _ref.testID,\n    tooltip = _ref.tooltip;\n  var _useState = useState(propsLoading),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showConfirmation = _useState4[0],\n    setShowConfirmation = _useState4[1];\n  var _useContext = useContext(ThemeContext),\n    theme = _useContext.theme;\n  var getBackgroundColor = function getBackgroundColor(backgroundColor) {\n    if (type === \"ghost\" || type === \"outline\") {\n      return \"transparent\";\n    } else {\n      return theme[backgroundColor];\n    }\n  };\n  var getTextColor = function getTextColor(textColor) {\n    if (type === \"ghost\" || type === \"outline\") {\n      return textColor;\n    } else if (textColor === undefined) {\n      return \"darkGray\";\n    } else {\n      return buttonTextColor[textColor] || \"white\";\n    }\n  };\n  var getBorderColor = function getBorderColor(borderColor) {\n    if (type === \"outline\") {\n      return theme[getTextColor(borderColor)];\n    } else {\n      return \"transparent\";\n    }\n  };\n  if (color === \"gray\") {\n    color = \"lightGray\";\n  }\n  var renderConfirmation = function renderConfirmation() {\n    return React.createElement(Modal, {\n      heading: confirmationHeading,\n      primaryButtonOnClick: function primaryButtonOnClick() {\n        onClick();\n        setShowConfirmation(false);\n      },\n      primaryButtonText: \"Confirm\",\n      secondaryButtonOnClick: function secondaryButtonOnClick() {\n        return setShowConfirmation(false);\n      },\n      secondaryButtonText: \"Cancel\",\n      size: \"sm\",\n      visible: showConfirmation,\n      onDismiss: function onDismiss() {\n        setShowConfirmation(false);\n      }\n    }, React.createElement(Text, null, confirmationText));\n  };\n  var renderButton = function renderButton() {\n    return React.createElement(View, {\n      style: {\n        alignSelf: inline === true ? undefined : alignSelf\n      }\n    }, React.createElement(Pressable, {\n      disabled: disabled || loading,\n      style: {\n        alignSelf: inline === true ? undefined : \"stretch\",\n        height: HEIGHTS[size || \"md\"],\n        backgroundColor: getBackgroundColor(color),\n        flexShrink: inline ? 1 : 0,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: shape === \"pill\" ? 999 : 5,\n        borderColor: getBorderColor(color),\n        borderWidth: type === \"outline\" ? 2 : 0,\n        opacity: disabled ? 0.4 : 1,\n        flexDirection: \"row\",\n        paddingHorizontal: size === \"xs\" ? 6 : size === \"sm\" ? 12 : 8 * 2\n      },\n      testID: testID,\n      onPress: debounce(_asyncToGenerator(function* () {\n        yield Unifier.utils.haptic();\n        setLoading(true);\n        try {\n          if (withConfirmation && !showConfirmation) {\n            setShowConfirmation(true);\n          } else if (onClick) {\n            yield onClick();\n          }\n        } catch (error) {\n          setLoading(false);\n          throw error;\n        }\n        setLoading(false);\n      }), 500, {\n        leading: true\n      })\n    }, icon !== undefined && React.createElement(Box, {\n      marginRight: 2\n    }, React.createElement(Icon, {\n      color: getTextColor(color),\n      name: icon,\n      prefix: iconPrefix || \"far\",\n      size: size === \"xs\" ? \"sm\" : size\n    })), Boolean(children) && children, Boolean(text) && React.createElement(Text, {\n      align: \"center\",\n      color: getTextColor(color),\n      font: \"button\",\n      inline: inline,\n      size: size === \"xs\" ? \"sm\" : size,\n      skipLinking: true,\n      weight: \"bold\"\n    }, text), Boolean(loading) && React.createElement(Box, {\n      marginLeft: 2\n    }, React.createElement(ActivityIndicator, {\n      color: getTextColor(color),\n      size: \"small\"\n    }))), Boolean(withConfirmation) && renderConfirmation());\n  };\n  if (tooltip) {\n    return React.createElement(Tooltip, {\n      idealDirection: tooltip.idealDirection,\n      text: tooltip.text\n    }, renderButton());\n  } else {\n    return renderButton();\n  }\n};","map":{"version":3,"sources":["../src/Button.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import debounce from \"lodash/debounce\";\nimport React, { useContext, useState } from \"react\";\nimport { ActivityIndicator, Pressable, View } from \"react-native\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { Modal } from \"./Modal\";\nimport { Text } from \"./Text\";\nimport { ThemeContext } from \"./Theme\";\nimport { Tooltip } from \"./Tooltip\";\nimport { Unifier } from \"./Unifier\";\nconst buttonTextColor = {\n    blue: \"white\",\n    lightGray: \"darkGray\",\n    red: \"white\",\n    transparent: \"white\",\n    white: \"darkGray\",\n    primary: \"white\",\n    secondary: \"white\",\n    accent: \"white\",\n    tertiary: \"white\",\n    facebook: \"white\",\n    twitter: \"white\",\n    google: \"white\",\n};\nconst HEIGHTS = {\n    xs: 30,\n    sm: 36,\n    md: 40,\n    lg: 48,\n};\nexport const Button = ({ alignSelf, disabled = false, type = \"solid\", loading: propsLoading, children, text, inline = false, icon, iconPrefix, size = \"md\", onClick, color = \"gray\", withConfirmation = false, confirmationText = \"Are you sure you want to continue?\", confirmationHeading = \"Confirm\", shape = \"rounded\", testID, tooltip, }) => {\n    const [loading, setLoading] = useState(propsLoading);\n    const [showConfirmation, setShowConfirmation] = useState(false);\n    const { theme } = useContext(ThemeContext);\n    const getBackgroundColor = (backgroundColor) => {\n        if (type === \"ghost\" || type === \"outline\") {\n            return \"transparent\";\n        }\n        else {\n            return theme[backgroundColor];\n        }\n    };\n    const getTextColor = (textColor) => {\n        if (type === \"ghost\" || type === \"outline\") {\n            return textColor;\n        }\n        else if (textColor === undefined) {\n            return \"darkGray\";\n        }\n        else {\n            return buttonTextColor[textColor] || \"white\";\n        }\n    };\n    const getBorderColor = (borderColor) => {\n        if (type === \"outline\") {\n            return theme[getTextColor(borderColor)];\n        }\n        else {\n            return \"transparent\";\n        }\n    };\n    if (color === \"gray\") {\n        color = \"lightGray\";\n    }\n    const renderConfirmation = () => {\n        return (React.createElement(Modal, { heading: confirmationHeading, primaryButtonOnClick: () => {\n                onClick();\n                setShowConfirmation(false);\n            }, primaryButtonText: \"Confirm\", secondaryButtonOnClick: () => setShowConfirmation(false), secondaryButtonText: \"Cancel\", size: \"sm\", visible: showConfirmation, onDismiss: () => {\n                setShowConfirmation(false);\n            } },\n            React.createElement(Text, null, confirmationText)));\n    };\n    const renderButton = () => {\n        return (React.createElement(View, { style: { alignSelf: inline === true ? undefined : alignSelf } },\n            React.createElement(Pressable, { disabled: disabled || loading, style: {\n                    alignSelf: inline === true ? undefined : \"stretch\",\n                    height: HEIGHTS[size || \"md\"],\n                    backgroundColor: getBackgroundColor(color),\n                    // width: inline === true ? undefined : \"100%\",\n                    flexShrink: inline ? 1 : 0,\n                    // flexGrow: inline ? 0 : 1,\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    borderRadius: shape === \"pill\" ? 999 : 5,\n                    borderColor: getBorderColor(color),\n                    borderWidth: type === \"outline\" ? 2 : 0,\n                    opacity: disabled ? 0.4 : 1,\n                    flexDirection: \"row\",\n                    paddingHorizontal: size === \"xs\" ? 6 : size === \"sm\" ? 12 : 8 * 2,\n                }, testID: testID, onPress: debounce(async () => {\n                    await Unifier.utils.haptic();\n                    setLoading(true);\n                    try {\n                        if (withConfirmation && !showConfirmation) {\n                            setShowConfirmation(true);\n                        }\n                        else if (onClick) {\n                            await onClick();\n                        }\n                    }\n                    catch (error) {\n                        setLoading(false);\n                        throw error;\n                    }\n                    setLoading(false);\n                }, 500, { leading: true }) },\n                icon !== undefined && (React.createElement(Box, { marginRight: 2 },\n                    React.createElement(Icon, { color: getTextColor(color), name: icon, prefix: iconPrefix || \"far\", size: size === \"xs\" ? \"sm\" : size }))),\n                Boolean(children) && children,\n                Boolean(text) && (React.createElement(Text, { align: \"center\", color: getTextColor(color), font: \"button\", inline: inline, size: size === \"xs\" ? \"sm\" : size, skipLinking: true, weight: \"bold\" }, text)),\n                Boolean(loading) && (React.createElement(Box, { marginLeft: 2 },\n                    React.createElement(ActivityIndicator, { color: getTextColor(color), size: \"small\" })))),\n            Boolean(withConfirmation) && renderConfirmation()));\n    };\n    if (tooltip) {\n        return (React.createElement(Tooltip, { idealDirection: tooltip.idealDirection, text: tooltip.text }, renderButton()));\n    }\n    else {\n        return renderButton();\n    }\n};\n//# sourceMappingURL=Button.js.map"]},"metadata":{},"sourceType":"module"}