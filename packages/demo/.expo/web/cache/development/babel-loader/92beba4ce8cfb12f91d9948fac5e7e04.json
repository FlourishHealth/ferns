{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { Platform } from 'expo-modules-core';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { getManifest, getManifest2, manifestBaseUrl } from './PlatformUtils';\nvar assetMapOverride = getManifest().assetMapOverride;\nexport function selectAssetSource(meta) {\n  var _meta$fileHashes$inde, _meta$fileUris$index, _manifest2$extra, _manifest2$extra$expo;\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = _objectSpread(_objectSpread({}, meta), assetMapOverride[meta.hash]);\n  }\n  var scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  var index = meta.scales.findIndex(function (s) {\n    return s === scale;\n  });\n  var hash = meta.fileHashes ? (_meta$fileHashes$inde = meta.fileHashes[index]) != null ? _meta$fileHashes$inde : meta.fileHashes[0] : meta.hash;\n  var uri = meta.fileUris ? (_meta$fileUris$index = meta.fileUris[index]) != null ? _meta$fileUris$index : meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return {\n      uri: resolveUri(uri),\n      hash: hash\n    };\n  }\n  var assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    var _uri = pathJoin(assetUrlOverride, hash);\n    return {\n      uri: resolveUri(_uri),\n      hash: hash\n    };\n  }\n  var fileScale = scale === 1 ? '' : `@${scale}x`;\n  var fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  var suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;\n  var params = new URLSearchParams({\n    platform: Platform.OS,\n    hash: meta.hash\n  });\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    var _uri2 = meta.httpServerLocation + suffix + '?' + params;\n    return {\n      uri: _uri2,\n      hash: hash\n    };\n  }\n  var manifest2 = getManifest2();\n  var devServerUrl = manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra$expo = _manifest2$extra.expoGo) != null && _manifest2$extra$expo.developer ? 'http://' + manifest2.extra.expoGo.debuggerHost : getManifest().developer ? getManifest().bundleUrl : null;\n  if (devServerUrl) {\n    var baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);\n    baseUrl.searchParams.set('platform', Platform.OS);\n    baseUrl.searchParams.set('hash', meta.hash);\n    return {\n      uri: baseUrl.href,\n      hash: hash\n    };\n  }\n  if (NativeModules.ExponentKernel) {\n    return {\n      uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n      hash: hash\n    };\n  }\n  return {\n    uri: '',\n    hash: hash\n  };\n}\nexport function resolveUri(uri) {\n  return manifestBaseUrl ? new URL(uri, manifestBaseUrl).href : uri;\n}\nexport function pathJoin() {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  var combined = paths.map(function (part, index) {\n    if (index === 0) {\n      return part.trim().replace(/\\/*$/, '');\n    }\n    return part.trim().replace(/(^\\/*|\\/*$)/g, '');\n  }).filter(function (part) {\n    return part.length > 0;\n  }).join('/').split('/');\n  var resolved = [];\n  for (var part of combined) {\n    if (part === '..') {\n      resolved.pop();\n    } else if (part !== '.') {\n      resolved.push(part);\n    }\n  }\n  return resolved.join('/');\n}","map":{"version":3,"sources":["../src/AssetSources.ts"],"names":[],"mappings":";;;AACA,SAAS,QAAQ,QAAQ,mBAAmB;AAAC,OAAA,UAAA;AAAA,OAAA,aAAA;AAG7C,OAAO,mBAAmB,MAAM,uBAAuB;AACvD,SAAS,WAAW,EAAE,YAAY,EAAE,eAAe,QAAQ,iBAAiB;AAmB5E,IAAM,gBAAgB,GAAG,WAAW,CAAA,CAAE,CAAC,gBAAgB;AAQvD,OAAM,SAAU,iBAAiB,CAAC,IAAmB,EAAA;EAAA,IAAA,qBAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,qBAAA;EAEnD,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;IAClE,IAAI,GAAA,aAAA,CAAA,aAAA,KAAQ,IAAI,GAAK,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAE;EACnD;EAID,IAAM,KAAK,GAAG,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,CAAA,CAAE,CAAC;EAC1E,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,CAAC;IAAA,OAAK,CAAC,KAAK,KAAK;EAAA,EAAC;EACvD,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,IAAA,qBAAA,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,YAAA,qBAAA,GAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI;EAGvF,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAA,oBAAA,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAA,oBAAA,GAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG;EAC/E,IAAI,GAAG,EAAE;IACP,OAAO;MAAE,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC;MAAE,IAAI,EAAJ;IAAI,CAAE;EACtC;EAGD,IAAM,gBAAgB,GAAG,WAAW,CAAA,CAAE,CAAC,gBAAgB;EACvD,IAAI,gBAAgB,EAAE;IACpB,IAAM,IAAG,GAAG,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC;IAC5C,OAAO;MAAE,GAAG,EAAE,UAAU,CAAC,IAAG,CAAC;MAAE,IAAI,EAAJ;IAAI,CAAE;EACtC;EAED,IAAM,SAAS,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,KAAK,GAAG;EACjD,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE;EAC1E,IAAM,MAAM,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,GAAG,aAAa,EAAE;EAC9E,IAAM,MAAM,GAAG,IAAI,eAAe,CAAC;IACjC,QAAQ,EAAE,QAAQ,CAAC,EAAE;IACrB,IAAI,EAAE,IAAI,CAAC;GACZ,CAAC;EAIF,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;IAChD,IAAM,KAAG,GAAG,IAAI,CAAC,kBAAkB,GAAG,MAAM,GAAG,GAAG,GAAG,MAAM;IAC3D,OAAO;MAAE,GAAG,EAAH,KAAG;MAAE,IAAI,EAAJ;IAAI,CAAE;EACrB;EAGD,IAAM,SAAS,GAAG,YAAY,CAAA,CAAE;EAEhC,IAAM,YAAY,GAAG,SAAS,aAAA,gBAAA,GAAT,SAAS,CAAE,KAAK,cAAA,qBAAA,GAAhB,gBAAA,CAAkB,MAAM,aAAxB,qBAAA,CAA0B,SAAS,GACpD,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,GAEjD,WAAW,CAAA,CAAE,CAAC,SAAS,GACrB,WAAW,CAAA,CAAE,CAAC,SAAS,GACvB,IAAI;EACR,IAAI,YAAY,EAAE;IAChB,IAAM,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,kBAAkB,GAAG,MAAM,EAAE,YAAY,CAAC;IAEvE,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,CAAC;IACjD,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;IAC3C,OAAO;MACL,GAAG,EAAE,OAAO,CAAC,IAAI;MACjB,IAAI,EAAJ;KACD;EACF;EAGD,IAAI,aAAa,CAAC,cAAc,EAAE;IAChC,OAAO;MAAE,GAAG,EAAE,6CAA6C,kBAAkB,CAAC,IAAI,CAAC,EAAE;MAAE,IAAI,EAAJ;IAAI,CAAE;EAC9F;EAMD,OAAO;IAAE,GAAG,EAAE,EAAE;IAAE,IAAI,EAAJ;EAAI,CAAE;AAC1B;AAOA,OAAM,SAAU,UAAU,CAAC,GAAW,EAAA;EAEpC,OAAO,eAAe,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,IAAI,GAAG,GAAG;AACnE;AAGA,OAAM,SAAU,QAAQ,CAAA,EAAmB;EAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAf,KAAe,OAAA,KAAA,CAAA,IAAA,GAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;IAAf,KAAe,CAAA,IAAA,IAAA,SAAA,CAAA,IAAA;EAAA;EAEzC,IAAM,QAAQ,GAAG,KAAK,CACnB,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,EAAI;IACnB,IAAI,KAAK,KAAK,CAAC,EAAE;MACf,OAAO,IAAI,CAAC,IAAI,CAAA,CAAE,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IACvC;IACD,OAAO,IAAI,CAAC,IAAI,CAAA,CAAE,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EAChD,CAAC,CAAC,CACD,MAAM,CAAC,UAAC,IAAI;IAAA,OAAK,IAAI,CAAC,MAAM,GAAG,CAAC;EAAA,EAAC,CACjC,IAAI,CAAC,GAAG,CAAC,CACT,KAAK,CAAC,GAAG,CAAC;EAGb,IAAM,QAAQ,GAAa,EAAE;EAC7B,KAAK,IAAM,IAAI,IAAI,QAAQ,EAAE;IAC3B,IAAI,IAAI,KAAK,IAAI,EAAE;MACjB,QAAQ,CAAC,GAAG,CAAA,CAAE;KACf,MAAM,IAAI,IAAI,KAAK,GAAG,EAAE;MACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IACpB;EACF;EAED,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;AAC3B","sourcesContent":["import type { PackagerAsset } from '@react-native/assets-registry/registry';\nimport { Platform } from 'expo-modules-core';\nimport { PixelRatio, NativeModules } from 'react-native';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { getManifest, getManifest2, manifestBaseUrl } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = Pick<\n  PackagerAsset,\n  'httpServerLocation' | 'name' | 'hash' | 'type' | 'scales' | 'width' | 'height'\n> & {\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest.\n// This value will always be either null or an absolute URL, e.g. `https://expo.dev/`\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] ?? meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] ?? meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = pathJoin(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;\n  const params = new URLSearchParams({\n    platform: Platform.OS,\n    hash: meta.hash,\n  });\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix + '?' + params;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  const devServerUrl = manifest2?.extra?.expoGo?.developer\n    ? 'http://' + manifest2.extra.expoGo.debuggerHost\n    : // For assets during development, we use the development server's URL origin\n    getManifest().developer\n    ? getManifest().bundleUrl\n    : null;\n  if (devServerUrl) {\n    const baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);\n\n    baseUrl.searchParams.set('platform', Platform.OS);\n    baseUrl.searchParams.set('hash', meta.hash);\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // Temporary fallback for loading assets in Expo Go home\n  if (NativeModules.ExponentKernel) {\n    return { uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`, hash };\n  }\n\n  // In correctly configured apps, we arrive here if the asset is locally available on disk due to\n  // being managed by expo-updates, and `getLocalAssetUri(hash)` must return a local URI for this\n  // hash. Since the asset is local, we don't have a remote URL and specify an invalid URL (an empty\n  // string) as a placeholder.\n  return { uri: '', hash };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  // `manifestBaseUrl` is always an absolute URL or `null`.\n  return manifestBaseUrl ? new URL(uri, manifestBaseUrl).href : uri;\n}\n\n// A very cheap path canonicalization like path.join but without depending on a `path` polyfill.\nexport function pathJoin(...paths: string[]): string {\n  // Start by simply combining paths, without worrying about \"..\" or \".\"\n  const combined = paths\n    .map((part, index) => {\n      if (index === 0) {\n        return part.trim().replace(/\\/*$/, '');\n      }\n      return part.trim().replace(/(^\\/*|\\/*$)/g, '');\n    })\n    .filter((part) => part.length > 0)\n    .join('/')\n    .split('/');\n\n  // Handle \"..\" and \".\" in paths\n  const resolved: string[] = [];\n  for (const part of combined) {\n    if (part === '..') {\n      resolved.pop(); // Remove the last element from the result\n    } else if (part !== '.') {\n      resolved.push(part);\n    }\n  }\n\n  return resolved.join('/');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}