{"ast":null,"code":"'use strict';\n\nimport { useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { makeShareableCloneRecursive, registerShareableMapping } from '../shareables';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isFabric } from '../PlatformChecker';\nvar IS_FABRIC = isFabric();\nfunction getComponentOrScrollable(component) {\n  if (IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\nvar getTagValueFunction = IS_FABRIC ? getShadowNodeWrapperFromRef : findNodeHandle;\nvar _worklet_10709902486534_init_data = {\n  code: \"function anonymous(){const{tag,viewName}=this.__closure;const f=function(){return tag.value;};f.viewName=viewName;return f;}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedRef.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"tag\\\",\\\"viewName\\\",\\\"__closure\\\",\\\"f\\\",\\\"value\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedRef.js\\\"],\\\"mappings\\\":\\\"AA6Cc,SAAAA,SAAMA,CAAA,QAAAC,GAAA,CAAAC,QAAA,OAAAC,SAAA,CAGZ,KAAM,CAAAC,CAAC,CAAG,QAAAA,CAAA,QAAM,CAAAH,GAAG,CAACI,KAAK,GACzBD,CAAC,CAACF,QAAQ,CAAGA,QAAQ,CACrB,MAAO,CAAAE,CAAC,CACV\\\"}\",\n  version: \"3.6.3\"\n};\nexport function useAnimatedRef() {\n  var tag = useSharedValue(-1);\n  var viewName = useSharedValue(null);\n  var ref = useRef();\n  if (!ref.current) {\n    var fun = function fun(component) {\n      if (component) {\n        tag.value = getTagValueFunction(getComponentOrScrollable(component));\n        fun.current = component;\n        if (Platform.OS === 'ios' && !IS_FABRIC) {\n          var _viewConfig;\n          viewName.value = (component === null || component === void 0 ? void 0 : (_viewConfig = component.viewConfig) === null || _viewConfig === void 0 ? void 0 : _viewConfig.uiViewClassName) || 'RCTView';\n        }\n      }\n      return tag.value;\n    };\n    fun.current = null;\n    var remoteRef = makeShareableCloneRecursive({\n      __init: function () {\n        var _e = [new global.Error(), -3, -27];\n        var anonymous = function anonymous() {\n          var f = function f() {\n            return tag.value;\n          };\n          f.viewName = viewName;\n          return f;\n        };\n        anonymous.__closure = {\n          tag: tag,\n          viewName: viewName\n        };\n        anonymous.__workletHash = 10709902486534;\n        anonymous.__initData = _worklet_10709902486534_init_data;\n        anonymous.__stackDetails = _e;\n        return anonymous;\n      }()\n    });\n    registerShareableMapping(fun, remoteRef);\n    ref.current = fun;\n  }\n  return ref.current;\n}","map":{"version":3,"sources":["useAnimatedRef.ts"],"names":["useRef","useSharedValue","getShadowNodeWrapperFromRef","makeShareableCloneRecursive","registerShareableMapping","isFabric","IS_FABRIC","getComponentOrScrollable","component","getNativeScrollRef","getScrollableNode","getTagValueFunction","findNodeHandle","useAnimatedRef","tag","viewName","ref","current","fun","value","Platform","OS","viewConfig","uiViewClassName","remoteRef","__init","f"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,cAAc,QAAQ,kBAAkB;AAGjD,SAASC,2BAA2B,QAAQ,gBAAgB;AAC5D,SACEC,2BAA2B,EAC3BC,wBAAwB,QACnB,eAAe;AAAA,OAAA,QAAA;AAAA,OAAA,cAAA;AAEtB,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,IAAMC,SAAS,GAAGD,QAAQ,CAAA,CAAE;AAY5B,SAASE,wBAAwBA,CAACC,SAAmC,EAAE;EACrE,IAAIF,SAAS,IAAIE,SAAS,CAACC,kBAAkB,EAAE;IAC7C,OAAOD,SAAS,CAACC,kBAAkB,CAAA,CAAE;EACvC,CAAC,MAAM,IAAI,CAACH,SAAS,IAAIE,SAAS,CAACE,iBAAiB,EAAE;IACpD,OAAOF,SAAS,CAACE,iBAAiB,CAAA,CAAE;EACtC;EACA,OAAOF,SAAS;AAClB;AAEA,IAAMG,mBAAmB,GAAGL,SAAS,GACjCJ,2BAA2B,GAC3BU,cAAc;AAAA,IAAA,iCAAA;EAAA,IAAA;EAAA,QAAA;EAAA,SAAA;EAAA,OAAA;AAAA;AAQlB,OAAO,SAASC,cAAcA,CAAAA,EAED;EAC3B,IAAMC,GAAG,GAAGb,cAAc,CAAoC,CAAC,CAAC,CAAC;EACjE,IAAMc,QAAQ,GAAGd,cAAc,CAAgB,IAAI,CAAC;EAEpD,IAAMe,GAAG,GAAGhB,MAAM,CAAA,CAA2B;EAE7C,IAAI,CAACgB,GAAG,CAACC,OAAO,EAAE;IAChB,IAAMC,GAA4B,GAChCV,SADIU,GAA4B,CAChCV,SAAS,EACN;MAEH,IAAIA,SAAS,EAAE;QACbM,GAAG,CAACK,KAAK,GAAGR,mBAAmB,CAACJ,wBAAwB,CAACC,SAAS,CAAC,CAAC;QACpEU,GAAG,CAACD,OAAO,GAAGT,SAAS;QAEvB,IAAIY,QAAQ,CAACC,EAAE,KAAK,KAAK,IAAI,CAACf,SAAS,EAAE;UAAA,IAAA,WAAA;UACvCS,QAAQ,CAACI,KAAK,GACZ,CAACX,SAAS,KAAA,IAAA,IAATA,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,WAAA,GAATA,SAAS,CAA+Bc,UAAU,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAnD,WAAA,CACIC,eAAe,KAAI,SAAS;QACpC;MACF;MACA,OAAOT,GAAG,CAACK,KAAK;IAClB,CAAE;IAEFD,GAAG,CAACD,OAAO,GAAG,IAAI;IAElB,IAAMO,SAAS,GAAGrB,2BAA2B,CAAC;MAC5CsB,MAAM,EAAEA;QAAAA,IAAAA,EAAAA,QAAAA,MAAAA,CAAAA,KAAAA;QAAAA,IAAAA,SAAAA,YAAAA,UAAAA,EAAM;UAEZ,IAAMC,CAAC,GAAGA,SAAJA,CAAC,CAAA;YAAA,OAASZ,GAAG,CAACK,KAAK;UAAA;UACzBO,CAAC,CAACX,QAAQ,GAAGA,QAAQ;UACrB,OAAOW,CAAC;QACV,CAAA;QAAA,SAAA,CAAA,SAAA;UAAA,GAAA,EAHkBZ,GAAG;UAAA,QAAA,EACNC;QAAQ;QAAA,SAAA,CAAA,aAAA;QAAA,SAAA,CAAA,UAAA,GAAA,iCAAA;QAAA,SAAA,CAAA,cAAA,GAAA,EAAA;QAAA,OAAA,SAAA;MAAA,CAHfU;IAMV,CAAC,CAAC;IACFrB,wBAAwB,CAACc,GAAG,EAAEM,SAAS,CAAC;IACxCR,GAAG,CAACC,OAAO,GAAGC,GAAG;EACnB;EAEA,OAAOF,GAAG,CAACC,OAAO;AACpB","sourcesContent":["'use strict';\nimport type { Component } from 'react';\nimport { useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedRef } from './commonTypes';\nimport type { ShadowNodeWrapper } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport {\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from '../shareables';\nimport { Platform, findNodeHandle } from 'react-native';\nimport { isFabric } from '../PlatformChecker';\n\nconst IS_FABRIC = isFabric();\n\ninterface MaybeScrollableComponent extends Component {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getNativeScrollRef?: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getScrollableNode?: any;\n  viewConfig?: {\n    uiViewClassName?: string;\n  };\n}\n\nfunction getComponentOrScrollable(component: MaybeScrollableComponent) {\n  if (IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\n\nconst getTagValueFunction = IS_FABRIC\n  ? getShadowNodeWrapperFromRef\n  : findNodeHandle;\n\n/**\n * Lets you get a reference of a view that you can use inside a worklet.\n *\n * @returns An object with a `.current` property which contains an instance of a component.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef\n */\nexport function useAnimatedRef<\n  TComponent extends Component\n>(): AnimatedRef<TComponent> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const viewName = useSharedValue<string | null>(null);\n\n  const ref = useRef<AnimatedRef<TComponent>>();\n\n  if (!ref.current) {\n    const fun: AnimatedRef<TComponent> = <AnimatedRef<TComponent>>((\n      component\n    ) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        tag.value = getTagValueFunction(getComponentOrScrollable(component));\n        fun.current = component;\n        // viewName is required only on iOS with Paper\n        if (Platform.OS === 'ios' && !IS_FABRIC) {\n          viewName.value =\n            (component as MaybeScrollableComponent)?.viewConfig\n              ?.uiViewClassName || 'RCTView';\n        }\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const remoteRef = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        const f = () => tag.value;\n        f.viewName = viewName;\n        return f;\n      },\n    });\n    registerShareableMapping(fun, remoteRef);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}