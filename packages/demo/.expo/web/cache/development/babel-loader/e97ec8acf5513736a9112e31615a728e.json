{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { GOOGLE_PLACES_API_RESTRICTIONS } from \"./Constants\";\nimport { TextField } from \"./TextField\";\nimport { ThemeContext } from \"./Theme\";\nimport { processAddressComponents } from \"./Utilities\";\nexport var MobileAddressAutocomplete = function MobileAddressAutocomplete(_ref) {\n  var disabled = _ref.disabled,\n    googleMapsApiKey = _ref.googleMapsApiKey,\n    includeCounty = _ref.includeCounty,\n    inputValue = _ref.inputValue,\n    styles = _ref.styles,\n    handleAddressChange = _ref.handleAddressChange,\n    handleAutoCompleteChange = _ref.handleAutoCompleteChange,\n    testID = _ref.testID;\n  var _a, _b;\n  var _useContext = useContext(ThemeContext),\n    theme = _useContext.theme;\n  var ref = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocused = _useState2[0],\n    setIsFocused = _useState2[1];\n  useEffect(function () {\n    if (!googleMapsApiKey) return;\n    if (ref === null || ref === void 0 ? void 0 : ref.current) {\n      ref.current.setAddressText(inputValue);\n    }\n  }, []);\n  var textInputContainerStyles = Object.assign({\n    backgroundColor: theme.white,\n    borderColor: isFocused ? theme.blue : theme.gray,\n    borderWidth: isFocused ? 5 : 1,\n    borderRadius: 16,\n    paddingHorizontal: isFocused ? 10 : 14,\n    paddingVertical: isFocused ? 0 : 4\n  }, styles === null || styles === void 0 ? void 0 : styles.textInputContainer);\n  var textInputStyles = Object.assign({\n    backgroundColor: theme.white,\n    borderRadius: 16,\n    color: theme.darkGray,\n    fontFamily: theme.primaryFont,\n    fontSize: (_b = (_a = styles === null || styles === void 0 ? void 0 : styles.textInput) === null || _a === void 0 ? void 0 : _a.fontSize) !== null && _b !== void 0 ? _b : 14,\n    height: 40,\n    marginBottom: 0,\n    paddingHorizontal: 0,\n    paddingVertical: 4\n  }, styles === null || styles === void 0 ? void 0 : styles.textInput);\n  if (!googleMapsApiKey) {\n    return React.createElement(TextField, {\n      disabled: disabled,\n      id: \"address1\",\n      label: \"Street Address\",\n      testID: testID,\n      type: \"text\",\n      value: inputValue,\n      onChange: function onChange(result) {\n        return handleAddressChange(result);\n      }\n    });\n  }\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 1,\n    style: {\n      flex: 1\n    },\n    onPress: function onPress() {\n      return setIsFocused(false);\n    }\n  }, React.createElement(View, null, React.createElement(GooglePlacesAutocomplete, {\n    ref: ref,\n    GooglePlacesDetailsQuery: {\n      fields: Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields).join(\",\")\n    },\n    disableScroll: true,\n    fetchDetails: true,\n    placeholder: \"Street Address\",\n    query: {\n      key: googleMapsApiKey,\n      language: \"en\",\n      components: `country:${GOOGLE_PLACES_API_RESTRICTIONS.components.country}`\n    },\n    styles: Object.assign({\n      textInputContainer: Object.assign({}, textInputContainerStyles),\n      textInput: Object.assign({}, textInputStyles)\n    }, styles),\n    textInputProps: {\n      onFocus: function onFocus() {\n        return setIsFocused(true);\n      },\n      onBlur: function onBlur() {\n        return setIsFocused(false);\n      },\n      onChange: function onChange(event) {\n        handleAddressChange({\n          value: event.nativeEvent.text\n        });\n      }\n    },\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var addressComponents = details === null || details === void 0 ? void 0 : details.address_components;\n      var formattedAddressObject = processAddressComponents(addressComponents, {\n        includeCounty: includeCounty\n      });\n      var address1 = formattedAddressObject.address1;\n      handleAutoCompleteChange(formattedAddressObject);\n      if (ref.current) {\n        ref.current.setAddressText(address1);\n      }\n      setIsFocused(false);\n    }\n  })));\n};","map":{"version":3,"sources":["../src/MobileAddressAutoComplete.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { TouchableOpacity, View } from \"react-native\";\nimport { GooglePlacesAutocomplete, } from \"react-native-google-places-autocomplete\";\nimport { GOOGLE_PLACES_API_RESTRICTIONS } from \"./Constants\";\nimport { TextField } from \"./TextField\";\nimport { ThemeContext } from \"./Theme\";\nimport { processAddressComponents } from \"./Utilities\";\nexport const MobileAddressAutocomplete = ({ disabled, googleMapsApiKey, includeCounty, inputValue, \n// More on react-native-google-places-autocomplete styles here: https://github.com/FaridSafi/react-native-google-places-autocomplete#styling\nstyles, handleAddressChange, handleAutoCompleteChange, testID, }) => {\n    var _a, _b;\n    const { theme } = useContext(ThemeContext);\n    const ref = useRef(null);\n    const [isFocused, setIsFocused] = useState(false);\n    // Load the Google Maps script and initialize the autocomplete.\n    useEffect(() => {\n        if (!googleMapsApiKey)\n            return;\n        if (ref === null || ref === void 0 ? void 0 : ref.current) {\n            ref.current.setAddressText(inputValue);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const textInputContainerStyles = Object.assign({ backgroundColor: theme.white, borderColor: isFocused ? theme.blue : theme.gray, borderWidth: isFocused ? 5 : 1, borderRadius: 16, paddingHorizontal: isFocused ? 10 : 14, paddingVertical: isFocused ? 0 : 4 }, styles === null || styles === void 0 ? void 0 : styles.textInputContainer);\n    const textInputStyles = Object.assign({ backgroundColor: theme.white, borderRadius: 16, color: theme.darkGray, fontFamily: theme.primaryFont, fontSize: (_b = (_a = styles === null || styles === void 0 ? void 0 : styles.textInput) === null || _a === void 0 ? void 0 : _a.fontSize) !== null && _b !== void 0 ? _b : 14, height: 40, marginBottom: 0, paddingHorizontal: 0, paddingVertical: 4 }, styles === null || styles === void 0 ? void 0 : styles.textInput);\n    if (!googleMapsApiKey) {\n        return (React.createElement(TextField, { disabled: disabled, id: \"address1\", label: \"Street Address\", testID: testID, type: \"text\", value: inputValue, onChange: (result) => handleAddressChange(result) }));\n    }\n    return (React.createElement(TouchableOpacity, { activeOpacity: 1, style: { flex: 1 }, onPress: () => setIsFocused(false) },\n        React.createElement(View, null,\n            React.createElement(GooglePlacesAutocomplete, { ref: ref, GooglePlacesDetailsQuery: {\n                    fields: Object.values(GOOGLE_PLACES_API_RESTRICTIONS.fields).join(\",\"),\n                }, disableScroll: true, fetchDetails: true, placeholder: \"Street Address\", query: {\n                    key: googleMapsApiKey,\n                    language: \"en\",\n                    components: `country:${GOOGLE_PLACES_API_RESTRICTIONS.components.country}`,\n                }, styles: Object.assign({ textInputContainer: Object.assign({}, textInputContainerStyles), textInput: Object.assign({}, textInputStyles) }, styles), textInputProps: {\n                    onFocus: () => setIsFocused(true),\n                    onBlur: () => setIsFocused(false),\n                    onChange: (event) => {\n                        handleAddressChange({ value: event.nativeEvent.text });\n                    },\n                }, onPress: (data, details = null) => {\n                    const addressComponents = details === null || details === void 0 ? void 0 : details.address_components;\n                    const formattedAddressObject = processAddressComponents(addressComponents, {\n                        includeCounty,\n                    });\n                    const { address1 } = formattedAddressObject;\n                    handleAutoCompleteChange(formattedAddressObject);\n                    if (ref.current) {\n                        ref.current.setAddressText(address1);\n                    }\n                    setIsFocused(false);\n                } }))));\n};\n//# sourceMappingURL=MobileAddressAutoComplete.js.map"]},"metadata":{},"sourceType":"module"}