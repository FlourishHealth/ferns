{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Box, Button, Table, TableHeader, TableHeaderCell, TableRow, Text } from \"ferns-ui\";\nimport sortBy from \"lodash/sortBy\";\nimport React, { useState } from \"react\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar _SortableExpandableTable = function SortableExpandableTable() {\n  var _useState = useState([[\"Data 1 has some data in it\", \"Data 2 has some longer data in it\", 5, 1000.4], [\"Row 2 short\", \"Row 2 long\", 10, 2000.0], [\"Row 3 very long, lots of overflow here, wow is this still going? I hope it all fits!\", \"Row 3 long\", 1, 2]]),\n    _useState2 = _slicedToArray(_useState, 2),\n    rows = _useState2[0],\n    setRows = _useState2[1];\n  var renderDrawerContents = function renderDrawerContents(index) {\n    return _jsxs(Box, {\n      paddingY: 8,\n      children: [_jsxs(Text, {\n        children: [\"Drawer contents for row \", index]\n      }), _jsx(Button, {\n        text: \"Console.log()\",\n        onClick: function onClick() {\n          return console.info(\"Button clicked\");\n        }\n      })]\n    });\n  };\n  var setSort = function setSort(direction, index) {\n    if (!direction) {\n      setRows(rows);\n    } else {\n      direction === \"asc\" ? setRows(sortBy(rows, index)) : setRows(sortBy(rows, index).reverse());\n    }\n  };\n  return _jsxs(Table, {\n    columns: [160, 200, 120, 200],\n    children: [_jsxs(TableHeader, {\n      children: [_jsx(TableHeaderCell, {\n        index: 0,\n        sortable: true,\n        onSortChange: function onSortChange(direction) {\n          setSort(direction, 0);\n        },\n        children: _jsx(Text, {\n          children: \"Column 1\"\n        })\n      }), _jsx(TableHeaderCell, {\n        index: 1,\n        sortable: true,\n        onSortChange: function onSortChange(direction) {\n          setSort(direction, 1);\n        },\n        children: _jsx(Text, {\n          children: \"Column 2\"\n        })\n      }), _jsx(TableHeaderCell, {\n        index: 2,\n        sortable: true,\n        onSortChange: function onSortChange(direction) {\n          setSort(direction, 2);\n        },\n        children: _jsx(Text, {\n          children: \"Column 3\"\n        })\n      }), _jsx(TableHeaderCell, {\n        index: 3,\n        sortable: true,\n        onSortChange: function onSortChange(direction) {\n          setSort(direction, 3);\n        },\n        children: _jsx(Text, {\n          children: \"Cost\"\n        })\n      })]\n    }), rows.map(function (row, index) {\n      return _jsxs(TableRow, {\n        drawerContents: renderDrawerContents(index),\n        children: [_jsx(Text, {\n          children: row[0]\n        }), _jsx(Text, {\n          children: row[1]\n        }), _jsx(Text, {\n          children: row[2]\n        }), _jsx(Text, {\n          children: `$${row[3].toFixed(2)}`\n        })]\n      }, row[0]);\n    })]\n  });\n};\nexport var TableStories = {\n  title: \"Table\",\n  component: Table,\n  stories: {\n    StandardTable: function StandardTable() {\n      var rows = [\"Data 1 has some data in it\", \"Row 2 short\", \"Row 2 long\", 10, 2000.0, \"Row 3 very long, lots of overflow here, wow is this still going? I hope it all fits!\", \"Row 3 long\", 1, 2];\n      return _jsx(Box, {\n        color: \"white\",\n        height: 190,\n        scroll: true,\n        width: 400,\n        children: _jsxs(Table, {\n          columns: [80, 200, 200, 80],\n          children: [_jsxs(TableHeader, {\n            children: [_jsx(TableHeaderCell, {\n              index: 0,\n              children: _jsx(Text, {\n                children: \"Column 1\"\n              })\n            }), _jsx(TableHeaderCell, {\n              index: 1,\n              children: _jsx(Text, {\n                children: \"Column 2\"\n              })\n            }), _jsx(TableHeaderCell, {\n              index: 2,\n              children: _jsx(Text, {\n                children: \"Column 3\"\n              })\n            }), _jsx(TableHeaderCell, {\n              index: 2,\n              children: _jsx(Text, {\n                children: \"Cost\"\n              })\n            })]\n          }), rows.map(function (row) {\n            return _jsxs(TableRow, {\n              children: [_jsx(Text, {\n                children: row\n              }, `${row}1`), _jsx(Text, {\n                children: \"Data\"\n              }, `${row}2`), _jsx(Text, {\n                children: \"Other Data\"\n              }, `${row}3`), _jsx(Text, {\n                children: \"$2.00\"\n              }, `${row}4`)]\n            }, row);\n          })]\n        })\n      });\n    },\n    SortableExpandableTable: function SortableExpandableTable() {\n      return _jsx(Box, {\n        color: \"white\",\n        width: \"100%\",\n        children: _jsx(_SortableExpandableTable, {})\n      });\n    }\n  }\n};","map":{"version":3,"names":["Box","Button","Table","TableHeader","TableHeaderCell","TableRow","Text","sortBy","React","useState","jsxs","_jsxs","jsx","_jsx","SortableExpandableTable","_useState","_useState2","_slicedToArray","rows","setRows","renderDrawerContents","index","paddingY","children","text","onClick","console","info","setSort","direction","reverse","columns","sortable","onSortChange","map","row","drawerContents","toFixed","TableStories","title","component","stories","StandardTable","color","height","scroll","width","_SortableExpandableTable"],"sources":["/Users/josh/src/ui/packages/ui-demo/src/Table.stories.tsx"],"sourcesContent":["import {Box, Button, Table, TableHeader, TableHeaderCell, TableRow, Text} from \"ferns-ui\";\nimport sortBy from \"lodash/sortBy\";\nimport React, {useState} from \"react\";\n\nconst SortableExpandableTable = () => {\n  const [rows, setRows] = useState([\n    [\"Data 1 has some data in it\", \"Data 2 has some longer data in it\", 5, 1000.4],\n    [\"Row 2 short\", \"Row 2 long\", 10, 2000.0],\n    [\n      \"Row 3 very long, lots of overflow here, wow is this still going? I hope it all fits!\",\n      \"Row 3 long\",\n      1,\n      2,\n    ],\n  ]);\n\n  const renderDrawerContents = (index: number) => {\n    return (\n      <Box paddingY={8}>\n        <Text>Drawer contents for row {index}</Text>\n        <Button text=\"Console.log()\" onClick={() => console.info(\"Button clicked\")} />\n      </Box>\n    );\n  };\n\n  const setSort = (direction: \"asc\" | \"desc\" | undefined, index: number): void => {\n    if (!direction) {\n      setRows(rows);\n    } else {\n      direction === \"asc\" ? setRows(sortBy(rows, index)) : setRows(sortBy(rows, index).reverse());\n    }\n  };\n\n  return (\n    <Table columns={[160, 200, 120, 200]}>\n      <TableHeader>\n        <TableHeaderCell\n          index={0}\n          sortable\n          onSortChange={(direction) => {\n            setSort(direction, 0);\n          }}\n        >\n          <Text>Column 1</Text>\n        </TableHeaderCell>\n        <TableHeaderCell\n          index={1}\n          sortable\n          onSortChange={(direction) => {\n            setSort(direction, 1);\n          }}\n        >\n          <Text>Column 2</Text>\n        </TableHeaderCell>\n        <TableHeaderCell\n          index={2}\n          sortable\n          onSortChange={(direction) => {\n            setSort(direction, 2);\n          }}\n        >\n          <Text>Column 3</Text>\n        </TableHeaderCell>\n        <TableHeaderCell\n          index={3}\n          sortable\n          onSortChange={(direction) => {\n            setSort(direction, 3);\n          }}\n        >\n          <Text>Cost</Text>\n        </TableHeaderCell>\n      </TableHeader>\n      {rows.map((row, index) => (\n        <TableRow key={row[0]} drawerContents={renderDrawerContents(index)}>\n          <Text>{row[0]}</Text>\n          <Text>{row[1]}</Text>\n          <Text>{row[2]}</Text>\n          <Text>{`$${(row[3] as number).toFixed(2)}`}</Text>\n        </TableRow>\n      ))}\n    </Table>\n  );\n};\n\nexport const TableStories = {\n  title: \"Table\",\n  component: Table,\n  stories: {\n    StandardTable() {\n      const rows = [\n        \"Data 1 has some data in it\",\n        \"Row 2 short\",\n        \"Row 2 long\",\n        10,\n        2000.0,\n        \"Row 3 very long, lots of overflow here, wow is this still going? I hope it all fits!\",\n        \"Row 3 long\",\n        1,\n        2,\n      ];\n      return (\n        <Box color=\"white\" height={190} scroll width={400}>\n          <Table columns={[80, 200, 200, 80]}>\n            <TableHeader>\n              <TableHeaderCell index={0}>\n                <Text>Column 1</Text>\n              </TableHeaderCell>\n              <TableHeaderCell index={1}>\n                <Text>Column 2</Text>\n              </TableHeaderCell>\n              <TableHeaderCell index={2}>\n                <Text>Column 3</Text>\n              </TableHeaderCell>\n              <TableHeaderCell index={2}>\n                <Text>Cost</Text>\n              </TableHeaderCell>\n            </TableHeader>\n            {rows.map((row) => (\n              <TableRow key={row}>\n                <Text key={`${row}1`}>{row}</Text>\n                <Text key={`${row}2`}>Data</Text>\n                <Text key={`${row}3`}>Other Data</Text>\n                <Text key={`${row}4`}>$2.00</Text>\n              </TableRow>\n            ))}\n          </Table>\n        </Box>\n      );\n    },\n    SortableExpandableTable: () => (\n      <Box color=\"white\" width=\"100%\">\n        <SortableExpandableTable />\n      </Box>\n    ),\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}