{"ast":null,"code":"var _worklet_11048418097672_init_data = {\n  code: \"function Bezier(mX1, mY1, mX2, mY2) {\\n  const NEWTON_ITERATIONS = 4;\\n  const NEWTON_MIN_SLOPE = 0.001;\\n  const SUBDIVISION_PRECISION = 0.0000001;\\n  const SUBDIVISION_MAX_ITERATIONS = 10;\\n  const kSplineTableSize = 11;\\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\\n  function A(aA1, aA2) {\\n    'worklet';\\n\\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\\n  }\\n  function B(aA1, aA2) {\\n    'worklet';\\n\\n    return 3.0 * aA2 - 6.0 * aA1;\\n  }\\n  function C(aA1) {\\n    'worklet';\\n\\n    return 3.0 * aA1;\\n  }\\n  function calcBezier(aT, aA1, aA2) {\\n    'worklet';\\n\\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\\n  }\\n  function getSlope(aT, aA1, aA2) {\\n    'worklet';\\n\\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\\n  }\\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\\n    'worklet';\\n\\n    let currentX;\\n    let currentT;\\n    let i = 0;\\n    do {\\n      currentT = aA + (aB - aA) / 2.0;\\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\\n      if (currentX > 0.0) {\\n        aB = currentT;\\n      } else {\\n        aA = currentT;\\n      }\\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\\n    return currentT;\\n  }\\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\\n    'worklet';\\n\\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\\n      if (currentSlope === 0.0) {\\n        return aGuessT;\\n      }\\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\\n      aGuessT -= currentX / currentSlope;\\n    }\\n    return aGuessT;\\n  }\\n  function LinearEasing(x) {\\n    'worklet';\\n\\n    return x;\\n  }\\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\\n    throw new Error('bezier x values must be in [0, 1] range');\\n  }\\n  if (mX1 === mY1 && mX2 === mY2) {\\n    return LinearEasing;\\n  }\\n  const sampleValues = new Array(kSplineTableSize);\\n  for (let i = 0; i < kSplineTableSize; ++i) {\\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\\n  }\\n  function getTForX(aX) {\\n    'worklet';\\n\\n    let intervalStart = 0.0;\\n    let currentSample = 1;\\n    const lastSample = kSplineTableSize - 1;\\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\\n      intervalStart += kSampleStepSize;\\n    }\\n    --currentSample;\\n    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\\n    const guessForT = intervalStart + dist * kSampleStepSize;\\n    const initialSlope = getSlope(guessForT, mX1, mX2);\\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\\n    } else if (initialSlope === 0.0) {\\n      return guessForT;\\n    } else {\\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\\n    }\\n  }\\n  return function BezierEasing(x) {\\n    'worklet';\\n\\n    if (mX1 === mY1 && mX2 === mY2) {\\n      return x;\\n    }\\n    if (x === 0) {\\n      return 0;\\n    }\\n    if (x === 1) {\\n      return 1;\\n    }\\n    return calcBezier(getTForX(x), mY1, mY2);\\n  };\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"Bezier\\\",\\\"mX1\\\",\\\"mY1\\\",\\\"mX2\\\",\\\"mY2\\\",\\\"NEWTON_ITERATIONS\\\",\\\"NEWTON_MIN_SLOPE\\\",\\\"SUBDIVISION_PRECISION\\\",\\\"SUBDIVISION_MAX_ITERATIONS\\\",\\\"kSplineTableSize\\\",\\\"kSampleStepSize\\\",\\\"A\\\",\\\"aA1\\\",\\\"aA2\\\",\\\"B\\\",\\\"C\\\",\\\"calcBezier\\\",\\\"aT\\\",\\\"getSlope\\\",\\\"binarySubdivide\\\",\\\"aX\\\",\\\"aA\\\",\\\"aB\\\",\\\"currentX\\\",\\\"currentT\\\",\\\"i\\\",\\\"Math\\\",\\\"abs\\\",\\\"newtonRaphsonIterate\\\",\\\"aGuessT\\\",\\\"currentSlope\\\",\\\"LinearEasing\\\",\\\"x\\\",\\\"Error\\\",\\\"sampleValues\\\",\\\"Array\\\",\\\"getTForX\\\",\\\"intervalStart\\\",\\\"currentSample\\\",\\\"lastSample\\\",\\\"dist\\\",\\\"guessForT\\\",\\\"initialSlope\\\",\\\"BezierEasing\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AAQO,SAAAA,MAASA,CAAOC,GAAA,EAAGC,GAAE,EAAGC,GAAE,EAAGC,GAAE,EAAG;EAGvC,MAAMC,iBAAiB,GAAG,CAAC;EAC3B,MAAMC,gBAAgB,GAAG,KAAK;EAC9B,MAAMC,qBAAqB,GAAG,SAAS;EACvC,MAAMC,0BAA0B,GAAG,EAAE;EACrC,MAAMC,gBAAgB,GAAG,EAAE;EAC3B,MAAMC,eAAe,GAAG,GAAG,IAAID,gBAAgB,GAAG,GAAG,CAAC;EACtD,SAASE,CAACA,CAACC,GAAG,EAAEC,GAAG,EAAE;IACnB,SAAS;;IAET,OAAO,GAAG,GAAG,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;EACpC;EACA,SAASE,CAACA,CAACF,GAAG,EAAEC,GAAG,EAAE;IACnB,SAAS;;IAET,OAAO,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;EAC9B;EACA,SAASG,CAACA,CAACH,GAAG,EAAE;IACd,SAAS;;IAET,OAAO,GAAG,GAAGA,GAAG;EAClB;EAGA,SAASI,UAAUA,CAACC,EAAE,EAAEL,GAAG,EAAEC,GAAG,EAAE;IAChC,SAAS;;IAET,OAAO,CAAC,CAACF,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGI,EAAE,GAAGH,CAAC,CAACF,GAAG,EAAEC,GAAG,CAAC,IAAII,EAAE,GAAGF,CAAC,CAACH,GAAG,CAAC,IAAIK,EAAE;EAC9D;EAGA,SAASC,QAAQA,CAACD,EAAE,EAAEL,GAAG,EAAEC,GAAG,EAAE;IAC9B,SAAS;;IAET,OAAO,GAAG,GAAGF,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGI,EAAE,GAAGA,EAAE,GAAG,GAAG,GAAGH,CAAC,CAACF,GAAG,EAAEC,GAAG,CAAC,GAAGI,EAAE,GAAGF,CAAC,CAACH,GAAG,CAAC;EACtE;EACA,SAASO,eAAeA,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAErB,GAAG,EAAEE,GAAG,EAAE;IAC7C,SAAS;;IAET,IAAIoB,QAAQ;IACZ,IAAIC,QAAQ;IACZ,IAAIC,CAAC,GAAG,CAAC;IACT,GAAG;MACDD,QAAQ,GAAGH,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAE,IAAI,GAAG;MAC/BE,QAAQ,GAAGP,UAAU,CAACQ,QAAQ,EAAEvB,GAAG,EAAEE,GAAG,CAAC,GAAGiB,EAAE;MAC9C,IAAIG,QAAQ,GAAG,GAAG,EAAE;QAClBD,EAAE,GAAGE,QAAQ;MACf,CAAC,MAAM;QACLH,EAAE,GAAGG,QAAQ;MACf;IACF,CAAC,QAAQE,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAAC,GAAGhB,qBAAqB,IAAI,EAAEkB,CAAC,GAAGjB,0BAA0B;IACvF,OAAOgB,QAAQ;EACjB;EACA,SAASI,oBAAoBA,CAACR,EAAE,EAAES,OAAO,EAAE5B,GAAG,EAAEE,GAAG,EAAE;IACnD,SAAS;;IAET,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,iBAAiB,EAAE,EAAEoB,CAAC,EAAE;MAC1C,MAAMK,YAAY,GAAGZ,QAAQ,CAACW,OAAO,EAAE5B,GAAG,EAAEE,GAAG,CAAC;MAChD,IAAI2B,YAAY,KAAK,GAAG,EAAE;QACxB,OAAOD,OAAO;MAChB;MACA,MAAMN,QAAQ,GAAGP,UAAU,CAACa,OAAO,EAAE5B,GAAG,EAAEE,GAAG,CAAC,GAAGiB,EAAE;MACnDS,OAAO,IAAIN,QAAQ,GAAGO,YAAY;IACpC;IACA,OAAOD,OAAO;EAChB;EACA,SAASE,YAAYA,CAACC,CAAC,EAAE;IACvB,SAAS;;IAET,OAAOA,CAAC;EACV;EACA,IAAI,EAAE/B,GAAG,IAAI,CAAC,IAAIA,GAAG,IAAI,CAAC,IAAIE,GAAG,IAAI,CAAC,IAAIA,GAAG,IAAI,CAAC,CAAC,EAAE;IACnD,MAAM,IAAI8B,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EACA,IAAIhC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,EAAE;IAC9B,OAAO2B,YAAY;EACrB;EAUA,MAAMG,YAAY,GAAG,IAAIC,KAAK,CAAC1B,gBAAgB,CAAC;EAChD,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,gBAAgB,EAAE,EAAEgB,CAAC,EAAE;IACzCS,YAAY,CAACT,CAAC,CAAC,GAAGT,UAAU,CAACS,CAAC,GAAGf,eAAe,EAAET,GAAG,EAAEE,GAAG,CAAC;EAC7D;EACA,SAASiC,QAAQA,CAAChB,EAAE,EAAE;IACpB,SAAS;;IAET,IAAIiB,aAAa,GAAG,GAAG;IACvB,IAAIC,aAAa,GAAG,CAAC;IACrB,MAAMC,UAAU,GAAG9B,gBAAgB,GAAG,CAAC;IACvC,OAAO6B,aAAa,KAAKC,UAAU,IAAIL,YAAY,CAACI,aAAa,CAAC,IAAIlB,EAAE,EAAE,EAAEkB,aAAa,EAAE;MACzFD,aAAa,IAAI3B,eAAe;IAClC;IACA,EAAE4B,aAAa;IAGf,MAAME,IAAI,GAAG,CAACpB,EAAE,GAAGc,YAAY,CAACI,aAAa,CAAC,KAAKJ,YAAY,CAACI,aAAa,GAAG,CAAC,CAAC,GAAGJ,YAAY,CAACI,aAAa,CAAC,CAAC;IACjH,MAAMG,SAAS,GAAGJ,aAAa,GAAGG,IAAI,GAAG9B,eAAe;IACxD,MAAMgC,YAAY,GAAGxB,QAAQ,CAACuB,SAAS,EAAExC,GAAG,EAAEE,GAAG,CAAC;IAClD,IAAIuC,YAAY,IAAIpC,gBAAgB,EAAE;MACpC,OAAOsB,oBAAoB,CAACR,EAAE,EAAEqB,SAAS,EAAExC,GAAG,EAAEE,GAAG,CAAC;IACtD,CAAC,MAAM,IAAIuC,YAAY,KAAK,GAAG,EAAE;MAC/B,OAAOD,SAAS;IAClB,CAAC,MAAM;MACL,OAAOtB,eAAe,CAACC,EAAE,EAAEiB,aAAa,EAAEA,aAAa,GAAG3B,eAAe,EAAET,GAAG,EAAEE,GAAG,CAAC;IACtF;EACF;EACA,OAAO,SAASwC,YAAYA,CAACX,CAAC,EAAE;IAC9B,SAAS;;IAET,IAAI/B,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,EAAE;MAC9B,OAAO4B,CAAC;IACV;IAEA,IAAIA,CAAC,KAAK,CAAC,EAAE;MACX,OAAO,CAAC;IACV;IACA,IAAIA,CAAC,KAAK,CAAC,EAAE;MACX,OAAO,CAAC;IACV;IACA,OAAOhB,UAAU,CAACoB,QAAQ,CAACJ,CAAC,CAAC,EAAE9B,GAAG,EAAEE,GAAG,CAAC;EAC1C,CAAC;AACH\\\"}\"\n};\nvar _worklet_3374392297911_init_data = {\n  code: \"function A(aA1, aA2) {\\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"A\\\",\\\"aA1\\\",\\\"aA2\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AAiBE,SAAAA,CAAUA,CAACC,GAAA,EAAGC,GAAE,EAAG;EAGjB,OAAO,GAAG,GAAG,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;AACpC\\\"}\"\n};\nvar _worklet_16740236581141_init_data = {\n  code: \"function B(aA1, aA2) {\\n  return 3.0 * aA2 - 6.0 * aA1;\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"B\\\",\\\"aA1\\\",\\\"aA2\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AAsBE,SAAAA,CAAUA,CAACC,GAAA,EAAGC,GAAE,EAAG;EAGjB,OAAO,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;AAC9B\\\"}\"\n};\nvar _worklet_17250667303223_init_data = {\n  code: \"function C(aA1) {\\n  return 3.0 * aA1;\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"C\\\",\\\"aA1\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AA2BE,SAAAA,CAAUA,CAACC,GAAA,EAAG;EAGZ,OAAO,GAAG,GAAGA,GAAG;AAClB\\\"}\"\n};\nvar _worklet_3336129670125_init_data = {\n  code: \"function calcBezier(aT, aA1, aA2) {\\n  const {\\n    A,\\n    B,\\n    C\\n  } = this._closure;\\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"calcBezier\\\",\\\"aT\\\",\\\"aA1\\\",\\\"aA2\\\",\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"_closure\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AAiCE,SAAAA,WAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,SAAAH,CAAA,CAAAF,GAAA,EAAAC,GAAA,IAAAF,EAAA,GAAAI,CAAA,CAAAH,GAAA,EAAAC,GAAA,KAAAF,EAAA,GAAAK,CAAA,CAAAJ,GAAA,KAAAD,EAAA;AACA\\\"}\"\n};\nvar _worklet_6461718455249_init_data = {\n  code: \"function getSlope(aT, aA1, aA2) {\\n  const {\\n    A,\\n    B,\\n    C\\n  } = this._closure;\\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"getSlope\\\",\\\"aT\\\",\\\"aA1\\\",\\\"aA2\\\",\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"_closure\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AAwCE,SAAAA,SAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,aAAAH,CAAA,CAAAF,GAAA,EAAAC,GAAA,IAAAF,EAAA,GAAAA,EAAA,SAAAI,CAAA,CAAAH,GAAA,EAAAC,GAAA,IAAAF,EAAA,GAAAK,CAAA,CAAAJ,GAAA;AACA\\\"}\"\n};\nvar _worklet_249053909510_init_data = {\n  code: \"function binarySubdivide(aX, aA, aB, mX1, mX2) {\\n  const {\\n    SUBDIVISION_PRECISION,\\n    SUBDIVISION_MAX_ITERATIONS,\\n    calcBezier\\n  } = this._closure;\\n  let currentX;\\n  let currentT;\\n  let i = 0;\\n  do {\\n    currentT = aA + (aB - aA) / 2.0;\\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\\n    if (currentX > 0.0) {\\n      aB = currentT;\\n    } else {\\n      aA = currentT;\\n    }\\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\\n  return currentT;\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"binarySubdivide\\\",\\\"aX\\\",\\\"aA\\\",\\\"aB\\\",\\\"mX1\\\",\\\"mX2\\\",\\\"SUBDIVISION_PRECISION\\\",\\\"SUBDIVISION_MAX_ITERATIONS\\\",\\\"calcBezier\\\",\\\"_closure\\\",\\\"currentX\\\",\\\"currentT\\\",\\\"i\\\",\\\"Math\\\",\\\"abs\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AA8CE,SAAAA,eAASA,CAAgBC,EAAA,EAAEC,EAAE,EAAEC,EAAE,EAAEC,GAAE,EAAGC,GAAE,EAAG;EAAA;IAAAC,qBAAA;IAAAC,0BAAA;IAAAC;EAAA,SAAAC,QAAA;EAG3C,IAAIC,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAIC,CAAC,GAAG,CAAC;EACT,GAAG;IACDD,QAAQ,GAAGT,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAE,IAAI,GAAG;IAC/BQ,QAAQ,GAAGF,UAAU,CAACG,QAAQ,EAAEP,GAAG,EAAEC,GAAG,CAAC,GAAGJ,EAAE;IAC9C,IAAIS,QAAQ,GAAG,GAAG,EAAE;MAClBP,EAAE,GAAGQ,QAAQ;IACf,CAAC,MAAM;MACLT,EAAE,GAAGS,QAAQ;IACf;EACF,CAAC,QAAQE,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAAC,GAAGJ,qBAAqB,IAAI,EAAEM,CAAC,GAAGL,0BAA0B;EACvF,OAAOI,QAAQ;AACjB\\\"}\"\n};\nvar _worklet_303592406761_init_data = {\n  code: \"function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\\n  const {\\n    NEWTON_ITERATIONS,\\n    getSlope,\\n    calcBezier\\n  } = this._closure;\\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\\n    if (currentSlope === 0.0) {\\n      return aGuessT;\\n    }\\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\\n    aGuessT -= currentX / currentSlope;\\n  }\\n  return aGuessT;\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"newtonRaphsonIterate\\\",\\\"aX\\\",\\\"aGuessT\\\",\\\"mX1\\\",\\\"mX2\\\",\\\"NEWTON_ITERATIONS\\\",\\\"getSlope\\\",\\\"calcBezier\\\",\\\"_closure\\\",\\\"i\\\",\\\"currentSlope\\\",\\\"currentX\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AA+DE,SAAAA,oBAASA,CAAqBC,EAAA,EAAEC,OAAE,EAAOC,GAAE,EAAGC,GAAE,EAAG;EAAA;IAAAC,iBAAA;IAAAC,QAAA;IAAAC;EAAA,SAAAC,QAAA;EAGjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,iBAAiB,EAAE,EAAEI,CAAC,EAAE;IAC1C,MAAMC,YAAY,GAAGJ,QAAQ,CAACJ,OAAO,EAAEC,GAAG,EAAEC,GAAG,CAAC;IAChD,IAAIM,YAAY,KAAK,GAAG,EAAE;MACxB,OAAOR,OAAO;IAChB;IACA,MAAMS,QAAQ,GAAGJ,UAAU,CAACL,OAAO,EAAEC,GAAG,EAAEC,GAAG,CAAC,GAAGH,EAAE;IACnDC,OAAO,IAAIS,QAAQ,GAAGD,YAAY;EACpC;EACA,OAAOR,OAAO;AAChB\\\"}\"\n};\nvar _worklet_11601588428153_init_data = {\n  code: \"function LinearEasing(x) {\\n  return x;\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"LinearEasing\\\",\\\"x\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AA4EE,SAAAA,YAASA,CAAaC,CAAC;EAGrB,OAAOA,CAAC;AACV\\\"}\"\n};\nvar _worklet_16767251613109_init_data = {\n  code: \"function getTForX(aX) {\\n  const {\\n    kSplineTableSize,\\n    sampleValues,\\n    kSampleStepSize,\\n    getSlope,\\n    mX1,\\n    mX2,\\n    NEWTON_MIN_SLOPE,\\n    newtonRaphsonIterate,\\n    binarySubdivide\\n  } = this._closure;\\n  let intervalStart = 0.0;\\n  let currentSample = 1;\\n  const lastSample = kSplineTableSize - 1;\\n  for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\\n    intervalStart += kSampleStepSize;\\n  }\\n  --currentSample;\\n  const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\\n  const guessForT = intervalStart + dist * kSampleStepSize;\\n  const initialSlope = getSlope(guessForT, mX1, mX2);\\n  if (initialSlope >= NEWTON_MIN_SLOPE) {\\n    return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\\n  } else if (initialSlope === 0.0) {\\n    return guessForT;\\n  } else {\\n    return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\\n  }\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"getTForX\\\",\\\"aX\\\",\\\"kSplineTableSize\\\",\\\"sampleValues\\\",\\\"kSampleStepSize\\\",\\\"getSlope\\\",\\\"mX1\\\",\\\"mX2\\\",\\\"NEWTON_MIN_SLOPE\\\",\\\"newtonRaphsonIterate\\\",\\\"binarySubdivide\\\",\\\"_closure\\\",\\\"intervalStart\\\",\\\"currentSample\\\",\\\"lastSample\\\",\\\"dist\\\",\\\"guessForT\\\",\\\"initialSlope\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AAoGE,SAAAA,QAASA,CAASC,EAAA,EAAE;EAAA;IAAAC,gBAAA;IAAAC,YAAA;IAAAC,eAAA;IAAAC,QAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,gBAAA;IAAAC,oBAAA;IAAAC;EAAA,SAAAC,QAAA;EAGlB,IAAIC,aAAa,GAAG,GAAG;EACvB,IAAIC,aAAa,GAAG,CAAC;EACrB,MAAMC,UAAU,GAAGZ,gBAAgB,GAAG,CAAC;EACvC,OAAOW,aAAa,KAAKC,UAAU,IAAIX,YAAY,CAACU,aAAa,CAAC,IAAIZ,EAAE,EAAE,EAAEY,aAAa,EAAE;IACzFD,aAAa,IAAIR,eAAe;EAClC;EACA,EAAES,aAAa;EAGf,MAAME,IAAI,GAAG,CAACd,EAAE,GAAGE,YAAY,CAACU,aAAa,CAAC,KAAKV,YAAY,CAACU,aAAa,GAAG,CAAC,CAAC,GAAGV,YAAY,CAACU,aAAa,CAAC,CAAC;EACjH,MAAMG,SAAS,GAAGJ,aAAa,GAAGG,IAAI,GAAGX,eAAe;EACxD,MAAMa,YAAY,GAAGZ,QAAQ,CAACW,SAAS,EAAEV,GAAG,EAAEC,GAAG,CAAC;EAClD,IAAIU,YAAY,IAAIT,gBAAgB,EAAE;IACpC,OAAOC,oBAAoB,CAACR,EAAE,EAAEe,SAAS,EAAEV,GAAG,EAAEC,GAAG,CAAC;EACtD,CAAC,MAAM,IAAIU,YAAY,KAAK,GAAG,EAAE;IAC/B,OAAOD,SAAS;EAClB,CAAC,MAAM;IACL,OAAON,eAAe,CAACT,EAAE,EAAEW,aAAa,EAAEA,aAAa,GAAGR,eAAe,EAAEE,GAAG,EAAEC,GAAG,CAAC;EACtF;AACF\\\"}\"\n};\nvar _worklet_11458292201024_init_data = {\n  code: \"function BezierEasing(x) {\\n  const {\\n    mX1,\\n    mY1,\\n    mX2,\\n    mY2,\\n    calcBezier,\\n    getTForX\\n  } = this._closure;\\n  if (mX1 === mY1 && mX2 === mY2) {\\n    return x;\\n  }\\n  if (x === 0) {\\n    return 0;\\n  }\\n  if (x === 1) {\\n    return 1;\\n  }\\n  return calcBezier(getTForX(x), mY1, mY2);\\n}\",\n  location: \"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"BezierEasing\\\",\\\"x\\\",\\\"mX1\\\",\\\"mY1\\\",\\\"mX2\\\",\\\"mY2\\\",\\\"calcBezier\\\",\\\"getTForX\\\",\\\"_closure\\\"],\\\"sources\\\":[\\\"/Users/josh/src/ui/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\\\"],\\\"mappings\\\":\\\"AA2HS,SAAAA,YAASA,CAAaC,CAAC;EAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAG5B,IAAIN,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,EAAE;IAC9B,OAAOJ,CAAC;EACV;EAEA,IAAIA,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAAC;EACV;EACA,IAAIA,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAAC;EACV;EACA,OAAOK,UAAU,CAACC,QAAQ,CAACN,CAAC,CAAC,EAAEE,GAAG,EAAEE,GAAG,CAAC;AAC1C\\\"}\"\n};\nexport var Bezier = function () {\n  var _e = [new global.Error(), 1, -27];\n  var _f = function _f(mX1, mY1, mX2, mY2) {\n    var NEWTON_ITERATIONS = 4;\n    var NEWTON_MIN_SLOPE = 0.001;\n    var SUBDIVISION_PRECISION = 0.0000001;\n    var SUBDIVISION_MAX_ITERATIONS = 10;\n    var kSplineTableSize = 11;\n    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n    var A = function () {\n      var _e = [new global.Error(), 1, -27];\n      var _f = function _f(aA1, aA2) {\n        return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n      };\n      _f._closure = {};\n      _f.__initData = _worklet_3374392297911_init_data;\n      _f.__workletHash = 3374392297911;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    var B = function () {\n      var _e = [new global.Error(), 1, -27];\n      var _f = function _f(aA1, aA2) {\n        return 3.0 * aA2 - 6.0 * aA1;\n      };\n      _f._closure = {};\n      _f.__initData = _worklet_16740236581141_init_data;\n      _f.__workletHash = 16740236581141;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    var C = function () {\n      var _e = [new global.Error(), 1, -27];\n      var _f = function _f(aA1) {\n        return 3.0 * aA1;\n      };\n      _f._closure = {};\n      _f.__initData = _worklet_17250667303223_init_data;\n      _f.__workletHash = 17250667303223;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    var calcBezier = function () {\n      var _e = [new global.Error(), -4, -27];\n      var _f = function _f(aT, aA1, aA2) {\n        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n      };\n      _f._closure = {\n        A: A,\n        B: B,\n        C: C\n      };\n      _f.__initData = _worklet_3336129670125_init_data;\n      _f.__workletHash = 3336129670125;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    var getSlope = function () {\n      var _e = [new global.Error(), -4, -27];\n      var _f = function _f(aT, aA1, aA2) {\n        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n      };\n      _f._closure = {\n        A: A,\n        B: B,\n        C: C\n      };\n      _f.__initData = _worklet_6461718455249_init_data;\n      _f.__workletHash = 6461718455249;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    var binarySubdivide = function () {\n      var _e = [new global.Error(), -4, -27];\n      var _f = function _f(aX, aA, aB, mX1, mX2) {\n        var currentX;\n        var currentT;\n        var i = 0;\n        do {\n          currentT = aA + (aB - aA) / 2.0;\n          currentX = calcBezier(currentT, mX1, mX2) - aX;\n          if (currentX > 0.0) {\n            aB = currentT;\n          } else {\n            aA = currentT;\n          }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n      };\n      _f._closure = {\n        SUBDIVISION_PRECISION: SUBDIVISION_PRECISION,\n        SUBDIVISION_MAX_ITERATIONS: SUBDIVISION_MAX_ITERATIONS,\n        calcBezier: calcBezier\n      };\n      _f.__initData = _worklet_249053909510_init_data;\n      _f.__workletHash = 249053909510;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    var newtonRaphsonIterate = function () {\n      var _e = [new global.Error(), -4, -27];\n      var _f = function _f(aX, aGuessT, mX1, mX2) {\n        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n          var currentSlope = getSlope(aGuessT, mX1, mX2);\n          if (currentSlope === 0.0) {\n            return aGuessT;\n          }\n          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n          aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n      };\n      _f._closure = {\n        NEWTON_ITERATIONS: NEWTON_ITERATIONS,\n        getSlope: getSlope,\n        calcBezier: calcBezier\n      };\n      _f.__initData = _worklet_303592406761_init_data;\n      _f.__workletHash = 303592406761;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    var LinearEasing = function () {\n      var _e = [new global.Error(), 1, -27];\n      var _f = function _f(x) {\n        return x;\n      };\n      _f._closure = {};\n      _f.__initData = _worklet_11601588428153_init_data;\n      _f.__workletHash = 11601588428153;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n    if (mX1 === mY1 && mX2 === mY2) {\n      return LinearEasing;\n    }\n    var sampleValues = new Array(kSplineTableSize);\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    var getTForX = function () {\n      var _e = [new global.Error(), -10, -27];\n      var _f = function _f(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n          intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n          return guessForT;\n        } else {\n          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n      };\n      _f._closure = {\n        kSplineTableSize: kSplineTableSize,\n        sampleValues: sampleValues,\n        kSampleStepSize: kSampleStepSize,\n        getSlope: getSlope,\n        mX1: mX1,\n        mX2: mX2,\n        NEWTON_MIN_SLOPE: NEWTON_MIN_SLOPE,\n        newtonRaphsonIterate: newtonRaphsonIterate,\n        binarySubdivide: binarySubdivide\n      };\n      _f.__initData = _worklet_16767251613109_init_data;\n      _f.__workletHash = 16767251613109;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n    return function () {\n      var _e = [new global.Error(), -7, -27];\n      var _f = function _f(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n          return x;\n        }\n        if (x === 0) {\n          return 0;\n        }\n        if (x === 1) {\n          return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n      };\n      _f._closure = {\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        calcBezier: calcBezier,\n        getTForX: getTForX\n      };\n      _f.__initData = _worklet_11458292201024_init_data;\n      _f.__workletHash = 11458292201024;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }();\n  };\n  _f._closure = {};\n  _f.__initData = _worklet_11048418097672_init_data;\n  _f.__workletHash = 11048418097672;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();","map":{"version":3,"sources":["Bezier.ts"],"names":["Bezier","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope"],"mappings":"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","sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  const NEWTON_ITERATIONS = 4;\n  const NEWTON_MIN_SLOPE = 0.001;\n  const SUBDIVISION_PRECISION = 0.0000001;\n  const SUBDIVISION_MAX_ITERATIONS = 10;\n\n  const kSplineTableSize = 11;\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n  function A(aA1: number, aA2: number): number {\n    'worklet';\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1: number) {\n    'worklet';\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(\n    aX: number,\n    aA: number,\n    aB: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (\n      Math.abs(currentX) > SUBDIVISION_PRECISION &&\n      ++i < SUBDIVISION_MAX_ITERATIONS\n    );\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(\n    aX: number,\n    aGuessT: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // FIXME: Float32Array is not available in Hermes right now\n  //\n  // var float32ArraySupported = typeof Float32Array === 'function';\n  // const sampleValues = float32ArraySupported\n  // ? new Float32Array(kSplineTableSize)\n  // : new Array(kSplineTableSize);\n\n  // Precompute samples table\n  const sampleValues = new Array(kSplineTableSize);\n\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}