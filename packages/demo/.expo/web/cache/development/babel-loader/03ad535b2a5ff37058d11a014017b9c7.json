{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar InteractionManager = function () {\n  function InteractionManager() {\n    _classCallCheck(this, InteractionManager);\n    _defineProperty(this, \"waitForRelations\", new Map());\n    _defineProperty(this, \"simultaneousRelations\", new Map());\n    _defineProperty(this, \"blocksHandlersRelations\", new Map());\n  }\n  _createClass(InteractionManager, [{\n    key: \"configureInteractions\",\n    value: function configureInteractions(handler, config) {\n      this.dropRelationsForHandlerWithTag(handler.getTag());\n      if (config.waitFor) {\n        var waitFor = [];\n        config.waitFor.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            waitFor.push(otherHandler);\n          } else {\n            waitFor.push(otherHandler.handlerTag);\n          }\n        });\n        this.waitForRelations.set(handler.getTag(), waitFor);\n      }\n      if (config.simultaneousHandlers) {\n        var simultaneousHandlers = [];\n        config.simultaneousHandlers.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            simultaneousHandlers.push(otherHandler);\n          } else {\n            simultaneousHandlers.push(otherHandler.handlerTag);\n          }\n        });\n        this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n      }\n      if (config.blocksHandlers) {\n        var blocksHandlers = [];\n        config.blocksHandlers.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            blocksHandlers.push(otherHandler);\n          } else {\n            blocksHandlers.push(otherHandler.handlerTag);\n          }\n        });\n        this.blocksHandlersRelations.set(handler.getTag(), blocksHandlers);\n      }\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler, otherHandler) {\n      var waitFor = this.waitForRelations.get(handler.getTag());\n      return (waitFor === null || waitFor === void 0 ? void 0 : waitFor.find(function (tag) {\n        return tag === otherHandler.getTag();\n      })) !== undefined;\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler, otherHandler) {\n      var simultaneousHandlers = this.simultaneousRelations.get(handler.getTag());\n      return (simultaneousHandlers === null || simultaneousHandlers === void 0 ? void 0 : simultaneousHandlers.find(function (tag) {\n        return tag === otherHandler.getTag();\n      })) !== undefined;\n    }\n  }, {\n    key: \"shouldRequireHandlerToWaitForFailure\",\n    value: function shouldRequireHandlerToWaitForFailure(handler, otherHandler) {\n      var waitFor = this.blocksHandlersRelations.get(handler.getTag());\n      return (waitFor === null || waitFor === void 0 ? void 0 : waitFor.find(function (tag) {\n        return tag === otherHandler.getTag();\n      })) !== undefined;\n    }\n  }, {\n    key: \"shouldHandlerBeCancelledBy\",\n    value: function shouldHandlerBeCancelledBy(_handler, _otherHandler) {\n      return false;\n    }\n  }, {\n    key: \"dropRelationsForHandlerWithTag\",\n    value: function dropRelationsForHandlerWithTag(handlerTag) {\n      this.waitForRelations.delete(handlerTag);\n      this.simultaneousRelations.delete(handlerTag);\n      this.blocksHandlersRelations.delete(handlerTag);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.waitForRelations.clear();\n      this.simultaneousRelations.clear();\n      this.blocksHandlersRelations.clear();\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new InteractionManager();\n      }\n      return this.instance;\n    }\n  }]);\n  return InteractionManager;\n}();\nexport { InteractionManager as default };\n_defineProperty(InteractionManager, \"instance\", void 0);","map":{"version":3,"sources":["InteractionManager.ts"],"names":["InteractionManager","Map","constructor","configureInteractions","handler","config","dropRelationsForHandlerWithTag","getTag","waitFor","forEach","otherHandler","push","handlerTag","waitForRelations","set","simultaneousHandlers","simultaneousRelations","blocksHandlers","blocksHandlersRelations","shouldWaitForHandlerFailure","get","find","tag","undefined","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","shouldHandlerBeCancelledBy","_handler","_otherHandler","delete","reset","clear","getInstance","instance"],"mappings":"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","sourcesContent":["import GestureHandler from '../handlers/GestureHandler';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n  private readonly blocksHandlersRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: GestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.getTag());\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.getTag(), waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n    }\n\n    if (config.blocksHandlers) {\n      const blocksHandlers: number[] = [];\n      config.blocksHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          blocksHandlers.push(otherHandler);\n        } else {\n          blocksHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.blocksHandlersRelations.set(handler.getTag(), blocksHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.getTag()\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.getTag();\n      }) !== undefined\n    );\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const simultaneousHandlers: number[] | undefined =\n      this.simultaneousRelations.get(handler.getTag());\n\n    return (\n      simultaneousHandlers?.find((tag: number) => {\n        return tag === otherHandler.getTag();\n      }) !== undefined\n    );\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.blocksHandlersRelations.get(\n      handler.getTag()\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.getTag();\n      }) !== undefined\n    );\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: GestureHandler,\n    _otherHandler: GestureHandler\n  ): boolean {\n    //TODO: Implement logic\n    return false;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n    this.blocksHandlersRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n    this.blocksHandlersRelations.clear();\n  }\n\n  public static getInstance(): InteractionManager {\n    if (!this.instance) {\n      this.instance = new InteractionManager();\n    }\n\n    return this.instance;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}