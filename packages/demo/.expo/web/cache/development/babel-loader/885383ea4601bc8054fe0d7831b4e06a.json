{"ast":null,"code":"import { DateTime } from \"luxon\";\nfunction getDate(date) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref.timezone;\n  if (!date) {\n    throw new Error(\"Passed undefined\");\n  }\n  if (typeof date !== \"string\") {\n    throw new Error(`Invalid date type: ${typeof date}`);\n  }\n  var clonedDate = timezone ? DateTime.fromISO(date).setZone(timezone) : DateTime.fromISO(date);\n  if (!clonedDate.isValid) {\n    throw new Error(`Invalid date: ${date}`);\n  }\n  return clonedDate;\n}\nexport function isTomorrow(date) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref2.timezone;\n  var clonedDate = getDate(date, {\n    timezone: timezone\n  });\n  var now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n  var diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n  return diff.days <= -1 && diff.days > -2;\n}\nexport function isYesterday(date) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref3.timezone;\n  var clonedDate = getDate(date, {\n    timezone: timezone\n  });\n  var now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n  var diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n  return diff.days <= 1 && diff.days > -1;\n}\nexport function isToday(date) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref4.timezone;\n  var clonedDate = getDate(date, {\n    timezone: timezone\n  });\n  var now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n  var diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n  return diff.days === 0;\n}\nexport function isThisYear(date) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref5.timezone;\n  var clonedDate = getDate(date, {\n    timezone: timezone\n  });\n  var now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n  return clonedDate.year === now.year;\n}\nexport function isWithinWeek(date) {\n  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref6.timezone;\n  var clonedDate = getDate(date, {\n    timezone: timezone\n  });\n  var now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n  var diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n  return diff.days > -7 && diff.days < 7;\n}\nexport function humanDate(date) {\n  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref7.timezone,\n    dontShowTime = _ref7.dontShowTime;\n  var clonedDate;\n  try {\n    clonedDate = getDate(date, {\n      timezone: timezone\n    });\n  } catch (error) {\n    throw new Error(`humanDate: ${error.message}`);\n  }\n  if (isTomorrow(date, {\n    timezone: timezone\n  })) {\n    return \"Tomorrow\";\n  } else if (isToday(date, {\n    timezone: timezone\n  })) {\n    if (dontShowTime) {\n      return \"Today\";\n    } else {\n      return clonedDate.toFormat(\"h:mm a\");\n    }\n  } else if (isYesterday(date, {\n    timezone: timezone\n  })) {\n    return \"Yesterday\";\n  } else if (isWithinWeek(date, {\n    timezone: timezone\n  })) {\n    return clonedDate.toFormat(\"EEEE\");\n  } else if (isThisYear(date, {\n    timezone: timezone\n  })) {\n    return clonedDate.toFormat(\"MMM d\");\n  } else {\n    return clonedDate.toFormat(\"MMM d, iiii\");\n  }\n}\nexport function humanDateAndTime(date) {\n  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref8.timezone,\n    _ref8$showTimezone = _ref8.showTimezone,\n    showTimezone = _ref8$showTimezone === void 0 ? true : _ref8$showTimezone;\n  var clonedDate;\n  try {\n    clonedDate = getDate(date, {\n      timezone: timezone\n    });\n  } catch (error) {\n    throw new Error(`humanDateAndTime: ${error.message}`);\n  }\n  var time = clonedDate.toFormat(\"h:mm a\");\n  if (showTimezone) {\n    time += ` ${clonedDate.offsetNameShort}`;\n  }\n  if (isTomorrow(date, {\n    timezone: timezone\n  })) {\n    return `Tomorrow ${time}`;\n  } else if (isToday(date, {\n    timezone: timezone\n  })) {\n    return time;\n  } else if (isYesterday(date, {\n    timezone: timezone\n  })) {\n    return `Yesterday ${time}`;\n  } else if (isWithinWeek(date, {\n    timezone: timezone\n  })) {\n    return `${clonedDate.toFormat(\"EEEE\")} ${time}`;\n  } else if (isThisYear(date, {\n    timezone: timezone\n  })) {\n    return `${clonedDate.toFormat(\"MMM d\")} ${time}`;\n  } else {\n    return `${clonedDate.toFormat(\"MMM d, iiii\")} ${time}`;\n  }\n}\nexport var printDate = function printDate(date) {\n  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref9.timezone,\n    showTimezone = _ref9.showTimezone,\n    ignoreTime = _ref9.ignoreTime,\n    defaultValue = _ref9.defaultValue;\n  if (!date) {\n    return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n  }\n  if (showTimezone) {\n    console.warn(\"showTimezone is not supported for printDate\");\n  }\n  var clonedDate;\n  try {\n    clonedDate = getDate(date, {\n      timezone: timezone\n    });\n  } catch (error) {\n    throw new Error(`printDate: ${error.message}`);\n  }\n  if (ignoreTime) {\n    if (!date) {\n      throw new Error(\"printDate: Passed undefined\");\n    }\n    var justDate = DateTime.fromISO(date);\n    return justDate.setZone(\"UTC\").toFormat(\"M/d/yyyy\");\n  }\n  return clonedDate.toLocaleString(DateTime.DATE_SHORT);\n};\nexport var printOnlyDate = function printOnlyDate(date) {\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    defaultValue = _ref10.defaultValue;\n  if (!date) {\n    return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n  }\n  if (!(date === null || date === void 0 ? void 0 : date.endsWith(\"T00:00:00.000Z\"))) {\n    console.warn(\"printOnlyDate, but the time is not set to midnight UTC. \" + \"This may cause unexpected behavior.\");\n  }\n  var justDate = DateTime.fromISO(date, {\n    zone: \"UTC\"\n  });\n  return justDate.toFormat(\"M/d/yyyy\");\n};\nexport function printTime(date) {\n  var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      timezone: \"America/New_York\",\n      defaultValue: \"Invalid Date\"\n    },\n    timezone = _ref11.timezone,\n    showTimezone = _ref11.showTimezone,\n    defaultValue = _ref11.defaultValue;\n  if (!date) {\n    return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n  }\n  var clonedDate;\n  if (!timezone) {\n    throw new Error(\"printTime: timezone is required\");\n  }\n  try {\n    clonedDate = getDate(date, {\n      timezone: timezone\n    });\n  } catch (error) {\n    throw new Error(`printTime: ${error.message}`);\n  }\n  if (showTimezone) {\n    return clonedDate.toFormat(\"h:mm a ZZZZ\");\n  } else {\n    return clonedDate.toLocaleString(DateTime.TIME_SIMPLE);\n  }\n}\nexport function printDateAndTime(date) {\n  var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref12.timezone,\n    showTimezone = _ref12.showTimezone,\n    defaultValue = _ref12.defaultValue;\n  if (!date) {\n    return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Datetime\";\n  }\n  var clonedDate;\n  try {\n    clonedDate = getDate(date, {\n      timezone: timezone\n    });\n  } catch (error) {\n    throw new Error(`printDateAndTime: ${error.message}`);\n  }\n  var dateString = clonedDate.toLocaleString(DateTime.DATETIME_SHORT);\n  if (showTimezone) {\n    dateString += ` ${clonedDate.offsetNameShort}`;\n  }\n  return dateString;\n}\nexport function printDateRange(start, end, _ref13) {\n  var timezone = _ref13.timezone,\n    _ref13$showTimezone = _ref13.showTimezone,\n    showTimezone = _ref13$showTimezone === void 0 ? true : _ref13$showTimezone;\n  var startDate = printDate(start, {\n    timezone: timezone,\n    showTimezone: false\n  });\n  var endDate = printDate(end, {\n    timezone: timezone,\n    showTimezone: false\n  });\n  var startTime = printTime(start, {\n    timezone: timezone,\n    showTimezone: false\n  });\n  var endTime = printTime(end, {\n    timezone: timezone,\n    showTimezone: showTimezone\n  });\n  if (startDate === endDate) {\n    return `${startDate} ${startTime} - ${endTime}`;\n  } else {\n    return `${startDate} ${startTime} - ${endDate} ${endTime}`;\n  }\n}\nexport function printSince(date) {\n  var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    timezone = _ref14.timezone,\n    _ref14$showAgo = _ref14.showAgo,\n    showAgo = _ref14$showAgo === void 0 ? true : _ref14$showAgo;\n  var clonedDate;\n  var ago = showAgo ? \" ago\" : \"\";\n  try {\n    clonedDate = getDate(date, {\n      timezone: timezone\n    });\n  } catch (error) {\n    throw new Error(`printSince: ${error.message}`);\n  }\n  var now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n  var diff = now.diff(clonedDate, \"months\");\n  if (diff.months < 2) {\n    var days = Math.floor(now.diff(clonedDate, \"days\").days);\n    return `${days} ${days === 1 ? \"day\" : \"days\"}${ago}`;\n  } else if (diff.months < 12) {\n    var months = Math.floor(diff.months);\n    return `${months} ${months === 1 ? \"month\" : \"months\"}${ago}`;\n  } else {\n    var years = Math.floor(now.diff(clonedDate, \"years\").years);\n    return `${years} ${years === 1 ? \"year\" : \"years\"}${ago}`;\n  }\n}","map":{"version":3,"sources":["../src/DateUtilities.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DateTime } from \"luxon\";\nfunction getDate(date, { timezone } = {}) {\n    if (!date) {\n        throw new Error(\"Passed undefined\");\n    }\n    if (typeof date !== \"string\") {\n        throw new Error(`Invalid date type: ${typeof date}`);\n    }\n    const clonedDate = timezone ? DateTime.fromISO(date).setZone(timezone) : DateTime.fromISO(date);\n    if (!clonedDate.isValid) {\n        throw new Error(`Invalid date: ${date}`);\n    }\n    return clonedDate;\n}\nexport function isTomorrow(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days <= -1 && diff.days > -2;\n}\nexport function isYesterday(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days <= 1 && diff.days > -1;\n}\nexport function isToday(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days === 0;\n}\nexport function isThisYear(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    return clonedDate.year === now.year;\n}\nexport function isWithinWeek(date, { timezone } = {}) {\n    const clonedDate = getDate(date, { timezone });\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.startOf(\"day\").diff(clonedDate.startOf(\"day\"), \"days\");\n    return diff.days > -7 && diff.days < 7;\n}\n// Prints a human friendly date, e.g. \"Tomorrow\", \"Yesterday\", \"Monday\", \"June 19\", \"December 25,\n// 2022\".\nexport function humanDate(date, { timezone, dontShowTime } = {}) {\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`humanDate: ${error.message}`);\n    }\n    if (isTomorrow(date, { timezone })) {\n        return \"Tomorrow\";\n    }\n    else if (isToday(date, { timezone })) {\n        if (dontShowTime) {\n            return \"Today\";\n        }\n        else {\n            return clonedDate.toFormat(\"h:mm a\");\n        }\n    }\n    else if (isYesterday(date, { timezone })) {\n        return \"Yesterday\";\n    }\n    else if (isWithinWeek(date, { timezone })) {\n        // E.g. Monday\n        return clonedDate.toFormat(\"EEEE\");\n    }\n    else if (isThisYear(date, { timezone })) {\n        // E.g. June 19\n        return clonedDate.toFormat(\"MMM d\");\n    }\n    else {\n        // December 25, 2022\n        return clonedDate.toFormat(\"MMM d, iiii\");\n    }\n}\n// Prints a human friendly date and time, e.g. \"Tomorrow 9:00 AM\", \"Yesterday 9:00 AM\", \"Monday\n// 9:00 AM\", \"June 19 9:00 AM\", \"December 25, 2022 9:00 AM\".\nexport function humanDateAndTime(date, { timezone, showTimezone = true } = {}) {\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`humanDateAndTime: ${error.message}`);\n    }\n    // This should maybe use printTime()\n    let time = clonedDate.toFormat(\"h:mm a\");\n    if (showTimezone) {\n        time += ` ${clonedDate.offsetNameShort}`;\n    }\n    if (isTomorrow(date, { timezone })) {\n        return `Tomorrow ${time}`;\n    }\n    else if (isToday(date, { timezone })) {\n        return time;\n    }\n    else if (isYesterday(date, { timezone })) {\n        return `Yesterday ${time}`;\n    }\n    else if (isWithinWeek(date, { timezone })) {\n        // E.g. Monday 9:00 AM\n        return `${clonedDate.toFormat(\"EEEE\")} ${time}`;\n    }\n    else if (isThisYear(date, { timezone })) {\n        // E.g. June 19\n        return `${clonedDate.toFormat(\"MMM d\")} ${time}`;\n    }\n    else {\n        // December 25, 2022\n        return `${clonedDate.toFormat(\"MMM d, iiii\")} ${time}`;\n    }\n}\n// Print date in the format of M/D/YY, taking timezones into account.\nexport const printDate = (date, { timezone, showTimezone, ignoreTime, defaultValue, } = {}) => {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n    }\n    if (showTimezone) {\n        console.warn(\"showTimezone is not supported for printDate\");\n    }\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printDate: ${error.message}`);\n    }\n    if (ignoreTime) {\n        if (!date) {\n            throw new Error(\"printDate: Passed undefined\");\n        }\n        // Use only the date component, ignore the time.\n        const justDate = DateTime.fromISO(date);\n        // We force it into UTC so we can get the correct date.\n        return justDate.setZone(\"UTC\").toFormat(\"M/d/yyyy\");\n    }\n    return clonedDate.toLocaleString(DateTime.DATE_SHORT);\n};\n// For printing dates from date times, ignoring the time. These should end in T00:00:00.000Z.\n// For example, the dates returned by Field type=\"date\".\nexport const printOnlyDate = (date, { defaultValue, } = {}) => {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n    }\n    if (!(date === null || date === void 0 ? void 0 : date.endsWith(\"T00:00:00.000Z\"))) {\n        console.warn(\"printOnlyDate, but the time is not set to midnight UTC. \" +\n            \"This may cause unexpected behavior.\");\n    }\n    // Use only the date component, ignore the time.\n    const justDate = DateTime.fromISO(date, { zone: \"UTC\" });\n    // We force it into UTC so we can get the correct date.\n    return justDate.toFormat(\"M/d/yyyy\");\n};\n// Print time in the format of HH:mm A, taking timezones into account.\nexport function printTime(date, { timezone, showTimezone, defaultValue, } = { timezone: \"America/New_York\", defaultValue: \"Invalid Date\" }) {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Date\";\n    }\n    let clonedDate;\n    if (!timezone) {\n        throw new Error(\"printTime: timezone is required\");\n    }\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printTime: ${error.message}`);\n    }\n    if (showTimezone) {\n        return clonedDate.toFormat(\"h:mm a ZZZZ\");\n    }\n    else {\n        return clonedDate.toLocaleString(DateTime.TIME_SIMPLE);\n    }\n}\n// Print date in the format of M/D/YY HH:mm A, taking timezones into account.\nexport function printDateAndTime(date, { timezone, showTimezone, defaultValue, } = {}) {\n    if (!date) {\n        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"Invalid Datetime\";\n    }\n    let clonedDate;\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printDateAndTime: ${error.message}`);\n    }\n    let dateString = clonedDate.toLocaleString(DateTime.DATETIME_SHORT);\n    if (showTimezone) {\n        dateString += ` ${clonedDate.offsetNameShort}`;\n    }\n    return dateString;\n}\n// Prints a date range in the format of M/D/YY HH:mm A - M/D/YY HH:mm A EST, taking timezones into\n// account. If the dates are the same, it will print the date only once, e.g. M/D/YY HH:mm A - HH:mm\n// A EST.\nexport function printDateRange(start, end, { timezone, showTimezone = true }) {\n    const startDate = printDate(start, { timezone, showTimezone: false });\n    const endDate = printDate(end, { timezone, showTimezone: false });\n    const startTime = printTime(start, { timezone, showTimezone: false });\n    const endTime = printTime(end, { timezone, showTimezone });\n    if (startDate === endDate) {\n        return `${startDate} ${startTime} - ${endTime}`;\n    }\n    else {\n        return `${startDate} ${startTime} - ${endDate} ${endTime}`;\n    }\n}\n// Print since nicely. If less than 2 months, print days, otherwise print months. If over 1 year,\n// print years.\nexport function printSince(date, { timezone, showAgo = true } = {}) {\n    let clonedDate;\n    const ago = showAgo ? \" ago\" : \"\";\n    try {\n        clonedDate = getDate(date, { timezone });\n    }\n    catch (error) {\n        throw new Error(`printSince: ${error.message}`);\n    }\n    const now = timezone ? DateTime.now().setZone(timezone) : DateTime.now();\n    const diff = now.diff(clonedDate, \"months\");\n    if (diff.months < 2) {\n        const days = Math.floor(now.diff(clonedDate, \"days\").days);\n        return `${days} ${days === 1 ? \"day\" : \"days\"}${ago}`;\n    }\n    else if (diff.months < 12) {\n        const months = Math.floor(diff.months);\n        return `${months} ${months === 1 ? \"month\" : \"months\"}${ago}`;\n    }\n    else {\n        const years = Math.floor(now.diff(clonedDate, \"years\").years);\n        return `${years} ${years === 1 ? \"year\" : \"years\"}${ago}`;\n    }\n}\n//# sourceMappingURL=DateUtilities.js.map"]},"metadata":{},"sourceType":"module"}