{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from \"react\";\nimport { Box } from \"./Box\";\nimport { CheckBox } from \"./CheckBox\";\nimport { USSTATESLIST } from \"./Constants\";\nimport { CustomSelect } from \"./CustomSelect\";\nimport { FieldWithLabels } from \"./FieldWithLabels\";\nimport { SelectList } from \"./SelectList\";\nimport { Signature } from \"./Signature\";\nimport { Switch } from \"./Switch\";\nimport { Text } from \"./Text\";\nimport { TextArea } from \"./TextArea\";\nimport { TextField } from \"./TextField\";\nimport { UnifiedAddressAutoCompleteField } from \"./UnifiedAddressAutoComplete\";\nexport var Field = function Field(_ref) {\n  var name = _ref.name,\n    label = _ref.label,\n    labelColor = _ref.labelColor,\n    height = _ref.height,\n    type = _ref.type,\n    rows = _ref.rows,\n    value = _ref.value,\n    _onChange = _ref.onChange,\n    _onBlur = _ref.onBlur,\n    onStart = _ref.onStart,\n    onEnd = _ref.onEnd,\n    options = _ref.options,\n    placeholder = _ref.placeholder,\n    disabled = _ref.disabled,\n    errorMessage = _ref.errorMessage,\n    errorMessageColor = _ref.errorMessageColor,\n    helperText = _ref.helperText,\n    helperTextColor = _ref.helperTextColor,\n    _ref$includeCounty = _ref.includeCounty,\n    includeCounty = _ref$includeCounty === void 0 ? false : _ref$includeCounty,\n    googleMapsApiKey = _ref.googleMapsApiKey,\n    googlePlacesMobileStyles = _ref.googlePlacesMobileStyles,\n    testID = _ref.testID;\n  var _handleAddressChange = function handleAddressChange(field, newValue) {\n    _onChange(Object.assign(Object.assign({}, value), _defineProperty({}, field, newValue)));\n    _onBlur && _onBlur(Object.assign(Object.assign({}, value), _defineProperty({}, field, newValue)));\n  };\n  var _handleAutoCompleteChange = function handleAutoCompleteChange(newValue) {\n    _onChange(Object.assign(Object.assign({}, value), newValue));\n  };\n  var handleSwitchChange = function handleSwitchChange(switchValue) {\n    _onChange(switchValue);\n    _onBlur && _onBlur(switchValue);\n  };\n  var renderField = function renderField() {\n    if (type === \"select\") {\n      if (!options) {\n        console.error(\"Field with type=select require options\");\n        return undefined;\n      }\n      return React.createElement(SelectList, {\n        disabled: disabled,\n        id: name,\n        options: options,\n        placeholder: placeholder,\n        testID: testID,\n        value: value,\n        onChange: function onChange(result) {\n          _onChange(result);\n          _onBlur && _onBlur(result);\n        }\n      });\n    } else if (type === \"multiselect\") {\n      if (options === undefined) {\n        console.error(\"Field with type=multiselect require options\");\n        return undefined;\n      }\n      return React.createElement(Box, {\n        width: \"100%\"\n      }, options.map(function (o) {\n        return React.createElement(Box, {\n          key: o.label + o.value,\n          alignItems: \"center\",\n          direction: \"row\",\n          justifyContent: \"between\",\n          width: \"100%\"\n        }, React.createElement(Box, {\n          flex: \"shrink\",\n          marginRight: 2\n        }, React.createElement(Text, {\n          weight: \"bold\"\n        }, o.label)), React.createElement(Box, null, React.createElement(CheckBox, {\n          key: o.label + o.value,\n          checked: (value !== null && value !== void 0 ? value : []).includes(o.value),\n          disabled: disabled,\n          name: name,\n          size: \"sm\",\n          testID: `${testID}-${o.value}`,\n          onChange: function onChange(result) {\n            var newValue;\n            if (result.value) {\n              if (value.includes(o.value)) {\n                console.warn(`Tried to add value that already exists: ${o.value}`);\n                return;\n              }\n              newValue = [].concat(_toConsumableArray(value), [o.value]);\n            } else {\n              newValue = value.filter(function (v) {\n                return v !== o.value;\n              });\n            }\n            _onChange(newValue);\n            _onBlur && _onBlur(newValue);\n          }\n        })));\n      }));\n    } else if (type === \"textarea\") {\n      return React.createElement(TextArea, {\n        disabled: disabled,\n        height: height !== null && height !== void 0 ? height : 100,\n        id: name,\n        placeholder: Boolean(value) ? \"\" : placeholder,\n        rows: rows,\n        testID: testID,\n        value: String(value),\n        onBlur: _onBlur,\n        onChange: function onChange(result) {\n          return _onChange(result.value);\n        }\n      });\n    } else if (type === \"boolean\") {\n      return React.createElement(Switch, {\n        disabled: disabled,\n        id: name,\n        name: name,\n        switched: Boolean(value),\n        testID: testID,\n        onChange: function onChange(result) {\n          handleSwitchChange(result);\n        }\n      });\n    } else if (type && [\"date\", \"time\", \"datetime\"].includes(type)) {\n      return React.createElement(TextField, {\n        disabled: disabled,\n        id: name,\n        placeholder: placeholder,\n        testID: testID,\n        type: type,\n        value: value,\n        onBlur: function onBlur(result) {\n          _onBlur && _onBlur(result.value);\n        },\n        onChange: function onChange(result) {\n          return _onChange(result.value);\n        }\n      });\n    } else if (type === \"address\") {\n      var addressValue = value ? value : {};\n      var _addressValue$address = addressValue.address1,\n        address1 = _addressValue$address === void 0 ? \"\" : _addressValue$address,\n        _addressValue$address2 = addressValue.address2,\n        address2 = _addressValue$address2 === void 0 ? \"\" : _addressValue$address2,\n        _addressValue$city = addressValue.city,\n        city = _addressValue$city === void 0 ? \"\" : _addressValue$city,\n        _addressValue$state = addressValue.state,\n        state = _addressValue$state === void 0 ? \"\" : _addressValue$state,\n        _addressValue$zipcode = addressValue.zipcode,\n        zipcode = _addressValue$zipcode === void 0 ? \"\" : _addressValue$zipcode,\n        _addressValue$countyN = addressValue.countyName,\n        countyName = _addressValue$countyN === void 0 ? \"\" : _addressValue$countyN,\n        _addressValue$countyC = addressValue.countyCode,\n        countyCode = _addressValue$countyC === void 0 ? \"\" : _addressValue$countyC;\n      return React.createElement(React.Fragment, null, React.createElement(UnifiedAddressAutoCompleteField, {\n        disabled: disabled,\n        googleMapsApiKey: googleMapsApiKey,\n        googlePlacesMobileStyles: googlePlacesMobileStyles,\n        handleAddressChange: function handleAddressChange(result) {\n          return _handleAddressChange(\"address1\", result.value);\n        },\n        handleAutoCompleteChange: function handleAutoCompleteChange(result) {\n          return _handleAutoCompleteChange(result);\n        },\n        includeCounty: includeCounty,\n        inputValue: address1,\n        testID: `${testID}-address1`\n      }), React.createElement(TextField, {\n        disabled: disabled,\n        id: \"address2\",\n        label: \"Apt, suite, etc\",\n        testID: `${testID}-address2`,\n        type: \"text\",\n        value: address2,\n        onChange: function onChange(result) {\n          return _handleAddressChange(\"address2\", result.value);\n        }\n      }), React.createElement(TextField, {\n        disabled: disabled,\n        id: \"city\",\n        label: \"City\",\n        testID: `${testID}-city`,\n        type: \"text\",\n        value: city,\n        onChange: function onChange(result) {\n          return _handleAddressChange(\"city\", result.value);\n        }\n      }), React.createElement(SelectList, {\n        disabled: disabled,\n        id: \"state\",\n        label: \"State\",\n        options: USSTATESLIST,\n        placeholder: \"Select state\",\n        style: {\n          borderRadius: 16\n        },\n        testID: `${testID}-state`,\n        value: state,\n        onChange: function onChange(result) {\n          _handleAddressChange(\"state\", result);\n        }\n      }), React.createElement(TextField, {\n        disabled: disabled,\n        id: \"zipcode\",\n        label: \"Zipcode\",\n        testID: `${testID}-zip`,\n        type: \"text\",\n        value: zipcode,\n        onChange: function onChange(result) {\n          return _handleAddressChange(\"zipcode\", result.value);\n        }\n      }), includeCounty && React.createElement(React.Fragment, null, React.createElement(TextField, {\n        disabled: disabled,\n        id: \"countyName\",\n        label: \"County Name\",\n        testID: `${testID}-county`,\n        type: \"text\",\n        value: countyName,\n        onChange: function onChange(result) {\n          return _handleAddressChange(\"countyName\", result.value);\n        }\n      }), React.createElement(TextField, {\n        disabled: disabled,\n        id: \"countyCode\",\n        label: \"County Code\",\n        testID: `${testID}-county-code`,\n        type: \"number\",\n        value: countyCode,\n        onChange: function onChange(result) {\n          return _handleAddressChange(\"countyCode\", result.value);\n        }\n      })));\n    } else if (type === \"customSelect\") {\n      if (!options) {\n        console.error(\"Field with type=customSelect require options\");\n        return null;\n      }\n      return React.createElement(CustomSelect, {\n        disabled: disabled,\n        options: options,\n        placeholder: placeholder,\n        value: value,\n        onChange: function onChange(val) {\n          _onChange(val);\n          _onBlur && _onBlur(val);\n        }\n      });\n    } else if (type === \"number\") {\n      return React.createElement(TextField, {\n        disabled: disabled,\n        id: name,\n        placeholder: placeholder,\n        testID: testID,\n        type: \"number\",\n        value: value,\n        onBlur: function onBlur(result) {\n          _onBlur && _onBlur(result.value);\n        },\n        onChange: function onChange(result) {\n          _onChange(result.value);\n        }\n      });\n    } else if (type === \"signature\") {\n      return React.createElement(Signature, {\n        onChange: _onChange,\n        onEnd: onEnd,\n        onStart: onStart\n      });\n    } else {\n      var tfType = \"text\";\n      var tfValue = value;\n      if (type && [\"date\", \"time\", \"datetime\", \"email\", \"phoneNumber\", \"password\", \"url\"].includes(type)) {\n        tfType = type;\n      } else if (type === \"percent\" || type === \"currency\") {\n        tfType = \"text\";\n      }\n      var autoComplete = \"on\";\n      if (tfType === \"password\") {\n        autoComplete = \"current-password\";\n      } else if (tfType === \"email\") {\n        autoComplete = \"username\";\n      }\n      if (type === \"percent\") {\n        tfValue = `${Number(value).toFixed(0)}%`;\n      } else if (type === \"currency\") {\n        tfValue = `$${Number(value).toFixed(2)}`;\n      }\n      return React.createElement(TextField, {\n        autoComplete: autoComplete,\n        disabled: disabled,\n        id: name,\n        placeholder: placeholder,\n        testID: testID,\n        type: tfType,\n        value: tfValue,\n        onBlur: function onBlur(result) {\n          _onBlur && _onBlur(result.value);\n        },\n        onChange: function onChange(result) {\n          return _onChange(result.value);\n        }\n      });\n    }\n  };\n  var children = renderField();\n  return React.createElement(Box, {\n    marginBottom: 5\n  }, React.createElement(FieldWithLabels, {\n    errorMessage: errorMessage,\n    errorMessageColor: errorMessageColor,\n    helperText: helperText,\n    helperTextColor: helperTextColor,\n    label: label,\n    labelColor: labelColor\n  }, children));\n};","map":{"version":3,"sources":["../src/Field.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { Box } from \"./Box\";\nimport { CheckBox } from \"./CheckBox\";\nimport { USSTATESLIST } from \"./Constants\";\nimport { CustomSelect } from \"./CustomSelect\";\nimport { FieldWithLabels } from \"./FieldWithLabels\";\nimport { SelectList } from \"./SelectList\";\nimport { Signature } from \"./Signature\";\nimport { Switch } from \"./Switch\";\nimport { Text } from \"./Text\";\nimport { TextArea } from \"./TextArea\";\nimport { TextField } from \"./TextField\";\nimport { UnifiedAddressAutoCompleteField } from \"./UnifiedAddressAutoComplete\";\nexport const Field = ({ name, label, labelColor, height, type, rows, value, onChange, onBlur, onStart, onEnd, options, placeholder, disabled, errorMessage, errorMessageColor, helperText, helperTextColor, includeCounty = false, googleMapsApiKey, googlePlacesMobileStyles, testID, }) => {\n    const handleAddressChange = (field, newValue) => {\n        onChange(Object.assign(Object.assign({}, value), { [field]: newValue }));\n        onBlur && onBlur(Object.assign(Object.assign({}, value), { [field]: newValue }));\n    };\n    const handleAutoCompleteChange = (newValue) => {\n        onChange(Object.assign(Object.assign({}, value), newValue));\n    };\n    const handleSwitchChange = (switchValue) => {\n        onChange(switchValue);\n        onBlur && onBlur(switchValue);\n    };\n    const renderField = () => {\n        if (type === \"select\") {\n            if (!options) {\n                console.error(\"Field with type=select require options\");\n                return undefined;\n            }\n            return (React.createElement(SelectList, { disabled: disabled, id: name, options: options, placeholder: placeholder, testID: testID, value: value, onChange: (result) => {\n                    onChange(result);\n                    onBlur && onBlur(result);\n                } }));\n        }\n        else if (type === \"multiselect\") {\n            if (options === undefined) {\n                console.error(\"Field with type=multiselect require options\");\n                return undefined;\n            }\n            return (React.createElement(Box, { width: \"100%\" }, options.map((o) => (React.createElement(Box, { key: o.label + o.value, alignItems: \"center\", direction: \"row\", justifyContent: \"between\", width: \"100%\" },\n                React.createElement(Box, { flex: \"shrink\", marginRight: 2 },\n                    React.createElement(Text, { weight: \"bold\" }, o.label)),\n                React.createElement(Box, null,\n                    React.createElement(CheckBox, { key: o.label + o.value, checked: (value !== null && value !== void 0 ? value : []).includes(o.value), disabled: disabled, name: name, size: \"sm\", testID: `${testID}-${o.value}`, onChange: (result) => {\n                            let newValue;\n                            if (result.value) {\n                                if (value.includes(o.value)) {\n                                    console.warn(`Tried to add value that already exists: ${o.value}`);\n                                    return;\n                                }\n                                newValue = [...value, o.value];\n                            }\n                            else {\n                                newValue = value.filter((v) => v !== o.value);\n                            }\n                            onChange(newValue);\n                            onBlur && onBlur(newValue);\n                        } })))))));\n        }\n        else if (type === \"textarea\") {\n            return (React.createElement(TextArea, { disabled: disabled, height: height !== null && height !== void 0 ? height : 100, id: name, placeholder: Boolean(value) ? \"\" : placeholder, rows: rows, testID: testID, value: String(value), onBlur: onBlur, onChange: (result) => onChange(result.value) }));\n        }\n        else if (type === \"boolean\") {\n            return (React.createElement(Switch, { disabled: disabled, id: name, name: name, switched: Boolean(value), testID: testID, onChange: (result) => {\n                    handleSwitchChange(result);\n                } }));\n        }\n        else if (type && [\"date\", \"time\", \"datetime\"].includes(type)) {\n            return (React.createElement(TextField, { disabled: disabled, id: name, placeholder: placeholder, testID: testID, type: type, value: value, onBlur: (result) => {\n                    onBlur && onBlur(result.value);\n                }, onChange: (result) => onChange(result.value) }));\n        }\n        else if (type === \"address\") {\n            const addressValue = value ? value : {};\n            const { address1 = \"\", address2 = \"\", city = \"\", state = \"\", zipcode = \"\", countyName = \"\", countyCode = \"\", } = addressValue;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(UnifiedAddressAutoCompleteField, { disabled: disabled, googleMapsApiKey: googleMapsApiKey, googlePlacesMobileStyles: googlePlacesMobileStyles, handleAddressChange: (result) => handleAddressChange(\"address1\", result.value), handleAutoCompleteChange: (result) => handleAutoCompleteChange(result), includeCounty: includeCounty, inputValue: address1, testID: `${testID}-address1` }),\n                React.createElement(TextField, { disabled: disabled, id: \"address2\", label: \"Apt, suite, etc\", testID: `${testID}-address2`, type: \"text\", value: address2, onChange: (result) => handleAddressChange(\"address2\", result.value) }),\n                React.createElement(TextField, { disabled: disabled, id: \"city\", label: \"City\", testID: `${testID}-city`, type: \"text\", value: city, onChange: (result) => handleAddressChange(\"city\", result.value) }),\n                React.createElement(SelectList, { disabled: disabled, id: \"state\", label: \"State\", options: USSTATESLIST, placeholder: \"Select state\", style: { borderRadius: 16 }, testID: `${testID}-state`, value: state, onChange: (result) => {\n                        handleAddressChange(\"state\", result);\n                    } }),\n                React.createElement(TextField, { disabled: disabled, id: \"zipcode\", label: \"Zipcode\", testID: `${testID}-zip`, type: \"text\", value: zipcode, onChange: (result) => handleAddressChange(\"zipcode\", result.value) }),\n                includeCounty && (React.createElement(React.Fragment, null,\n                    React.createElement(TextField, { disabled: disabled, id: \"countyName\", label: \"County Name\", testID: `${testID}-county`, type: \"text\", value: countyName, onChange: (result) => handleAddressChange(\"countyName\", result.value) }),\n                    React.createElement(TextField, { disabled: disabled, id: \"countyCode\", label: \"County Code\", testID: `${testID}-county-code`, type: \"number\", value: countyCode, onChange: (result) => handleAddressChange(\"countyCode\", result.value) })))));\n        }\n        else if (type === \"customSelect\") {\n            if (!options) {\n                console.error(\"Field with type=customSelect require options\");\n                return null;\n            }\n            return (React.createElement(CustomSelect, { disabled: disabled, options: options, placeholder: placeholder, value: value, onChange: (val) => {\n                    onChange(val);\n                    onBlur && onBlur(val);\n                } }));\n        }\n        else if (type === \"number\") {\n            return (React.createElement(TextField, { disabled: disabled, id: name, placeholder: placeholder, testID: testID, type: \"number\", value: value, onBlur: (result) => {\n                    onBlur && onBlur(result.value);\n                }, onChange: (result) => {\n                    onChange(result.value);\n                } }));\n        }\n        else if (type === \"signature\") {\n            return React.createElement(Signature, { onChange: onChange, onEnd: onEnd, onStart: onStart });\n        }\n        else {\n            let tfType = \"text\";\n            let tfValue = value;\n            // Number is supported differently because we need fractional numbers and they don't work\n            // well on iOS.\n            if (type &&\n                [\"date\", \"time\", \"datetime\", \"email\", \"phoneNumber\", \"password\", \"url\"].includes(type)) {\n                tfType = type;\n            }\n            else if (type === \"percent\" || type === \"currency\") {\n                tfType = \"text\";\n            }\n            let autoComplete = \"on\";\n            if (tfType === \"password\") {\n                autoComplete = \"current-password\";\n            }\n            else if (tfType === \"email\") {\n                autoComplete = \"username\";\n            }\n            if (type === \"percent\") {\n                tfValue = `${Number(value).toFixed(0)}%`;\n            }\n            else if (type === \"currency\") {\n                tfValue = `$${Number(value).toFixed(2)}`;\n            }\n            return (React.createElement(TextField, { autoComplete: autoComplete, disabled: disabled, id: name, placeholder: placeholder, testID: testID, type: tfType, value: tfValue, onBlur: (result) => {\n                    onBlur && onBlur(result.value);\n                }, onChange: (result) => onChange(result.value) }));\n        }\n    };\n    const children = renderField();\n    return (React.createElement(Box, { marginBottom: 5 },\n        React.createElement(FieldWithLabels, { errorMessage,\n            errorMessageColor,\n            helperText,\n            helperTextColor,\n            label,\n            labelColor }, children)));\n};\n//# sourceMappingURL=Field.js.map"]},"metadata":{},"sourceType":"module"}